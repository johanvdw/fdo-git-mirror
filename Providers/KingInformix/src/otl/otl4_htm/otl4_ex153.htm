<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
  <title>OTL 4.0, Example 153 (create_stored_proc_call)</title>
</head>
<body>
<center>
<h1>OTL 4.0, Example 153 (create_stored_proc_call)</h1>
</center>
<h1>
Example 153 (create_stored_proc_call)</h1>
This example demonstrates the use of otl_stream::<a
 href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>()
in OTL/OCI8/9.
<h2>Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
<pre>#define OTL_ORA8 // Compile OTL 4.0/OCI8<br>//#define OTL_ORA8I // Compile OTL 4.0/OCI8i<br>//#define OTL_ORA9I // Compile OTL 4.0/OCI9i<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a
 href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br><br>void print_proc_type(const int stm_type)<br>{<br>&nbsp; switch(stm_type){<br>&nbsp; case otl_inout_stream_type:<br>&nbsp;&nbsp;&nbsp; cout&lt;&lt;"OTL IN/OUT stream";<br>&nbsp;&nbsp;&nbsp; break;<br>&nbsp; case otl_refcur_stream_type:<br>&nbsp;&nbsp;&nbsp; cout&lt;&lt;"OTL reference cursor stream";<br>&nbsp;&nbsp;&nbsp; break;<br>&nbsp; case otl_constant_sql_type:<br>&nbsp;&nbsp;&nbsp; cout&lt;&lt;"OTL constant statement without any parameters";<br>&nbsp;&nbsp;&nbsp; break;<br>&nbsp; }<br>}<br><br>void stored_proc()<br>{&nbsp;<br>&nbsp;<a
 href="otl3_stream_class.htm">otl_stream</a> s; // stream variable, external to the create_stored_proc_call()<br><br>&nbsp;char sql_stm[4096];<br>&nbsp;int stm_type;&nbsp;<br>&nbsp;char refcur_placeholder[128];<br><br>&nbsp; otl_stream::<a
 href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>&nbsp;<br>&nbsp;&nbsp; (db, // connect object<br>&nbsp;&nbsp;&nbsp; s, // an external stream variable is needed here<br>&nbsp;&nbsp;&nbsp; sql_stm, // output buffer for generating a stored procedure call<br>&nbsp;&nbsp;&nbsp; stm_type, // output paremeter, indicating what type of stored procedure<br>&nbsp;&nbsp;&nbsp; refcur_placeholder, // output parameter, which gets populated<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in the case of a stored procedure that returns<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a reference cursor.<br>&nbsp;&nbsp;&nbsp; "my_proc1", // stored procedure name<br>&nbsp;&nbsp;&nbsp; "my_pkg" // PL/SQL package name<br>&nbsp;&nbsp; );<br>&nbsp; cout&lt;&lt;"SQL_STM1="&lt;&lt;sql_stm&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"STM_TYPE1=";<br>&nbsp; print_proc_type(stm_type);<br>&nbsp; cout&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"REF.CUR.NAME1="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;endl;<br><br>&nbsp; otl_stream::<a
 href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>&nbsp;<br>&nbsp;&nbsp; (db, // connect object<br>&nbsp;&nbsp;&nbsp; s, // an external stream variable is needed here<br>&nbsp;&nbsp;&nbsp; sql_stm, // output buffer for generating a stored procedure call<br>&nbsp;&nbsp;&nbsp; stm_type, // output paremeter, indicating what type of stored procedure<br>&nbsp;&nbsp;&nbsp; refcur_placeholder, // output parameter, which gets populated<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in the case of a stored procedure that returns<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a reference cursor.<br>&nbsp;&nbsp;&nbsp; "my_proc2", // stored procedure name<br>&nbsp;&nbsp;&nbsp; "my_pkg" // PL/SQL package name<br>&nbsp;&nbsp; );<br>&nbsp; cout&lt;&lt;"SQL_STM2="&lt;&lt;sql_stm&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"STM_TYPE2=";<br>&nbsp; print_proc_type(stm_type);<br>&nbsp; cout&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"REF.CUR.NAME2="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;endl;<br><br>&nbsp; otl_stream::<a
 href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>&nbsp;<br>&nbsp;&nbsp; (db, // connect object<br>&nbsp;&nbsp;&nbsp; s, // an external stream variable is needed here<br>&nbsp;&nbsp;&nbsp; sql_stm, // output buffer for generating a stored procedure call<br>&nbsp;&nbsp;&nbsp; stm_type, // output paremeter, indicating what type of stored procedure<br>&nbsp;&nbsp;&nbsp; refcur_placeholder, // output parameter, which gets populated<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in the case of a stored procedure that returns<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a reference cursor.<br>&nbsp;&nbsp;&nbsp; "my_func1", // stored function name<br>&nbsp;&nbsp;&nbsp; "my_pkg" // PL/SQL package name<br>&nbsp;&nbsp; );<br>&nbsp; cout&lt;&lt;"SQL_STM3="&lt;&lt;sql_stm&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"STM_TYPE3=";<br>&nbsp; print_proc_type(stm_type);<br>&nbsp; cout&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"REF.CUR.NAME3="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;endl;<br><br>&nbsp; otl_stream::<a
 href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>&nbsp;<br>&nbsp;&nbsp; (db, // connect object<br>&nbsp;&nbsp;&nbsp; s, // an external stream variable is needed here<br>&nbsp;&nbsp;&nbsp; sql_stm, // output buffer for generating a stored procedure call<br>&nbsp;&nbsp;&nbsp; stm_type, // output paremeter, indicating what type of stored procedure<br>&nbsp;&nbsp;&nbsp; refcur_placeholder, // output parameter, which gets populated<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in the case of a stored procedure that returns<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a reference cursor.<br>&nbsp;&nbsp;&nbsp; "my_proc3", // stored procedure name<br>&nbsp;&nbsp;&nbsp; "my_pkg" // PL/SQL package name<br>&nbsp;&nbsp; );<br>&nbsp; cout&lt;&lt;"SQL_STM4="&lt;&lt;sql_stm&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"STM_TYPE4=";<br>&nbsp; print_proc_type(stm_type);<br>&nbsp; cout&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"REF.CUR.NAME4="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;endl;<br><br>&nbsp; otl_stream::<a
 href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>&nbsp;<br>&nbsp;&nbsp; (db, // connect object<br>&nbsp;&nbsp;&nbsp; s, // an external stream variable is needed here<br>&nbsp;&nbsp;&nbsp; sql_stm, // output buffer for generating a stored procedure call<br>&nbsp;&nbsp;&nbsp; stm_type, // output paremeter, indicating what type of stored procedure<br>&nbsp;&nbsp;&nbsp; refcur_placeholder, // output parameter, which gets populated<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in the case of a stored procedure that returns<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a reference cursor.<br>&nbsp;&nbsp;&nbsp; "my_func2", // stored function name<br>&nbsp;&nbsp;&nbsp; "my_pkg" // PL/SQL package name<br>&nbsp;&nbsp; );<br>&nbsp; cout&lt;&lt;"SQL_STM5="&lt;&lt;sql_stm&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"STM_TYPE5=";<br>&nbsp; print_proc_type(stm_type);<br>&nbsp; cout&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;"REF.CUR.NAME5="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>&nbsp; cout&lt;&lt;endl;<br><br>}<br><br>int main()<br>{<br>&nbsp;<a
 href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br>&nbsp;try{<br><br>&nbsp; db.rlogon("scott/tiger"); // connect to Oracle<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "drop table test_tab",<br>&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions<br>&nbsp;&nbsp; ); // drop table<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "create table test_tab(f1 number, f2 varchar2(30))"<br>&nbsp;&nbsp;&nbsp; );&nbsp; // create table<br><br>&nbsp; // create a PL/SQL package<br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (db,<br>&nbsp;&nbsp;&nbsp; "CREATE OR REPLACE PACKAGE my_pkg IS "<br>&nbsp;&nbsp;&nbsp; " "<br>&nbsp;&nbsp;&nbsp; "&nbsp; TYPE my_cursor IS REF CURSOR; "<br>&nbsp;&nbsp;&nbsp; " "<br>&nbsp;&nbsp;&nbsp; "&nbsp; PROCEDURE my_proc1; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; PROCEDURE my_proc2 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN OUT VARCHAR2, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f3 OUT DATE); "<br>&nbsp;&nbsp;&nbsp; " "<br>&nbsp;&nbsp;&nbsp; "&nbsp; FUNCTION my_func1 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN VARCHAR2) "<br>&nbsp;&nbsp;&nbsp; "&nbsp; RETURN DATE; "<br>&nbsp;&nbsp;&nbsp; " "<br>&nbsp;&nbsp;&nbsp; "&nbsp; PROCEDURE my_proc3 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN VARCHAR2, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f3 OUT my_cursor); "<br>&nbsp;&nbsp;&nbsp; " "<br>&nbsp;&nbsp;&nbsp; "&nbsp; FUNCTION my_func2 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN VARCHAR2) "<br>&nbsp;&nbsp;&nbsp; "&nbsp; RETURN my_cursor; "<br>&nbsp;&nbsp;&nbsp; " "<br>&nbsp;&nbsp;&nbsp; "END; "<br>&nbsp;&nbsp; );<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (db,<br>&nbsp;&nbsp;&nbsp; "CREATE OR REPLACE PACKAGE BODY my_pkg IS "<br>&nbsp;&nbsp;&nbsp; " "<br>&nbsp;&nbsp;&nbsp; "&nbsp; PROCEDURE my_proc1 "<br>&nbsp;&nbsp;&nbsp; "&nbsp; IS "<br>&nbsp;&nbsp;&nbsp; "&nbsp; BEGIN "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; NULL; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; END; "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; PROCEDURE my_proc2 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN OUT VARCHAR2, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f3 OUT DATE) "<br>&nbsp;&nbsp;&nbsp; "&nbsp; IS "<br>&nbsp;&nbsp;&nbsp; "&nbsp; BEGIN "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; NULL; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; END; "<br>&nbsp;&nbsp;&nbsp; " "&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp; "&nbsp; FUNCTION my_func1 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN VARCHAR2) "<br>&nbsp;&nbsp;&nbsp; "&nbsp; RETURN DATE "<br>&nbsp;&nbsp;&nbsp; "&nbsp; IS "<br>&nbsp;&nbsp;&nbsp; "&nbsp; BEGIN "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; RETURN SYSDATE; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; END; "<br>&nbsp;&nbsp;&nbsp; " "&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp; "&nbsp; PROCEDURE my_proc3 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN VARCHAR2, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f3 OUT my_cursor) "<br>&nbsp;&nbsp;&nbsp; "&nbsp; IS "<br>&nbsp;&nbsp;&nbsp; "&nbsp; BEGIN "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; NULL; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; END; "<br>&nbsp;&nbsp;&nbsp; " "&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp; "&nbsp; FUNCTION my_func2 "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; (f1 IN NUMBER, "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; f2 IN VARCHAR2) "<br>&nbsp;&nbsp;&nbsp; "&nbsp; RETURN my_cursor "<br>&nbsp;&nbsp;&nbsp; "&nbsp; IS "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp; lv_cur my_cursor; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; BEGIN "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; OPEN lv_cur FOR "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; SELECT * FROM test_tab; "<br>&nbsp;&nbsp;&nbsp; "&nbsp;&nbsp;&nbsp; RETURN lv_cur; "<br>&nbsp;&nbsp;&nbsp; "&nbsp; END; "<br>&nbsp;&nbsp;&nbsp; " "&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp; "END; "<br>&nbsp;&nbsp; );<br><br>&nbsp; stored_proc(); // generate a stored procedure call<br><br>&nbsp;}<br><br>&nbsp;catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from Oracle<br><br>&nbsp;return 0;<br><br>}</pre>
<h2>
Output</h2>
<pre>SQL_STM1=BEGIN my_pkg.my_proc1; END;<br>STM_TYPE1=OTL constant statement without any parameters<br>REF.CUR.NAME1=<br><br>SQL_STM2=BEGIN my_pkg.my_proc2(:f1&lt;double,in&gt; ,:f2&lt;char[2001],inout&gt; ,:f3&lt;timestamp,out&gt; );&nbsp; END;<br>STM_TYPE2=OTL IN/OUT stream<br>REF.CUR.NAME2=<br><br>SQL_STM3=BEGIN :rc__&lt;timestamp,out&gt; := my_pkg.my_func1(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; );&nbsp; END;<br>STM_TYPE3=OTL IN/OUT stream<br>REF.CUR.NAME3=<br><br>SQL_STM4=BEGIN my_pkg.my_proc3(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; ,:f3&nbsp; );&nbsp; END;<br>STM_TYPE4=OTL reference cursor stream<br>REF.CUR.NAME4=:f3<br><br>SQL_STM5=BEGIN :rc__&nbsp; := my_pkg.my_func2(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; );&nbsp; END;<br>STM_TYPE5=OTL reference cursor stream<br>REF.CUR.NAME5=:rc__<br><br><br><hr
 width="100%"></pre>
<center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a
 href="home.htm">Go
Home</a></center>
<p>Copyright &copy; 1996, 2007, Sergei Kuchin, email: <a
 href="mailto:skuchin@ispwest.com">skuchin@ispwest.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com
<script language="JavaScript">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.
</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies.</i>
</p>
</body>
</html>
