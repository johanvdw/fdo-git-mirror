
Create databases
================

- On SQL Server ONLY:
	- create database "testmultidb" manually via SQL Server Enterprise Manager tool
	- create database "testsingledb" using Post-Installer tool:
		- make sure environment variable SDEHOME is pointing to the right place (so $SDEHOME\etc contains giomgr.defs, dbinit.sde, etc)
		- select "Complete" (instead of "Custom")
		- set database name to "testsingledb"
		- set service name to "esri_sde1b" and service port number to "5153/tcp"
		- click OK to start the new ArcSDE service


Create users METADCOV/AUSTRALIA/WHEATON/OZZIE/FDOTEST1
======================================================

- On Oracle:

create user METADCOV identified by test;
create user AUSTRALIA identified by test;
create user WHEATON identified by test;
create user OZZIE identified by test;
create user FDOTEST1 identified by test;
grant connect, resource, select any table, insert any table, update any table, delete any table to METADCOV;
grant connect, resource, select any table, insert any table, update any table, delete any table to AUSTRALIA;
grant connect, resource, select any table, insert any table, update any table, delete any table to WHEATON;
grant connect, resource, select any table, insert any table, update any table, delete any table to OZZIE;
grant connect, resource, select any table, insert any table, update any table, delete any table to FDOTEST1;

- On SQL Server:
	- create new "login names" with above usernames and always using SQL Server Authentication and the password "test"
	- add all these login users as database users to all databases that will contain ArcSDE data.
		If you do not do this, you can get strange problems caused by low-level errors when ArcSDE Server tries to
		access other ArcSDE databases intermittently for no apparent reason, even if you are not trying to access
		those databases explicitly.
	- give above users "db_owner" rights on databases "sde", "testsingledb" and "testmultidb";
		this allows user to see eachother's tables as well as perform select/insert/update/delete on eachother's tables.
	- grant permissions to all users (including "sde" user) on all databases (including "sde" database)
		according to Config and Tuning Guide for SQL Server (see sections "Logins And Users: Rules For The
		Single/Multiple Spatial Database Model")
		(in SQL Server Enterprise Manager, right-click on the database and select Properties > Permissions tab)


Setup environment variable for database/instance settings
=========================================================

- On both Oracle and SQL Server (set to wherever the SHP files from the repository are located):

set SHP_ROOT=D:\RELIANT\Providers\ArcSDE\Samples\TestDatabase

- On Oracle (set DB_INST and SDEHOME accordingly to your server installation):

set DB_INST=-i esri_sde
set DB_INST_SINGLEDB=%DB_INST%
set DB_INST_MULTIDB=%DB_INST%
set SDEHOME=c:\arcgis1\arcsde\ora9iexe

- On SQL Server (set DB_INST and SDEHOME accordingly to your server installation):

set DB_INST=-D sde -i esri_sde1
set DB_INST_SINGLEDB=-D testsingledb -i esri_sde1b
set DB_INST_MULTIDB=-D testmultidb -i esri_sde1
set SDEHOME=c:\arcgis\arcsde\sqlexe


Create dummy tables
===================

- On both Oracle and SQL Server (NOTE: this allows each user to show up as an FDO Schema; a user without registered tables will not show up as an ArcSDE schema):

sdetable -o create -t dummy -d "mystring string(10)" -u METADCOV -p test %DB_INST%
sdetable -o create -t dummy -d "mystring string(10)" -u AUSTRALIA -p test %DB_INST%
sdetable -o create -t dummy -d "mystring string(10)" -u OZZIE -p test %DB_INST%
sdetable -o create -t dummy -d "mystring string(10)" -u FDOTEST1 -p test %DB_INST%
sdetable -o create -t dummy -d "mystring string(10)" -u WHEATON -p test %DB_INST%


Create one dummy layer
======================

- On both Oracle and SQL Server (NOTE: this allows SE_registration_get_info_list() to work properly; there is an ArcSDE defect where this function will return 0 entries even if you have tables registered):

sdelayer -o add -l dummy,shape -e npsla+3 -u FDOTEST1 -p test %DB_INST%


Create TESTCLASSCOMPLEX and TESTCLASSSIMPLE
===========================================

- On both Oracle and SQL Server:

sdetable -o create -t TESTCLASSCOMPLEX -d "MYSHORTINT smallint(4), MYINT integer(10), MYFLOAT float(6,2), MYFLOAT2 float(6,2), MYDOUBLE double(38,8), MYSTRING string(512), MYBLOB blob, MYDATE date" -u METADCOV -p test -k WKB_GEOMETRY %DB_INST_SINGLEDB%
echo y | sdetable -o alter_reg -t TESTCLASSCOMPLEX -c OBJECTID -C SDE -u METADCOV -p test -k WKB_GEOMETRY %DB_INST_SINGLEDB%
sdelayer -o add -l TESTCLASSCOMPLEX,SHAPE -e nplsa+ -x -10000,-10000,100000 -g 100 -u METADCOV -p test -k WKB_GEOMETRY %DB_INST_SINGLEDB%

sdetable -o create -t TESTCLASSSIMPLE -d "MYSTRING string(50)" -u METADCOV -p test %DB_INST%
echo y | sdetable -o alter_reg -t TESTCLASSSIMPLE -c OBJECTID -C SDE -u METADCOV -p test %DB_INST%
sdelayer -o add -l TESTCLASSSIMPLE,SHAPE -e nplsa+ -x -10000,-10000,100000 -g 100 -u METADCOV -p test %DB_INST%

- On SQL Server only: create a table with same name/owner but different database:

sdetable -o create -t TESTCLASSSIMPLE -d "MYSTRING string(50)" -u METADCOV -p test %DB_INST_MULTIDB%
echo y | sdetable -o alter_reg -t TESTCLASSSIMPLE -c OBJECTID -C SDE -u METADCOV -p test %DB_INST_MULTIDB%
sdelayer -o add -l TESTCLASSSIMPLE,SHAPE -e nplsa+ -x -10000,-10000,100000 -g 100 -u METADCOV -p test %DB_INST_MULTIDB%

- on SQL Server only: enable versionning on these 3 tables to avoid problems with SE_stream_delete_from_table() that happen only on SQL Server:

echo y | sdetable -o alter_reg -V MULTI -t TESTCLASSCOMPLEX -u METADCOV -p test %DB_INST_SINGLEDB%
echo y | sdetable -o alter_reg -V MULTI -t TESTCLASSSIMPLE  -u METADCOV -p test %DB_INST%
echo y | sdetable -o alter_reg -V MULTI -t TESTCLASSSIMPLE  -u METADCOV -p test %DB_INST_MULTIDB%


Create other tables from SHP files
==================================

- On both Oracle and SQL Server:

shp2sde -o create -l MEXICO_TIC,SHAPE -f %SHP_ROOT%\Metadcov\MEXICO_TIC.shp -e p -a all -C OBJECTID,USER,0 -u metadcov -p test %DB_INST%
echo y | sdetable -o alter_reg -t mexico_tic -c OBJECTID -C SDE -u metadcov -p test %DB_INST%

shp2sde -o create -l ARTERIALS,SHAPE -f %SHP_ROOT%\Australia\ARTERIALS.shp -x 2100000,500000,4295 -e sl -a all -C FID,USER,0 -u australia -p test %DB_INST%
echo y | sdetable -o alter_reg -t ARTERIALS -c FID -C SDE -u australia -p test %DB_INST%

shp2sde -o create -l PARCELS,SHAPE -f %SHP_ROOT%\Australia\PARCELS.shp -e a -a all -C FID,USER,0 -u australia -p test %DB_INST%
echo y | sdetable -o alter_reg -t PARCELS -c FID -C SDE -u australia -p test %DB_INST%


- On ORACLE:  (shp2sde converts OBJECTID to NUMBER(11) isntead of NUMBER(10), causing the former gets interpreted as a DOUBLE instead of an INT32)

sdetable -o create -t BORDER  -d "OBJECTID integer(10), STE_CODE double(28,9), STE_ABBR string(40), STE_NAME string(40), D_AREA double(28,9), SHAPE_LENG double(28,9), SHAPE_AREA double(28,9), FID integer(38)" -u australia -p test %DB_INST%
sdelayer -o add -l BORDER,GEOMETRY -e npsla+ -g 50 -x 96,-44,30000000 -u australia -p test %DB_INST%
shp2sde -o init -l BORDER,GEOMETRY -f %SHP_ROOT%\Australia\BORDER.shp -a all -C OBJECTID,USER,0 -u australia -p test %DB_INST%
echo y | sdetable -o alter_reg -t BORDER -c OBJECTID -C SDE -u australia -p test %DB_INST%

- On SQL SERVER:

shp2sde -o create -l BORDER,GEOMETRY -f %SHP_ROOT%\Australia\BORDER.shp -e npsla+ -g 10 -a all -C OBJECTID,USER,0 -u australia -p test %DB_INST%
echo y | sdetable -o alter_reg -t BORDER -c OBJECTID -C SDE -u australia -p test %DB_INST%


- On both Oracle and SQL Server:

shp2sde -o create -l COUNTY,SHAPE -f %SHP_ROOT%\Australia\COUNTY.shp -e npsla+3M -g 10000 -u australia -p test %DB_INST%
shp2sde -o create -l DEFECT64335202,SHAPE -f %SHP_ROOT%\Australia\DEFECT64335202.shp -e npsla+ -g 10 -a all -C OBJECTID,USER,0 -u australia -p test %DB_INST%
echo y | sdetable -o alter_reg -t DEFECT64335202 -c OBJECTID -C SDE -u australia -p test %DB_INST%


Other stuff
===========

- run all ArcSDE Provider unit test suites with "initschema=true" as the only command-line argument; this will create the rest of the tables.

- then, update layer TESTCLASSGEOMZM3,MYGEOMETRY to a larger grid size; the default of 2.5 causes problems when inserting some larger polygons:

sdelayer -o alter -l testclassgeomzm3,mygeometry -g 100 -u metadcov -p test %DB_INST%
