/*
 * (C) Copyright 2003 by Autodesk, Inc. All Rights Reserved.
 *
 * By using this code, you are agreeing to the terms and conditions of
 * the License Agreement included in the documentation for this code.
 *
 * AUTODESK MAKES NO WARRANTIES, EXPRESS OR IMPLIED, AS TO THE
 * CORRECTNESS OF THIS CODE OR ANY DERIVATIVE WORKS WHICH INCORPORATE
 * IT. AUTODESK PROVIDES THE CODE ON AN "AS-IS" BASIS AND EXPLICITLY
 * DISCLAIMS ANY LIABILITY, INCLUDING CONSEQUENTIAL AND INCIDENTAL
 * DAMAGES FOR ERRORS, OMISSIONS, AND OTHER PROBLEMS IN THE CODE.
 *
 * Use, duplication, or disclosure by the U.S. Government is subject
 * to restrictions set forth in FAR 52.227-19 (Commercial Computer
 * Software Restricted Rights) and DFAR 252.227-7013(c)(1)(ii)
 * (Rights in Technical Data and Computer Software), as applicable.
 *
 * Revision Control Modification History
 *
 *  $HeadURL: http://svn.hobu.net/frank/GdalFile/src/Provider/FdoRfpSchemaCapabilities.h $
 *   $Author: fwarmerdam $
 *     $Date: 2006-01-25 14:22:51 -0500 (Wed, 25 Jan 2006) $
 * $Revision: 23 $
 *
 */

#ifndef FDORFPSCHEMACAPABILITIES_H
#define FDORFPSCHEMACAPABILITIES_H

#ifdef _WIN32
	#pragma once
#endif //_WIN32

class FdoRfpSchemaCapabilities : public FdoISchemaCapabilities
{
public:
	FdoRfpSchemaCapabilities(void);
	
	/// <summary>Returns an array of the FdoClassType objects the feature provider supports.</summary>
    /// <param name="length">Output the number of class types.</param> 
    /// <returns>Returns the list of class types.</returns> 
    virtual FdoClassType* GetClassTypes(FdoInt32& length);

    /// <summary>Returns an array of the FdoDataType objects the feature provider supports.</summary>
    /// <param name="length">Output the number of data types.</param> 
    /// <returns>Returns the list of data types</returns> 
    virtual FdoDataType* GetDataTypes(FdoInt32& length);

    /// <summary>Determines if the feature provider supports inheritance.</summary>
    /// <returns>Returns true if the feature provider supports inheritance</returns> 
    virtual bool SupportsInheritance();

    /// <summary>Determines if the provider supports multiple schemas. Returns false if the provider supports only a single schema.</summary>
    /// <returns>Returns true if the provider supports multiple schemas.</returns> 
    virtual bool SupportsMultipleSchemas();

    /// <summary>Determines if the provider supports object properties. Returns false if the provider supports only data and geometric properties.</summary>
    /// <returns>Returns true if the provider supports object properties.</returns> 
    virtual bool SupportsObjectProperties();

    /// <summary>Determines if the provider supports association property.</summary>
    /// <returns>Returns true if the provider support the association property.</returns> 
    virtual bool SupportsAssociationProperties();

    /// <summary>Determines if the provider supports Schema Mapping Overrides 
    /// (overrides to the default rules for mapping Feature Schemas to provider-specific
    /// physical schemas)</summary>
    /// <returns>Returns true if the provider supports Schema Overrides</returns> 
   	virtual bool SupportsSchemaOverrides();

    /// <summary>Determines if the provider supports the network model.</summary>
    /// <returns>Returns true if the provider supports the network model.</returns>
    virtual bool SupportsNetworkModel();

    /// <summary>Determines if the provider can auto-generate unique ID values for a class.</summary>
    /// <returns>Returns true if the provider supports id autogeneration.</returns> 
    virtual bool SupportsAutoIdGeneration();
    
    /// <summary>Determines if the provider can auto-generate unique ID values that are unique for the entire datastore, rather than just for a particular class.</summary>
    /// <returns>Returns true if the provider supports id autogeneration unique across an datastore.</returns> 
    virtual bool SupportsDataStoreScopeUniqueIdGeneration();

    /// <summary>Returns an array of the FdoDataType objects the feature provider supports for auto-generation.</summary>
    /// <param name="length">Output the number of data types.</param> 
    /// <returns>Returns the list of data types</returns> 
    virtual FdoDataType* GetSupportedAutoGeneratedTypes(FdoInt32& length);

    /// <summary>Determines if the provider support update a schema through the ApplySchema command.
    /// If False, then an application can only create a schema once for the provider. They can use the ApplySchema 
    /// command once for a given datastore. Once the schema is defined, it cannot be changed. If True, then the provider 
    /// supports the ability to modify or add to the schema after it is defined initially.</summary>
    /// <returns>Returns true if the provider supports the update of the schema.</returns> 
    virtual bool  SupportsSchemaModification();

	/// <summary>Determines if the provider supports inclusive value range constraints.</summary>
	/// <returns>Returns true if the provider supports inclusive value range constraints.</returns> 
	virtual bool SupportsInclusiveValueRangeConstraints();

	/// <summary>Determines if the provider supports exclusive value range constraints.</summary>
	/// <returns>Returns true if the provider supports exclusive value range constraints.</returns>
	virtual bool SupportsExclusiveValueRangeConstraints();

	/// <summary>Determines if the provider supports value constraints list.</summary>
	/// <returns>Returns true if the provider supports value constraints list.</returns>
	virtual bool SupportsValueConstraintsList();

	/// <summary>Determines if the provider supports nullable value constraint.</summary>
	/// <returns>Returns true if the provider supports nullable value constraint.</returns>
	virtual bool SupportsNullValueConstraints();

	/// <summary>Determines if the provider supports unique value constraint.</summary>
	/// <returns>Returns true if the provider supports unique value constraint.</returns>
	virtual bool SupportsUniqueValueConstraints();

	/// <summary>Determines if the provider supports composite unique value constraint.</summary>
	/// <returns>Returns true if the provider supports composite unique value constraint.</returns>
	virtual bool SupportsCompositeUniqueValueConstraints();

    /// <summary>Determines if the provider supports multiple identity properties per class.
    /// <returns>Returns true if the provider supports multiple identity properties per class.
    virtual bool SupportsCompositeId();

protected:
	~FdoRfpSchemaCapabilities(void);
	virtual void Dispose();
};

#endif //FDORFPSCHEMACAPABILITIES_H
