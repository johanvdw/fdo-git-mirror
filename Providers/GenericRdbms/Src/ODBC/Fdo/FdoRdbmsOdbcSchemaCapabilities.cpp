/*
 * Copyright (C) 2004-2006  Autodesk, Inc.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of version 2.1 of the GNU Lesser
 * General Public License as published by the Free Software Foundation.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

#include "stdafx.h"
#include "FdoRdbmsOdbcSchemaCapabilities.h"

FdoRdbmsOdbcSchemaCapabilities::FdoRdbmsOdbcSchemaCapabilities(void)
{
}

FdoRdbmsOdbcSchemaCapabilities::~FdoRdbmsOdbcSchemaCapabilities(void)
{
}

FdoClassType* FdoRdbmsOdbcSchemaCapabilities::GetClassTypes(int& length)
{
    static FdoClassType classType[] = {FdoClassType_Class, FdoClassType_FeatureClass};
    length = sizeof(classType)/sizeof(FdoClassType);
    return classType;
}

FdoDataType* FdoRdbmsOdbcSchemaCapabilities::GetDataTypes(int& length)
{
    static FdoDataType dataTypes[] = {    FdoDataType_Boolean,
                                        FdoDataType_Byte,
                                        FdoDataType_DateTime,
                                        FdoDataType_Decimal,
                                        FdoDataType_Double,
                                        FdoDataType_Int16,
                                        FdoDataType_Int32,
                                        FdoDataType_Int64,
                                        FdoDataType_Single,
                                        FdoDataType_String  };
    length = sizeof(dataTypes)/sizeof(FdoDataType);
    return dataTypes;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsInheritance()
{
    return true;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsMultipleSchemas()
{
    return true;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsObjectProperties()
{
    return false;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsSchemaOverrides()
{
    return true;
}

void FdoRdbmsOdbcSchemaCapabilities::Dispose()
{
    delete this;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsAssociationProperties()
{
    return false;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsNetworkModel()
{
    return false;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsAutoIdGeneration()
{
    return true;
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsDataStoreScopeUniqueIdGeneration()
{
    return false;
}

FdoDataType* FdoRdbmsOdbcSchemaCapabilities::GetSupportedAutoGeneratedTypes(FdoInt32& length)
{
    static FdoDataType autogen_types[] =
    {
        FdoDataType_Int16,
        FdoDataType_Int32,
        FdoDataType_Int64,
    };

    length = sizeof (autogen_types) / sizeof (FdoDataType);

    return (autogen_types);
}

bool FdoRdbmsOdbcSchemaCapabilities::SupportsSchemaModification()
{
    return false;
}

/// <summary>Determines if the provider supports inclusive value range constraints.</summary>
/// <returns>Returns true if the provider supports inclusive value range constraints.</returns> 
bool FdoRdbmsOdbcSchemaCapabilities::SupportsInclusiveValueRangeConstraints()
{
    return false;
}

/// <summary>Determines if the provider supports exclusive value range constraints.</summary>
/// <returns>Returns true if the provider supports exclusive value range constraints.</returns>
bool FdoRdbmsOdbcSchemaCapabilities::SupportsExclusiveValueRangeConstraints()
{
    return false;
}
/// <summary>Determines if the provider supports value constraints list.</summary>
/// <returns>Returns true if the provider supports value constraints list.</returns>
bool FdoRdbmsOdbcSchemaCapabilities::SupportsValueConstraintsList()
{
    return false;
}

/// <summary>Determines if the provider supports nullable value constraint.</summary>
/// <returns>Returns true if the provider supports nullable value constraint.</returns>
bool FdoRdbmsOdbcSchemaCapabilities::SupportsNullValueConstraints()
{
    return true;
}

/// <summary>Determines if the provider supports unique value constraint.</summary>
/// <returns>Returns true if the provider supports unique value constraint.</returns>
bool FdoRdbmsOdbcSchemaCapabilities::SupportsUniqueValueConstraints()
{
    return false;
}

/// <summary>Determines if the provider supports composite unique value constraint.</summary>
/// <returns>Returns true if the provider supports composite unique value constraint.</returns>
bool FdoRdbmsOdbcSchemaCapabilities::SupportsCompositeUniqueValueConstraints()
{
    return false;
}

/// <summary>Determines if the provider supports multiple identity properties per class.</summary>
/// <returns>Returns if the provider supports multiple identity properties per class.</returns>
bool FdoRdbmsOdbcSchemaCapabilities::SupportsCompositeId()
{
    return true;
}

