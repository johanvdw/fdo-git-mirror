/*
 * 
* Copyright (C) 2004-2006  Autodesk, Inc.
* 
* This library is free software; you can redistribute it and/or
* modify it under the terms of version 2.1 of the GNU Lesser
* General Public License as published by the Free Software Foundation.
* 
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
* 
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
* 
 */

#include "stdafx.h"
#include "FdoRdbmsSchemaCapabilities.h"
#include "Sm/Lp/DataPropertyDefinition.h"

FdoRdbmsSchemaCapabilities::FdoRdbmsSchemaCapabilities(void)
{
}

FdoRdbmsSchemaCapabilities::~FdoRdbmsSchemaCapabilities(void)
{
}

FdoClassType* FdoRdbmsSchemaCapabilities::GetClassTypes(int& length)
{
    static FdoClassType classType[] = { FdoClassType_Class,
                                        FdoClassType_FeatureClass};
    length = sizeof(classType)/sizeof(FdoClassType);
    return classType;
}

FdoDataType* FdoRdbmsSchemaCapabilities::GetDataTypes(int& length)
{
    static FdoDataType dataTypes[] = {  FdoDataType_Boolean,
                                        FdoDataType_Byte,
                                        FdoDataType_DateTime,
                                        FdoDataType_Decimal,
                                        FdoDataType_Double,
                                        FdoDataType_Int16,
                                        FdoDataType_Int32,
                                        FdoDataType_Int64,
                                        FdoDataType_Single,
                                        FdoDataType_String
                                     };
    length = sizeof(dataTypes)/sizeof(FdoDataType);
    return dataTypes;
}

bool FdoRdbmsSchemaCapabilities::SupportsInheritance()
{
    return true;
}

bool FdoRdbmsSchemaCapabilities::SupportsMultipleSchemas()
{
    return true;
}

bool FdoRdbmsSchemaCapabilities::SupportsObjectProperties()
{
    return true;
}

bool FdoRdbmsSchemaCapabilities::SupportsAssociationProperties()
{
    return true;
}

bool FdoRdbmsSchemaCapabilities::SupportsSchemaOverrides()
{
    return true;
}

void FdoRdbmsSchemaCapabilities::Dispose()
{
    delete this;
}

bool FdoRdbmsSchemaCapabilities::SupportsNetworkModel()
{
    return false;
}

bool FdoRdbmsSchemaCapabilities::SupportsAutoIdGeneration()
{
    return true;
}

bool FdoRdbmsSchemaCapabilities::SupportsDataStoreScopeUniqueIdGeneration()
{
    return true;
}

FdoDataType* FdoRdbmsSchemaCapabilities::GetSupportedAutoGeneratedTypes(FdoInt32& length)
{


    return (FdoSmLpDataPropertyDefinition::GetSupportedAutoGeneratedTypes(length));
}

bool FdoRdbmsSchemaCapabilities::SupportsSchemaModification()
{
    return true;
}

/// <summary>Determines if the provider supports inclusive value range constraints.</summary>
/// <returns>Returns true if the provider supports inclusive value range constraints.</returns> 
bool FdoRdbmsSchemaCapabilities::SupportsInclusiveValueRangeConstraints()
{
    return true;
}

/// <summary>Determines if the provider supports exclusive value range constraints.</summary>
/// <returns>Returns true if the provider supports exclusive value range constraints.</returns>
bool FdoRdbmsSchemaCapabilities::SupportsExclusiveValueRangeConstraints()
{
    return true;
}
/// <summary>Determines if the provider supports value constraints list.</summary>
/// <returns>Returns true if the provider supports value constraints list.</returns>
bool FdoRdbmsSchemaCapabilities::SupportsValueConstraintsList()
{
    return true;
}

/// <summary>Determines if the provider supports nullable value constraint.</summary>
/// <returns>Returns true if the provider supports nullable value constraint.</returns>
bool FdoRdbmsSchemaCapabilities::SupportsNullValueConstraints()
{
    return true;
}

/// <summary>Determines if the provider supports unique value constraint.</summary>
/// <returns>Returns true if the provider supports unique value constraint.</returns>
bool FdoRdbmsSchemaCapabilities::SupportsUniqueValueConstraints()
{
    return true;
}

/// <summary>Determines if the provider supports composite unique value constraint.</summary>
/// <returns>Returns true if the provider supports composite unique value constraint.</returns>
bool FdoRdbmsSchemaCapabilities::SupportsCompositeUniqueValueConstraints()
{
    return true;
}

/// <summary>Determines if the provider supports multiple identity properties per class.</summary>
/// <returns>Returns true if the provider supports multiple identity properties per class.</returns>
bool FdoRdbmsSchemaCapabilities::SupportsCompositeId()
{
    return true;
}
