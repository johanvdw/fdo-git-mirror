/*
 * Copyright (C) 2004-2006  Autodesk, Inc.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of version 2.1 of the GNU Lesser
 * General Public License as published by the Free Software Foundation.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */ 

#include "Pch.h"
#include "FdoAssociationSchemaTest.h"
#include "UnitTestUtil.h"

#define DB_SUFFIX	L"_assoc"

FdoAssociationSchemaTest::FdoAssociationSchemaTest(void)
{
    
}

FdoAssociationSchemaTest::~FdoAssociationSchemaTest(void)
{
    
}

void FdoAssociationSchemaTest::setUp ()
{
    set_provider();
}

void FdoAssociationSchemaTest::tearDown ()
{
}

void FdoAssociationSchemaTest::createFreshDb()
{
	try
    {
		FdoStringP userConnectString = UnitTestUtil::GetConnectionString(Connection_NoDatastore, L"");
        FdoPtr<FdoIConnection> connection = UnitTestUtil::GetProviderConnectionObject();
        connection->SetConnectionString( userConnectString );
        connection->Open();
		FdoPtr<FdoIDestroyDataStore> pDelCmd = (FdoIDestroyDataStore*)connection->CreateCommand( FdoCommandType_DestroyDataStore );
		FdoPtr<FdoIDataStorePropertyDictionary> dictionary = pDelCmd->GetDataStoreProperties();
		dictionary->SetProperty( L"DataStore", UnitTestUtil::GetEnviron("datastore", DB_SUFFIX) );
		pDelCmd->Execute();
		connection->Close();
    }
    catch(...) { }

	UnitTestUtil::CreateDB(false, false, DB_SUFFIX);
}

void FdoAssociationSchemaTest::TestCreate ( bool useIdent, bool useObjProp, bool useNestedObj, bool useTransaction, bool commitTransaction, bool associatedIsFeat, bool ownerIsFeat, bool addToSubclass )
{
	createFreshDb();
    FdoPtr<FdoIConnection> connection = UnitTestUtil::GetConnection(DB_SUFFIX, false);
    FdoPtr<FdoITransaction> featureTransaction;

    try
    {
        if( useTransaction )
            featureTransaction = connection->BeginTransaction();
/*
        try
        {
            FdoPtr<FdoIDestroySchema> pDelCmd = (FdoIDestroySchema*) connection->CreateCommand(FdoCommandType_DestroySchema);
	        pDelCmd->SetSchemaName( L"TestAssociation" );
            CPPUNIT_ASSERT(wcscmp(pDelCmd->GetSchemaName(),L"TestAssociation") == 0);
	        pDelCmd->Execute();
        }
        catch (FdoSchemaException* e )
	    {
		    UnitTestUtil::PrintException(e, UnitTestUtil::GetOutputFileName( L"TestSchema.txt" ) );
		    FDO_SAFE_RELEASE(e);
        }
*/
        //
        // (re)create the schema
       // FdoPtr<FdoFeatureSchemaCollection> pSchemas = FdoFeatureSchemaCollection::Create(NULL);
	    FdoFeatureSchema* pTestSchema = FdoFeatureSchema::Create( L"AssociationSchema", L"Test Association schema" );
       // pSchemas->Add( pTestSchema );


        FdoClassDefinition*    pfeatureclass;
        FdoPtr<FdoDataPropertyDefinition> pProp;
        // Create a feature class
        if( ownerIsFeat )
        {
            pfeatureclass = FdoFeatureClass::Create(L"TestFeatureClass", L"FeatureClass Desc");
            // Add identity property
            pProp = FdoDataPropertyDefinition::Create( L"FeatId", L"FeatId Prop" );
	        pProp->SetDataType( FdoDataType_Int64 );
	        pProp->SetNullable(false);
            pProp->SetIsAutoGenerated(true);
            FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->Add( pProp );
	        FdoPtr<FdoDataPropertyDefinitionCollection>(pfeatureclass->GetIdentityProperties())->Add( pProp );
        }
        else
        {
            pfeatureclass = FdoClass::Create(L"TestFeatureClass", L"FeatureClass Desc");
            pProp = FdoDataPropertyDefinition::Create( L"Id", L"Id Prop" );
	        pProp->SetDataType( FdoDataType_Int64 );
	        pProp->SetNullable(false);
            FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->Add( pProp );
	        FdoPtr<FdoDataPropertyDefinitionCollection>(pfeatureclass->GetIdentityProperties())->Add( pProp );
        }
        // Add first name and last name properties
        pProp = FdoDataPropertyDefinition::Create( L"First Name", L"First Name" );
	    pProp->SetDataType( FdoDataType_String );
        pProp->SetLength(32);
	    pProp->SetNullable(false);
	    FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->Add( pProp );
        pProp = FdoDataPropertyDefinition::Create( L"Last Name", L"Last Name" );
	    pProp->SetDataType( FdoDataType_String );
        pProp->SetLength(32);
	    pProp->SetNullable(false);
	    FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->Add( pProp );


        // Create a class
        FdoClassDefinition*           pclass;
        if( associatedIsFeat )
        {
            pclass = FdoFeatureClass::Create(L"TestClass", L"Class Desc");
            pProp = FdoDataPropertyDefinition::Create( L"FeatId", L"FeatId Prop" );
	        pProp->SetDataType( FdoDataType_Int64 );
	        pProp->SetNullable(false);
            pProp->SetIsAutoGenerated(true);
            FdoPtr<FdoPropertyDefinitionCollection>(pclass->GetProperties())->Add( pProp );
	        FdoPtr<FdoDataPropertyDefinitionCollection>(pclass->GetIdentityProperties())->Add( pProp );
        }
        else
        {
            pclass = FdoClass::Create(L"TestClass", L"Class Desc");
            // Add identity property
            pProp = FdoDataPropertyDefinition::Create( L"Id", L"Id Prop" );
	        pProp->SetDataType( FdoDataType_Int64 );
	        pProp->SetNullable(false);
            FdoPtr<FdoPropertyDefinitionCollection>(pclass->GetProperties())->Add( pProp );
	        FdoPtr<FdoDataPropertyDefinitionCollection>(pclass->GetIdentityProperties())->Add( pProp );
        }
        // Add name one and name two properties
        pProp = FdoDataPropertyDefinition::Create( L"Name One", L"Name One" );
	    pProp->SetDataType( FdoDataType_String );
	    pProp->SetNullable(false);
        pProp->SetLength(32);
	    FdoPtr<FdoPropertyDefinitionCollection>(pclass->GetProperties())->Add( pProp );
        pProp = FdoDataPropertyDefinition::Create( L"Name Two", L"Name Two" );
	    pProp->SetDataType( FdoDataType_String );
	    pProp->SetNullable(false);
        pProp->SetLength(32);
	    FdoPtr<FdoPropertyDefinitionCollection>(pclass->GetProperties())->Add( pProp );

        // Create a class
        FdoClass*           pclassLeafObj = FdoClass::Create(L"TestSuperObjClass", L"Obj Class Desc");
        // Add identity property
        pProp = FdoDataPropertyDefinition::Create( L"Id", L"ObjId Prop" );
	    pProp->SetDataType( FdoDataType_Int64 );
	    pProp->SetNullable(false);
        FdoPtr<FdoPropertyDefinitionCollection>(pclassLeafObj->GetProperties())->Add( pProp );
	    FdoPtr<FdoDataPropertyDefinitionCollection>(pclassLeafObj->GetIdentityProperties())->Add( pProp );
        // Add name one and name two properties
        pProp = FdoDataPropertyDefinition::Create( L"First Name", L"Name One" );
	    pProp->SetDataType( FdoDataType_String );
	    pProp->SetNullable(false);
        pProp->SetLength(32);
	    FdoPtr<FdoPropertyDefinitionCollection>(pclassLeafObj->GetProperties())->Add( pProp );
        pProp = FdoDataPropertyDefinition::Create( L"Last Name", L"Name Two" );
	    pProp->SetDataType( FdoDataType_String );
	    pProp->SetNullable(false);
        pProp->SetLength(32);
	    FdoPtr<FdoPropertyDefinitionCollection>(pclassLeafObj->GetProperties())->Add( pProp );

        // Create a class
        FdoClass*           pclassObj = FdoClass::Create(L"TestOC", L"Obj Class Desc");
        // Add identity property
        pProp = FdoDataPropertyDefinition::Create( L"Id", L"ObjId Prop" );
	    pProp->SetDataType( FdoDataType_Int64 );
	    pProp->SetNullable(false);
        FdoPtr<FdoPropertyDefinitionCollection>(pclassObj->GetProperties())->Add( pProp );
	    FdoPtr<FdoDataPropertyDefinitionCollection>(pclassObj->GetIdentityProperties())->Add( pProp );
        // Add name one and name two properties
        pProp = FdoDataPropertyDefinition::Create( L"First Name", L"Name One" );
	    pProp->SetDataType( FdoDataType_String );
	    pProp->SetNullable(false);
        pProp->SetLength(32);
	    FdoPtr<FdoPropertyDefinitionCollection>(pclassObj->GetProperties())->Add( pProp );
        pProp = FdoDataPropertyDefinition::Create( L"Last Name", L"Name Two" );
	    pProp->SetDataType( FdoDataType_String );
	    pProp->SetNullable(false);
        pProp->SetLength(32);
	    FdoPtr<FdoPropertyDefinitionCollection>(pclassObj->GetProperties())->Add( pProp );
        
        // Create a feature Sub class class
        FdoClassDefinition*    pSubFeatureclass;
        if( ownerIsFeat )
        {
            pSubFeatureclass = FdoFeatureClass::Create(L"TestSubFeatureClass", L"A subclass from a featureClass");

            pSubFeatureclass->SetBaseClass( pfeatureclass );
            // Add a regular property
            pProp = FdoDataPropertyDefinition::Create( L"Id", L"An Id Prop" );
	        pProp->SetDataType( FdoDataType_Int64 );
	        pProp->SetNullable(true);
            FdoPtr<FdoPropertyDefinitionCollection>(pSubFeatureclass->GetProperties())->Add( pProp );
        }
        else
        {
            pSubFeatureclass = FdoClass::Create(L"TestSubFeatureClass", L"A subclass from a featureClass");
            pSubFeatureclass->SetBaseClass( pfeatureclass );
        }
        // Add the classes to the schema class collection
        FdoClassesP(pTestSchema->GetClasses())->Add( pfeatureclass );
        FdoClassesP(pTestSchema->GetClasses())->Add( pclass );
        FdoClassesP(pTestSchema->GetClasses())->Add( pclassLeafObj );
        FdoClassesP(pTestSchema->GetClasses())->Add( pclassObj );
        FdoClassesP(pTestSchema->GetClasses())->Add( pSubFeatureclass );

        
        // Create a valid association property
        FdoPtr<FdoAssociationPropertyDefinition> passprop = FdoAssociationPropertyDefinition::Create(L"Association Prop1", L"Association Prop Desc");
        
        passprop->SetLockCascade( true );
        passprop->SetDeleteRule( FdoDeleteRule_Break );
        passprop->SetReverseName( L"Reverse Name" );
        passprop->SetMultiplicity(L"m");
        passprop->SetReverseMultiplicity(L"1");
        if( useIdent )
        {
            FdoPtr<FdoDataPropertyDefinition> pprop = (FdoDataPropertyDefinition*)FdoPtr<FdoPropertyDefinitionCollection>(pclass->GetProperties())->GetItem( L"Name One" );
            FdoPtr<FdoDataPropertyDefinitionCollection>(passprop->GetIdentityProperties())->Add( pprop );
           
            FdoPtr<FdoDataPropertyDefinitionCollection>(passprop->GetIdentityProperties())->Add( 
                FdoPtr<FdoDataPropertyDefinition>( (FdoDataPropertyDefinition*)
                    FdoPtr<FdoPropertyDefinitionCollection>(pclass->GetProperties())->GetItem( L"Name Two" )
                )
            );
            FdoPtr<FdoDataPropertyDefinitionCollection>(passprop->GetReverseIdentityProperties())->Add( 
                FdoPtr<FdoDataPropertyDefinition>( (FdoDataPropertyDefinition*)
                    FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->GetItem( L"First Name" )
                )
            );
            FdoPtr<FdoDataPropertyDefinitionCollection>(passprop->GetReverseIdentityProperties())->Add( 
                FdoPtr<FdoDataPropertyDefinition>( (FdoDataPropertyDefinition*)
                    FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->GetItem( L"Last Name" )
                )
            );
        }
        passprop->SetAssociatedClass(pclass);

        

        
        if( ! useObjProp )
        {

            // Add a second association property
            FdoPtr<FdoAssociationPropertyDefinition> passprop2 = FdoAssociationPropertyDefinition::Create(L"Association Prop2", L"Second Association Prop Desc");    
            passprop2->SetLockCascade( true );
            passprop2->SetDeleteRule( FdoDeleteRule_Break );
            //passprop2->SetReverseName( L"Reverse Name" );
            passprop2->SetMultiplicity(L"m");
            passprop2->SetReverseMultiplicity(L"0_1");
            passprop2->SetAssociatedClass(pclass);

            // Add the association property to the feature class property collection
            if( addToSubclass )
            {
                FdoPtr<FdoPropertyDefinitionCollection>(pSubFeatureclass->GetProperties())->Add( passprop );
                FdoPtr<FdoPropertyDefinitionCollection>(pSubFeatureclass->GetProperties())->Add( passprop2 );
            }
            else
            {
                FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->Add( passprop );
                FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->Add( passprop2 );
            }
        }
        else
        {
            if( useNestedObj )
            {
                // Add the association property to the leaf class of the obj class
                FdoPtr<FdoPropertyDefinitionCollection>(pclassLeafObj->GetProperties())->Add( passprop );
                FdoPtr<FdoObjectPropertyDefinition>pLeafObjPropData = FdoObjectPropertyDefinition::Create( L"LeafObject", L"object property" );
	            pLeafObjPropData->SetClass( pclassLeafObj );
                pLeafObjPropData->SetObjectType( FdoObjectType_Value );
	            FdoPtr<FdoPropertyDefinitionCollection>(pclassObj->GetProperties())->Add( pLeafObjPropData );
            }
            else
            {
                // Add the association property to the Obj class property collection
                FdoPtr<FdoPropertyDefinitionCollection>(pclassObj->GetProperties())->Add( passprop );
            }
            // Add an object property that contain an association
            FdoPtr<FdoObjectPropertyDefinition>pObjPropData = FdoObjectPropertyDefinition::Create( L"Object", L"object property" );
	        pObjPropData->SetClass( pclassObj );
            pObjPropData->SetObjectType( FdoObjectType_Value );
	        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass->GetProperties())->Add( pObjPropData );
        }

        pclassObj->Release();
        pSubFeatureclass->Release();
        pclassLeafObj->Release();
        pclass->Release();
        pfeatureclass->Release();
        
        FdoPtr<FdoIApplySchema>pCmd = (FdoIApplySchema*) connection->CreateCommand(FdoCommandType_ApplySchema);

        pCmd->SetFeatureSchema( pTestSchema );

	    pCmd->Execute();

        if( useTransaction )
        {
            if( commitTransaction )
                featureTransaction->Commit();
            else
            {
                featureTransaction->Rollback();
            }
        }

        pTestSchema->Release();

    }
    catch ( FdoSchemaException* e )
	{
        printf("TestSchema Error: %ls\n", e->GetExceptionMessage() );
		UnitTestUtil::PrintException(e, UnitTestUtil::GetOutputFileName( L"TestSchema.txt" ) );
        e->Release();
		CPPUNIT_FAIL ( "Association schema TestCreate exception" );
	}
}

void FdoAssociationSchemaTest::TestLoad ( bool withObj )
{
    FdoPtr<FdoIConnection> connection = UnitTestUtil::GetConnection(DB_SUFFIX, true);

    try
    {
        FdoPtr<FdoIDescribeSchema>pDescSchemaCmd = (FdoIDescribeSchema*) connection->CreateCommand(FdoCommandType_DescribeSchema);
        pDescSchemaCmd->SetSchemaName( L"AssociationSchema" );
        FdoPtr<FdoFeatureSchemaCollection>pfsc = pDescSchemaCmd->Execute();
       
        FdoPtr<FdoFeatureSchema> schema = pfsc->GetItem(L"AssociationSchema");
        FdoPtr<FdoClassCollection> classes = schema->GetClasses();
        FdoPtr<FdoClassDefinition> cls;

        cls = classes->GetItem(L"TestFeatureClass");
        if( cls )
        {
            FdoPtr<FdoAssociationPropertyDefinition> prop;
            FdoPtr<FdoPropertyDefinitionCollection> propCol = cls->GetProperties();
            if( withObj )
            {
                FdoPtr<FdoObjectPropertyDefinition> objProp = (FdoObjectPropertyDefinition*)propCol->GetItem(L"Object");
                cls = objProp->GetClass();
                propCol = cls->GetProperties();
            }
            prop = (FdoAssociationPropertyDefinition*)propCol->GetItem(L"Association Prop1");
            printf("Association: name(%ls) associated class(%ls) multiplicity(%ls)\n",
                prop->GetName(),
                (FdoPtr<FdoClassDefinition>(prop->GetAssociatedClass()))->GetName(),
                prop->GetMultiplicity() );
            FdoPtr<FdoDataPropertyDefinitionCollection> identProps = prop->GetIdentityProperties();
            printf("Identity properties: \n");
            for(int i=0; i<identProps->GetCount(); i++ )
            {
                FdoPtr<FdoDataPropertyDefinition> idProp = identProps->GetItem(i);
                printf("\tIdent(%d): name(%ls) \n", i, idProp->GetName());
            }
            identProps = prop->GetReverseIdentityProperties();
            printf("Reverse Identity properties: \n");
            for(int i=0; i<identProps->GetCount(); i++ )
            {
                FdoPtr<FdoDataPropertyDefinition> idProp = identProps->GetItem(i);
                printf("\tRevIdent(%d): name(%ls) \n", i, idProp->GetName());
            }
        } 
        
        cls = classes->GetItem(L"TestSubFeatureClass");
        if( cls )
        {
            FdoPtr<FdoAssociationPropertyDefinition> prop;
            FdoPtr<FdoReadOnlyPropertyDefinitionCollection> propCol = cls->GetBaseProperties();
            if( withObj )
            {
                FdoPtr<FdoObjectPropertyDefinition> objProp = (FdoObjectPropertyDefinition*)propCol->GetItem(L"Object");
                cls = objProp->GetClass();
                prop = (FdoAssociationPropertyDefinition*)cls->GetProperties()->GetItem(L"Association Prop1");
            }
            else
                prop = (FdoAssociationPropertyDefinition*)propCol->GetItem(L"Association Prop1");

            printf("Association: name(%ls) associated class(%ls) multiplicity(%ls)\n",
                prop->GetName(),
                (FdoPtr<FdoClassDefinition>(prop->GetAssociatedClass()))->GetName(),
                prop->GetMultiplicity() );
            FdoPtr<FdoDataPropertyDefinitionCollection> identProps = prop->GetIdentityProperties();
            printf("Identity properties: \n");
            for(int i=0; i<identProps->GetCount(); i++ )
            {
                FdoPtr<FdoDataPropertyDefinition> idProp = identProps->GetItem(i);
                printf("\tIdent(%d): name(%ls) \n", i, idProp->GetName());
            }
            identProps = prop->GetReverseIdentityProperties();
            printf("Reverse Identity properties: \n");
            for(int i=0; i<identProps->GetCount(); i++ )
            {
                FdoPtr<FdoDataPropertyDefinition> idProp = identProps->GetItem(i);
                printf("\tRevIdent(%d): name(%ls) \n", i, idProp->GetName());
            }
        } 
    }
    catch ( FdoSchemaException* e )
	{
        printf("TestLoad Error: %ls\n", e->GetExceptionMessage() );
		UnitTestUtil::PrintException(e, UnitTestUtil::GetOutputFileName( L"TestSchema.txt" ) );
        e->Release();
		CPPUNIT_FAIL ( "Association schema TestLoad exception" );
	}
}
#if 1
void FdoAssociationSchemaTest::TestDelete ( bool rollback )
{
    FdoPtr<FdoIConnection> connection = UnitTestUtil::GetConnection(DB_SUFFIX, true);

    try
    {
        FdoPtr<FdoIDescribeSchema>pDescSchemaCmd = (FdoIDescribeSchema*) connection->CreateCommand(FdoCommandType_DescribeSchema);
        pDescSchemaCmd->SetSchemaName( L"AssociationSchema" );
        FdoPtr<FdoFeatureSchemaCollection>pfsc = pDescSchemaCmd->Execute();
       
        FdoPtr<FdoFeatureSchema> schema = pfsc->GetItem(L"AssociationSchema");
        FdoPtr<FdoClassCollection> classes = schema->GetClasses();
        FdoPtr<FdoClassDefinition> cls;

        cls = classes->FindItem(L"TestSubFeatureClass");
        if( cls )
        {
            /*FdoPtr<FdoAssociationPropertyDefinition> prop;
            FdoPtr<FdoPropertyDefinitionCollection> propCol = cls->GetProperties();
            prop = (FdoAssociationPropertyDefinition*)propCol->GetItem(L"Association Prop1");
            prop->Delete();
           */
            cls->Delete();
            FdoPtr<FdoITransaction> featureTransaction = connection->BeginTransaction();
            // Update
            FdoPtr<FdoIApplySchema>pCmd = (FdoIApplySchema*) connection->CreateCommand(FdoCommandType_ApplySchema);
            pCmd->SetFeatureSchema( schema );
            pCmd->Execute();

            if( rollback )
                featureTransaction->Rollback();
            else
                featureTransaction->Commit();

        } 
    }
    catch ( FdoSchemaException* e )
	{
        printf("TestLoad Error: %ls\n", e->GetExceptionMessage() );
		UnitTestUtil::PrintException(e, UnitTestUtil::GetOutputFileName( L"TestSchema.txt" ) );
		e->Release();
		CPPUNIT_FAIL ( "Association schema TestDelete exception" );
	}
}

void FdoAssociationSchemaTest::TestCreateMultiple()
{
    createFreshDb();
    FdoPtr<FdoIConnection> connection = UnitTestUtil::GetConnection(DB_SUFFIX, false);
    FdoPtr<FdoITransaction> featureTransaction;

    try
    {
	    FdoPtr<FdoFeatureSchema>pTestSchema = FdoFeatureSchema::Create( L"AssociationSchema", L"Test Association schema" );


        // Create a feature class
        FdoPtr<FdoFeatureClass>pfeatureclass1 = FdoFeatureClass::Create(L"TestClassOne", L"FeatureClass Desc");
        FdoPtr<FdoFeatureClass>pfeatureclass2 = FdoFeatureClass::Create(L"TestClassTwo", L"FeatureClass Desc");
        FdoPtr<FdoFeatureClass>pfeatureclass3 = FdoFeatureClass::Create(L"TestClassThree", L"FeatureClass Desc");
        FdoPtr<FdoFeatureClass>pfeatureclass4 = FdoFeatureClass::Create(L"TestClassFour", L"FeatureClass Desc");
        
        // Add identity property
        FdoPtr<FdoDataPropertyDefinition> pProp = FdoDataPropertyDefinition::Create( L"FeatId", L"FeatId Prop" );
	    pProp->SetDataType( FdoDataType_Int64 );
	    pProp->SetNullable(false);
        pProp->SetIsAutoGenerated(true);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass1->GetProperties())->Add( pProp );
	    FdoPtr<FdoDataPropertyDefinitionCollection>(pfeatureclass1->GetIdentityProperties())->Add( pProp );

        pProp = FdoDataPropertyDefinition::Create( L"FeatId", L"FeatId Prop" );
	    pProp->SetDataType( FdoDataType_Int64 );
	    pProp->SetNullable(false);
        pProp->SetIsAutoGenerated(true);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass2->GetProperties())->Add( pProp );
	    FdoPtr<FdoDataPropertyDefinitionCollection>(pfeatureclass2->GetIdentityProperties())->Add( pProp );

        pProp = FdoDataPropertyDefinition::Create( L"FeatId", L"FeatId Prop" );
	    pProp->SetDataType( FdoDataType_Int64 );
	    pProp->SetNullable(false);
        pProp->SetIsAutoGenerated(true);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass3->GetProperties())->Add( pProp );
	    FdoPtr<FdoDataPropertyDefinitionCollection>(pfeatureclass3->GetIdentityProperties())->Add( pProp );

        pProp = FdoDataPropertyDefinition::Create( L"FeatId", L"FeatId Prop" );
	    pProp->SetDataType( FdoDataType_Int64 );
	    pProp->SetNullable(false);
        pProp->SetIsAutoGenerated(true);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass4->GetProperties())->Add( pProp );
	    FdoPtr<FdoDataPropertyDefinitionCollection>(pfeatureclass4->GetIdentityProperties())->Add( pProp );

        pTestSchema->GetClasses()->Add( pfeatureclass1 );
        pTestSchema->GetClasses()->Add( pfeatureclass2 );
        pTestSchema->GetClasses()->Add( pfeatureclass3 );
        pTestSchema->GetClasses()->Add( pfeatureclass4 );

        FdoPtr<FdoFeatureClass>pclass = FdoFeatureClass::Create(L"AssoClass", L"Associated FeatureClass Desc");
        pProp = FdoDataPropertyDefinition::Create( L"FeatId", L"FeatId Prop" );
	    pProp->SetDataType( FdoDataType_Int64 );
	    pProp->SetNullable(false);
        pProp->SetIsAutoGenerated(true);
        FdoPtr<FdoPropertyDefinitionCollection>(pclass->GetProperties())->Add( pProp );
	    FdoPtr<FdoDataPropertyDefinitionCollection>(pclass->GetIdentityProperties())->Add( pProp );
        pTestSchema->GetClasses()->Add( pclass );

        FdoPtr<FdoAssociationPropertyDefinition> passprop = FdoAssociationPropertyDefinition::Create(L"AssocProp1", L"Association Prop Desc");
        passprop->SetAssociatedClass(pclass);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass1->GetProperties())->Add( passprop );

        passprop = FdoAssociationPropertyDefinition::Create(L"AssocProp1", L"Association Prop Desc");
        passprop->SetAssociatedClass(pclass);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass2->GetProperties())->Add( passprop );

        passprop = FdoAssociationPropertyDefinition::Create(L"AssocProp1", L"Association Prop Desc");
        passprop->SetAssociatedClass(pclass);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass3->GetProperties())->Add( passprop );

        passprop = FdoAssociationPropertyDefinition::Create(L"AssocProp1", L"Association Prop Desc");
        passprop->SetAssociatedClass(pclass);
        FdoPtr<FdoPropertyDefinitionCollection>(pfeatureclass4->GetProperties())->Add( passprop );

        FdoPtr<FdoIApplySchema>pCmd = (FdoIApplySchema*) connection->CreateCommand(FdoCommandType_ApplySchema);

        pCmd->SetFeatureSchema( pTestSchema );

	    pCmd->Execute();
    }
    catch ( FdoSchemaException* e )
	{
        printf("TestCreateMultiple Error: %ls\n", e->GetExceptionMessage() );
		UnitTestUtil::PrintException(e, UnitTestUtil::GetOutputFileName( L"TestSchema.txt" ) );
		e->Release();
		CPPUNIT_FAIL ( "Association schema TestCreateMultiple exception" );
	}
}

void FdoAssociationSchemaTest::TestLoadMultiple()
{
    FdoPtr<FdoIConnection> connection = UnitTestUtil::GetConnection(DB_SUFFIX, true);

    try
    {
        FdoPtr<FdoIDescribeSchema>pDescSchemaCmd = (FdoIDescribeSchema*) connection->CreateCommand(FdoCommandType_DescribeSchema);
        pDescSchemaCmd->SetSchemaName( L"AssociationSchema" );
        FdoPtr<FdoFeatureSchemaCollection>pfsc = pDescSchemaCmd->Execute();
       
        FdoPtr<FdoFeatureSchema> schema = pfsc->GetItem(L"AssociationSchema");
        FdoPtr<FdoClassCollection> classes = schema->GetClasses();
        FdoPtr<FdoClassDefinition> cls;
        for(int i=0; i<classes->GetCount(); i++ )
        {
            cls = classes->GetItem(i);
            if( cls )
            {
                printf("Class: %ls\n", (FdoString *) cls->GetQualifiedName() );
                FdoPtr<FdoPropertyDefinition> prop;
                FdoPtr<FdoPropertyDefinitionCollection> propCol = cls->GetProperties();
                if( propCol )
                {
                    for(int j=0; j<propCol->GetCount(); j++ )
                    {
                        prop = propCol->GetItem( j );
                        printf("\tProp: %ls\n", prop->GetName() );
                    }
                }
            }
        }
    }
    catch ( FdoSchemaException* e )
	{
        printf("TestLoadMultiple Error: %ls\n", e->GetExceptionMessage() );
		UnitTestUtil::PrintException(e, UnitTestUtil::GetOutputFileName( L"TestSchema.txt" ) );
		e->Release();
		CPPUNIT_FAIL ( "Association schema TestLoadMultiple exception" );
	}
}
#endif
