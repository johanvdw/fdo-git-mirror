<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>OTL 4.0, Example 33 (MS SQL Server: otl_stream::describe_select() and result sets)</TITLE>
   <META NAME="Author" CONTENT="Sergei Kuchin">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.03Gold (Win95; I) [Netscape]">
   <META NAME="KeyWords" CONTENT="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</HEAD>
<BODY>

<H1 ALIGN=CENTER>OTL 4.0, Example 33<BR>
(MS SQL Server: otl_stream::describe_select() and result sets)</H1>

<H1><A NAME="example1"></A>Example 33 (MS SQL Server: otl_stream::describe_select()
and result sets)</H1>

<P>This example demonstrates the <A HREF="otl3_stream_class.htm#describe_select">otl_stream::describe_select</A>()
with a stored procedure call returning a result set.</P>

<H2>Source Code</H2>

<PRE>#include &lt;iostream&gt;
using namespace std;

#include &lt;stdio.h&gt;</PRE>

<PRE>#define OTL_ODBC // Compile OTL 4.0/ODBC
#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

<A HREF="otl3_connect_class.htm">otl_connect</A> db; // connect object</PRE>

<PRE>void insert()
// insert rows into table
{ 
 <A HREF="otl3_stream_class.htm">otl_stream</A> o(50, // buffer size
              &quot;insert into test_tab values(:f1&lt;float&gt;,:f2&lt;char[31]&gt;)&quot;, 
                 // SQL statement
              db // connect object
             );
 char tmp[32];

 for(int i=1;i&lt;=100;++i){
  sprintf(tmp,&quot;Name%d&quot;,i);
  o&lt;&lt;(float)i&lt;&lt;tmp;
 }
}

void select()
{ 
 <A HREF="otl3_stream_class.htm">otl_stream</A> i(50, // buffer size
              &quot;{call my_proc(:f1&lt;int&gt;)}&quot;, // SELECT statement via stored procedure
              db, // connect object
              <A HREF="otl3_stream_class.htm#implicit_select">otl_implicit_select</A> // implicit SELECT statement
             ); 
   // create select stream
 
 <A HREF="otl3_stream_class.htm#otl_column_desc">otl_column_desc</A>* desc;
 int desc_len;

 i&lt;&lt;4; // Before the child SELECT statement can be described,
       // the stored procedure needs to be executed.
       // Forcing the execution of the stored procedure by entering its input 
       // patameter.

 desc=i.<A HREF="otl3_stream_class.htm#describe_select">describe_select</A>(desc_len);

 for(int n=0;n&lt;desc_len;++n){
  cout&lt;&lt;&quot;========== COLUMN #&quot;&lt;&lt;n+1&lt;&lt;&quot; ===========&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot;name=&quot;&lt;&lt;desc[n].name&lt;&lt;endl;
  cout&lt;&lt;&quot;dbtype=&quot;&lt;&lt;desc[n].dbtype&lt;&lt;endl;
  cout&lt;&lt;&quot;<A HREF="otl3_stream_class.htm#otl_var_dbtype">otl_var_dbtype</A>=&quot;&lt;&lt;desc[n].otl_var_dbtype&lt;&lt;endl;
  cout&lt;&lt;&quot;dbsize=&quot;&lt;&lt;desc[n].dbsize&lt;&lt;endl;
  cout&lt;&lt;&quot;scale=&quot;&lt;&lt;desc[n].scale&lt;&lt;endl;
  cout&lt;&lt;&quot;prec=&quot;&lt;&lt;desc[n].prec&lt;&lt;endl;
  cout&lt;&lt;&quot;nullok=&quot;&lt;&lt;desc[n].nullok&lt;&lt;endl;
 }
 

}

int main()
{
 <A HREF="otl3_connect_class.htm">otl_connect::otl_initialize</A>(); // initialize ODBC environment
 try{

  db.rlogon(&quot;uid=scott;pwd=tiger;dsn=mssql&quot;); // connect to ODBC

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;drop table test_tab&quot;,
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;create table test_tab(f1 int, f2 varchar(30))&quot;
    );  // create table

  otl_cursor::direct_exec
   (
    db,
    &quot;CREATE PROCEDURE my_proc &quot;
    &quot;  @F1 int &quot;
    &quot;AS &quot;
    &quot;SELECT * FROM test_tab &quot;
    &quot;WHERE f1&gt;=@F1 AND f1&lt;=@F1*2 &quot;
    );  // create stored procedure

  insert(); // insert record into table
  select(); // select records from table

 }

 catch(<A HREF="otl3_exception_class.htm">otl_exception</A>&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
 }

 db.logoff(); // disconnect from ODBC

 return 0;

}
</PRE>

<H2>Output</H2>

<PRE>========== COLUMN #1 ===========
name=f1
dbtype=4
otl_var_dbtype=2
dbsize=10
scale=0
prec=10
nullok=1
========== COLUMN #2 ===========
name=f2
dbtype=12
otl_var_dbtype=1
dbsize=30
scale=0
prec=30
nullok=1</PRE>

<PRE>


<HR WIDTH="100%"></PRE>

<CENTER><P><A HREF="otl3_examples.htm">Examples</A> <A HREF="otl3.htm">Contents</A>
<A HREF="home.htm">Go Home</A> </P></CENTER>

<P>Copyright &copy; 1996, 2007, Sergei Kuchin, email: <A HREF="mailto:skuchin@ispwest.com">skuchin@ispwest.com</A>,
<A HREF="mailto:skuchin@gmail.com">skuchin@yahogmail</A>
<SCRIPT Language="JavaScript">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </SCRIPT>
.</P>

<P><I>Permission to use, copy, modify and redistribute this document for
any purpose is hereby granted without fee, provided that the above copyright
notice appear in all copies. </I></P>

</BODY>
</HTML>
