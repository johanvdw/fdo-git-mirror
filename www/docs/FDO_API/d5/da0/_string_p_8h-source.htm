<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"	"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>FDO API Reference</title>
		<link href="../../custom.css" rel="stylesheet" type="text/css">
		<link href="../../tabs.css" rel="stylesheet" type="text/css">
	</head>
	<body bgcolor="#FFFFFF">
		<table width="100%"  border="0">
			<tr>
				<td><b>FDO API Reference<b></td>
				<td align="right"><b>Feature Data Objects<b></td>
			</tr>
			
		</table>
<!-- End of: header.html -->
<!-- Generated by Doxygen 1.5.1-p1 -->
<div class="tabs">
  <ul>
    <li><a href="../../main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="../../modules.htm"><span>Modules</span></a></li>
    <li><a href="../../classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="../../files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="../../files.htm"><span>File&nbsp;List</span></a></li>
    <li><a href="../../globals.htm"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>StringP.h</h1><a href="../../d7/de7/_string_p_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef FDO_STRINGP_H</span>
<a name="l00002"></a><a class="code" href="../../d7/de7/_string_p_8h_9d6488b7c78fec0bdf1151478ec166a7.htm#9d6488b7c78fec0bdf1151478ec166a7">00002</a> <span class="preprocessor"></span><span class="preprocessor">#define FDO_STRINGP_H       1</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00004"></a>00004 <span class="comment">//</span>
<a name="l00005"></a>00005 <span class="comment">// Copyright (C) 2004-2006  Autodesk, Inc.</span>
<a name="l00006"></a>00006 <span class="comment">// </span>
<a name="l00007"></a>00007 <span class="comment">// This library is free software; you can redistribute it and/or</span>
<a name="l00008"></a>00008 <span class="comment">// modify it under the terms of version 2.1 of the GNU Lesser</span>
<a name="l00009"></a>00009 <span class="comment">// General Public License as published by the Free Software Foundation.</span>
<a name="l00010"></a>00010 <span class="comment">// </span>
<a name="l00011"></a>00011 <span class="comment">// This library is distributed in the hope that it will be useful,</span>
<a name="l00012"></a>00012 <span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">// Lesser General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">// </span>
<a name="l00016"></a>00016 <span class="comment">// You should have received a copy of the GNU Lesser General Public</span>
<a name="l00017"></a>00017 <span class="comment">// License along with this library; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00019"></a>00019 <span class="comment">//</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#pragma once</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00025"></a>00025 <span class="comment">/// \brief</span>
<a name="l00026"></a>00026 <span class="comment">/// FdoStringP is smart pointer wrapper around strings. </span>
<a name="l00027"></a>00027 <span class="comment">/// Provides memory management,plus conversion of strings between unicode and utf8</span>
<a name="l00028"></a>00028 <span class="comment">/// and various string manipulation functions</span>
<a name="l00029"></a><a class="code" href="../../d8/d8d/class_fdo_string_p.htm">00029</a> <span class="comment"></span><span class="keyword">class </span><a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a>
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031 <span class="keyword">public</span>:<span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">    /// \brief</span>
<a name="l00033"></a>00033 <span class="comment">    /// Creates an empty string with value L"".</span>
<a name="l00034"></a>00034 <span class="comment">    /// </span>
<a name="l00035"></a>00035 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_ae8b212218834c738f8741fb89fe6c34.htm#ae8b212218834c738f8741fb89fe6c34">FdoStringP</a>(<span class="keywordtype">void</span>);
<a name="l00036"></a>00036 <span class="comment"></span>
<a name="l00037"></a>00037 <span class="comment">    /// \brief</span>
<a name="l00038"></a>00038 <span class="comment">    /// Creates a string from another string pointer.</span>
<a name="l00039"></a>00039 <span class="comment">    /// </span>
<a name="l00040"></a>00040 <span class="comment">    /// \param oValue </span>
<a name="l00041"></a>00041 <span class="comment">    /// Source string to set this string from.</span>
<a name="l00042"></a>00042 <span class="comment">    /// </span>
<a name="l00043"></a>00043 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_ae8b212218834c738f8741fb89fe6c34.htm#ae8b212218834c738f8741fb89fe6c34">FdoStringP</a>(<span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a>&amp; oValue);
<a name="l00044"></a>00044 <span class="comment"></span>
<a name="l00045"></a>00045 <span class="comment">    /// \brief</span>
<a name="l00046"></a>00046 <span class="comment">    /// Creates a string from a unicode (FdoString) string</span>
<a name="l00047"></a>00047 <span class="comment">    /// </span>
<a name="l00048"></a>00048 <span class="comment">    /// \param wValue </span>
<a name="l00049"></a>00049 <span class="comment">    /// the unicode string</span>
<a name="l00050"></a>00050 <span class="comment">    /// \param bAttach </span>
<a name="l00051"></a>00051 <span class="comment">    /// true: just point to the given string without copying it to an </span>
<a name="l00052"></a>00052 <span class="comment">    /// internal buffer. The caller is responsible for ensuring that</span>
<a name="l00053"></a>00053 <span class="comment">    /// the given string is not deleted before this object.</span>
<a name="l00054"></a>00054 <span class="comment">    /// false: copy the given string to an internal buffer</span>
<a name="l00055"></a>00055 <span class="comment">    /// </span>
<a name="l00056"></a>00056 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_ae8b212218834c738f8741fb89fe6c34.htm#ae8b212218834c738f8741fb89fe6c34">FdoStringP</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* wValue, <a class="code" href="../../df/db1/group__typedefs_g467f74207096bcd703476c3c8e6f9d2d.htm#g467f74207096bcd703476c3c8e6f9d2d">FdoBoolean</a> bAttach = <span class="keyword">false</span> );
<a name="l00057"></a>00057 <span class="comment"></span>
<a name="l00058"></a>00058 <span class="comment">    /// \brief</span>
<a name="l00059"></a>00059 <span class="comment">    /// Creates a string from a utf8 string</span>
<a name="l00060"></a>00060 <span class="comment">    /// </span>
<a name="l00061"></a>00061 <span class="comment">    /// \param sValue </span>
<a name="l00062"></a>00062 <span class="comment">    /// the utf8 string</span>
<a name="l00063"></a>00063 <span class="comment">    /// </span>
<a name="l00064"></a>00064 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_ae8b212218834c738f8741fb89fe6c34.htm#ae8b212218834c738f8741fb89fe6c34">FdoStringP</a>( <span class="keyword">const</span> <span class="keywordtype">char</span>* sValue );
<a name="l00065"></a>00065 <span class="comment"></span>
<a name="l00066"></a>00066 <span class="comment">    /// \brief</span>
<a name="l00067"></a>00067 <span class="comment">    /// Destroys this string and releases its contents</span>
<a name="l00068"></a>00068 <span class="comment">    /// </span>
<a name="l00069"></a>00069 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_d05c305dbb063e0cf428ef6ae6c26a39.htm#d05c305dbb063e0cf428ef6ae6c26a39">~FdoStringP</a>(<span class="keywordtype">void</span>);
<a name="l00070"></a>00070 <span class="comment"></span>
<a name="l00071"></a>00071 <span class="comment">    /// Operators to copy from other strings in various forms</span>
<a name="l00072"></a>00072 <span class="comment"></span><span class="comment"></span>
<a name="l00073"></a>00073 <span class="comment">    /// \brief</span>
<a name="l00074"></a>00074 <span class="comment">    /// Copies a string from a string pointer.</span>
<a name="l00075"></a>00075 <span class="comment">    /// </span>
<a name="l00076"></a>00076 <span class="comment">    /// \param oString </span>
<a name="l00077"></a>00077 <span class="comment">    /// Source string to copy from.</span>
<a name="l00078"></a>00078 <span class="comment">    /// </span>
<a name="l00079"></a>00079 <span class="comment">    /// \return</span>
<a name="l00080"></a>00080 <span class="comment">    /// Returns the copied string</span>
<a name="l00081"></a>00081 <span class="comment">    /// </span>
<a name="l00082"></a>00082 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a>&amp; <a class="code" href="../../d8/d8d/class_fdo_string_p_e57d24b13665ab52960cafb37d0200d4.htm#e57d24b13665ab52960cafb37d0200d4">operator=</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a>&amp; oString ); 
<a name="l00083"></a>00083 <span class="comment"></span>
<a name="l00084"></a>00084 <span class="comment">    /// \brief</span>
<a name="l00085"></a>00085 <span class="comment">    /// Copies a string from a utf8 string.</span>
<a name="l00086"></a>00086 <span class="comment">    /// </span>
<a name="l00087"></a>00087 <span class="comment">    /// \param sString </span>
<a name="l00088"></a>00088 <span class="comment">    /// Utf8 string to copy from.</span>
<a name="l00089"></a>00089 <span class="comment">    /// </span>
<a name="l00090"></a>00090 <span class="comment">    /// \return</span>
<a name="l00091"></a>00091 <span class="comment">    /// Returns the copied string</span>
<a name="l00092"></a>00092 <span class="comment">    /// </span>
<a name="l00093"></a>00093 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a>&amp; <a class="code" href="../../d8/d8d/class_fdo_string_p_e57d24b13665ab52960cafb37d0200d4.htm#e57d24b13665ab52960cafb37d0200d4">operator=</a>( <span class="keyword">const</span> <span class="keywordtype">char</span>* sString );
<a name="l00094"></a>00094 <span class="comment"></span>
<a name="l00095"></a>00095 <span class="comment">    /// \brief</span>
<a name="l00096"></a>00096 <span class="comment">    /// Copies a string from a unicode string.</span>
<a name="l00097"></a>00097 <span class="comment">    /// </span>
<a name="l00098"></a>00098 <span class="comment">    /// \param wString </span>
<a name="l00099"></a>00099 <span class="comment">    /// Unicode string to copy from.</span>
<a name="l00100"></a>00100 <span class="comment">    /// </span>
<a name="l00101"></a>00101 <span class="comment">    /// \return</span>
<a name="l00102"></a>00102 <span class="comment">    /// Returns the copied string</span>
<a name="l00103"></a>00103 <span class="comment">    /// </span>
<a name="l00104"></a>00104 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a>&amp; <a class="code" href="../../d8/d8d/class_fdo_string_p_e57d24b13665ab52960cafb37d0200d4.htm#e57d24b13665ab52960cafb37d0200d4">operator=</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* wString );
<a name="l00105"></a>00105 <span class="comment"></span>
<a name="l00106"></a>00106 <span class="comment">    /// Various operators for concatenating str2 to this.</span>
<a name="l00107"></a>00107 <span class="comment"></span><span class="comment"></span>
<a name="l00108"></a>00108 <span class="comment">    /// \brief</span>
<a name="l00109"></a>00109 <span class="comment">    /// Appends a unicode string onto this string.</span>
<a name="l00110"></a>00110 <span class="comment">    /// </span>
<a name="l00111"></a>00111 <span class="comment">    /// \param str2 </span>
<a name="l00112"></a>00112 <span class="comment">    /// Unicode string to concatenate</span>
<a name="l00113"></a>00113 <span class="comment">    /// </span>
<a name="l00114"></a>00114 <span class="comment">    /// \return</span>
<a name="l00115"></a>00115 <span class="comment">    /// Returns the concatenation of this string plus str2</span>
<a name="l00116"></a>00116 <span class="comment">    /// </span>
<a name="l00117"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_7b86a74b0008fbb87d3858a4a093fe0e.htm#7b86a74b0008fbb87d3858a4a093fe0e">00117</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_7b86a74b0008fbb87d3858a4a093fe0e.htm#7b86a74b0008fbb87d3858a4a093fe0e">operator+</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* str2 )<span class="keyword"> const</span>
<a name="l00118"></a>00118 <span class="keyword">    </span>{
<a name="l00119"></a>00119         <span class="keywordflow">return</span>(<a class="code" href="../../d8/d8d/class_fdo_string_p_44eb70fc2cf4fc5117e3c47e8435ec2f.htm#44eb70fc2cf4fc5117e3c47e8435ec2f">FdoStringP::Format</a>( L<span class="stringliteral">"%ls%ls"</span>, mwString, str2 ? str2 : L<span class="stringliteral">""</span>) );
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121 <span class="comment"></span>
<a name="l00122"></a>00122 <span class="comment">    /// \brief</span>
<a name="l00123"></a>00123 <span class="comment">    /// Appends the contents of another string onto this string.</span>
<a name="l00124"></a>00124 <span class="comment">    /// </span>
<a name="l00125"></a>00125 <span class="comment">    /// \param str2 </span>
<a name="l00126"></a>00126 <span class="comment">    /// string to concatenate</span>
<a name="l00127"></a>00127 <span class="comment">    /// </span>
<a name="l00128"></a>00128 <span class="comment">    /// \return</span>
<a name="l00129"></a>00129 <span class="comment">    /// Returns the concatenation of this string plus str2</span>
<a name="l00130"></a>00130 <span class="comment">    /// </span>
<a name="l00131"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_268172a4d22d2cf5e66622937fa79a31.htm#268172a4d22d2cf5e66622937fa79a31">00131</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_7b86a74b0008fbb87d3858a4a093fe0e.htm#7b86a74b0008fbb87d3858a4a093fe0e">operator+</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 )<span class="keyword"> const</span>
<a name="l00132"></a>00132 <span class="keyword">    </span>{
<a name="l00133"></a>00133         <span class="keywordflow">return</span>( (*<span class="keyword">this</span>) + (<a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>*) str2 );
<a name="l00134"></a>00134     }
<a name="l00135"></a>00135 <span class="comment"></span>
<a name="l00136"></a>00136 <span class="comment">    /// \brief</span>
<a name="l00137"></a>00137 <span class="comment">    /// Appends a unicode string onto this string.</span>
<a name="l00138"></a>00138 <span class="comment">    /// </span>
<a name="l00139"></a>00139 <span class="comment">    /// \param str2 </span>
<a name="l00140"></a>00140 <span class="comment">    /// Unicode string to concatenate</span>
<a name="l00141"></a>00141 <span class="comment">    /// </span>
<a name="l00142"></a>00142 <span class="comment">    /// \return</span>
<a name="l00143"></a>00143 <span class="comment">    /// Returns the concatenation of this string plus str2</span>
<a name="l00144"></a>00144 <span class="comment">    /// </span>
<a name="l00145"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_d87fe1d88713acdbd759a0cf218eb589.htm#d87fe1d88713acdbd759a0cf218eb589">00145</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_d87fe1d88713acdbd759a0cf218eb589.htm#d87fe1d88713acdbd759a0cf218eb589">operator+=</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* str2 )
<a name="l00146"></a>00146     {
<a name="l00147"></a>00147         (*this) = (*this) + str2;
<a name="l00148"></a>00148         <span class="keywordflow">return</span>( *<span class="keyword">this</span> );
<a name="l00149"></a>00149     }
<a name="l00150"></a>00150 <span class="comment"></span>
<a name="l00151"></a>00151 <span class="comment">    /// \brief</span>
<a name="l00152"></a>00152 <span class="comment">    /// Appends the contents of another string onto this string.</span>
<a name="l00153"></a>00153 <span class="comment">    /// </span>
<a name="l00154"></a>00154 <span class="comment">    /// \param str2 </span>
<a name="l00155"></a>00155 <span class="comment">    /// string to concatenate</span>
<a name="l00156"></a>00156 <span class="comment">    /// </span>
<a name="l00157"></a>00157 <span class="comment">    /// \return</span>
<a name="l00158"></a>00158 <span class="comment">    /// Returns the concatenation of this string plus str2</span>
<a name="l00159"></a>00159 <span class="comment">    /// </span>
<a name="l00160"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_feb33423cc9353a49d79bb20e4732e66.htm#feb33423cc9353a49d79bb20e4732e66">00160</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_d87fe1d88713acdbd759a0cf218eb589.htm#d87fe1d88713acdbd759a0cf218eb589">operator+=</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 )
<a name="l00161"></a>00161     {
<a name="l00162"></a>00162         (*this) = (*this) + (<a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>*) str2;
<a name="l00163"></a>00163         <span class="keywordflow">return</span>( *<span class="keyword">this</span> );
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165 <span class="comment"></span>
<a name="l00166"></a>00166 <span class="comment">    /// Various comparison operators.</span>
<a name="l00167"></a>00167 <span class="comment"></span><span class="comment"></span>
<a name="l00168"></a>00168 <span class="comment">    /// \brief</span>
<a name="l00169"></a>00169 <span class="comment">    /// Greater than comparison operator</span>
<a name="l00170"></a>00170 <span class="comment">    /// </span>
<a name="l00171"></a>00171 <span class="comment">    /// \param str2 </span>
<a name="l00172"></a>00172 <span class="comment">    /// string to compare</span>
<a name="l00173"></a>00173 <span class="comment">    /// </span>
<a name="l00174"></a>00174 <span class="comment">    /// \return</span>
<a name="l00175"></a>00175 <span class="comment">    /// Returns true if this string is lexically greater than str2</span>
<a name="l00176"></a>00176 <span class="comment">    /// </span>
<a name="l00177"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_930fe756ddcd82a8ea0bd4f2a7d26bfc.htm#930fe756ddcd82a8ea0bd4f2a7d26bfc">00177</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_930fe756ddcd82a8ea0bd4f2a7d26bfc.htm#930fe756ddcd82a8ea0bd4f2a7d26bfc">operator&gt;</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 )<span class="keyword"> const</span>
<a name="l00178"></a>00178 <span class="keyword">    </span>{
<a name="l00179"></a>00179         <span class="keywordflow">return</span>( wcscmp( *<span class="keyword">this</span>, str2 ) &gt; 0 );
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181 <span class="comment"></span>
<a name="l00182"></a>00182 <span class="comment">    /// \brief</span>
<a name="l00183"></a>00183 <span class="comment">    /// Greater than or equal comparison operator</span>
<a name="l00184"></a>00184 <span class="comment">    /// </span>
<a name="l00185"></a>00185 <span class="comment">    /// \param str2 </span>
<a name="l00186"></a>00186 <span class="comment">    /// string to compare</span>
<a name="l00187"></a>00187 <span class="comment">    /// </span>
<a name="l00188"></a>00188 <span class="comment">    /// \return</span>
<a name="l00189"></a>00189 <span class="comment">    /// Returns true if this string is lexically greater or equal to str2</span>
<a name="l00190"></a>00190 <span class="comment">    /// </span>
<a name="l00191"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_3d68ad4d05de521590df6c34888074df.htm#3d68ad4d05de521590df6c34888074df">00191</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_3d68ad4d05de521590df6c34888074df.htm#3d68ad4d05de521590df6c34888074df">operator&gt;=</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 )<span class="keyword"> const</span>
<a name="l00192"></a>00192 <span class="keyword">    </span>{
<a name="l00193"></a>00193         <span class="keywordflow">return</span>( wcscmp( *<span class="keyword">this</span>, str2 ) &gt;= 0 );
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 <span class="comment"></span>
<a name="l00196"></a>00196 <span class="comment">    /// \brief</span>
<a name="l00197"></a>00197 <span class="comment">    /// Equals comparison operator</span>
<a name="l00198"></a>00198 <span class="comment">    /// </span>
<a name="l00199"></a>00199 <span class="comment">    /// \param str2 </span>
<a name="l00200"></a>00200 <span class="comment">    /// string to compare</span>
<a name="l00201"></a>00201 <span class="comment">    /// </span>
<a name="l00202"></a>00202 <span class="comment">    /// \return</span>
<a name="l00203"></a>00203 <span class="comment">    /// Returns true if this string is lexically equal to str2</span>
<a name="l00204"></a>00204 <span class="comment">    /// </span>
<a name="l00205"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_7d1f15bc665a30b0dceba67bf90ada1b.htm#7d1f15bc665a30b0dceba67bf90ada1b">00205</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_7d1f15bc665a30b0dceba67bf90ada1b.htm#7d1f15bc665a30b0dceba67bf90ada1b">operator==</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 )<span class="keyword"> const</span>
<a name="l00206"></a>00206 <span class="keyword">    </span>{
<a name="l00207"></a>00207         <span class="keywordflow">return</span>( wcscmp( *<span class="keyword">this</span>, str2 ) == 0 );
<a name="l00208"></a>00208     }
<a name="l00209"></a>00209 <span class="comment"></span>
<a name="l00210"></a>00210 <span class="comment">    /// \brief</span>
<a name="l00211"></a>00211 <span class="comment">    /// Equals comparison operator</span>
<a name="l00212"></a>00212 <span class="comment">    /// </span>
<a name="l00213"></a>00213 <span class="comment">    /// \param str2 </span>
<a name="l00214"></a>00214 <span class="comment">    /// Unicode string to compare</span>
<a name="l00215"></a>00215 <span class="comment">    /// </span>
<a name="l00216"></a>00216 <span class="comment">    /// \return</span>
<a name="l00217"></a>00217 <span class="comment">    /// Returns true if this string is lexically equal to str2</span>
<a name="l00218"></a>00218 <span class="comment">    /// </span>
<a name="l00219"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_307354ef48a79a03e7927e48f01b81b2.htm#307354ef48a79a03e7927e48f01b81b2">00219</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_7d1f15bc665a30b0dceba67bf90ada1b.htm#7d1f15bc665a30b0dceba67bf90ada1b">operator==</a>( <span class="keyword">const</span> <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* str2 )<span class="keyword"> const</span>
<a name="l00220"></a>00220 <span class="keyword">    </span>{
<a name="l00221"></a>00221         <span class="keywordflow">return</span>( wcscmp( *<span class="keyword">this</span>, str2 ? str2 : L<span class="stringliteral">""</span> ) == 0 );
<a name="l00222"></a>00222     }
<a name="l00223"></a>00223 <span class="comment"></span>
<a name="l00224"></a>00224 <span class="comment">    /// \brief</span>
<a name="l00225"></a>00225 <span class="comment">    /// Not Equals comparison operator</span>
<a name="l00226"></a>00226 <span class="comment">    /// </span>
<a name="l00227"></a>00227 <span class="comment">    /// \param str2 </span>
<a name="l00228"></a>00228 <span class="comment">    /// Unicode string to compare</span>
<a name="l00229"></a>00229 <span class="comment">    /// </span>
<a name="l00230"></a>00230 <span class="comment">    /// \return</span>
<a name="l00231"></a>00231 <span class="comment">    /// Returns true if this string is not lexically equal to str2</span>
<a name="l00232"></a>00232 <span class="comment">    /// </span>
<a name="l00233"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_f6b2ec3e513b6ac3b8bf2c8a1b9a6b2f.htm#f6b2ec3e513b6ac3b8bf2c8a1b9a6b2f">00233</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_f6b2ec3e513b6ac3b8bf2c8a1b9a6b2f.htm#f6b2ec3e513b6ac3b8bf2c8a1b9a6b2f">operator!=</a>( <span class="keyword">const</span> <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* str2 )<span class="keyword"> const</span>
<a name="l00234"></a>00234 <span class="keyword">    </span>{
<a name="l00235"></a>00235         <span class="keywordflow">return</span>( !((*<span class="keyword">this</span>) == str2) );
<a name="l00236"></a>00236     }
<a name="l00237"></a>00237 <span class="comment"></span>
<a name="l00238"></a>00238 <span class="comment">    /// \brief</span>
<a name="l00239"></a>00239 <span class="comment">    /// Less than or Equals comparison operator</span>
<a name="l00240"></a>00240 <span class="comment">    /// </span>
<a name="l00241"></a>00241 <span class="comment">    /// \param str2 </span>
<a name="l00242"></a>00242 <span class="comment">    /// String to compare</span>
<a name="l00243"></a>00243 <span class="comment">    /// </span>
<a name="l00244"></a>00244 <span class="comment">    /// \return</span>
<a name="l00245"></a>00245 <span class="comment">    /// Returns true if this string is lexically less than or equal to str2</span>
<a name="l00246"></a>00246 <span class="comment">    /// </span>
<a name="l00247"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_319b48805a8138c1665fb0e0e7aa63fb.htm#319b48805a8138c1665fb0e0e7aa63fb">00247</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_319b48805a8138c1665fb0e0e7aa63fb.htm#319b48805a8138c1665fb0e0e7aa63fb">operator&lt;=</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 )<span class="keyword"> const</span>
<a name="l00248"></a>00248 <span class="keyword">    </span>{
<a name="l00249"></a>00249         <span class="keywordflow">return</span>( wcscmp( *<span class="keyword">this</span>, str2 ) &lt;= 0 );
<a name="l00250"></a>00250     }
<a name="l00251"></a>00251 <span class="comment"></span>
<a name="l00252"></a>00252 <span class="comment">    /// \brief</span>
<a name="l00253"></a>00253 <span class="comment">    /// Less than  comparison operator</span>
<a name="l00254"></a>00254 <span class="comment">    /// </span>
<a name="l00255"></a>00255 <span class="comment">    /// \param str2 </span>
<a name="l00256"></a>00256 <span class="comment">    /// String to compare</span>
<a name="l00257"></a>00257 <span class="comment">    /// </span>
<a name="l00258"></a>00258 <span class="comment">    /// \return</span>
<a name="l00259"></a>00259 <span class="comment">    /// Returns true if this string is lexically less than str2</span>
<a name="l00260"></a>00260 <span class="comment">    /// </span>
<a name="l00261"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_1297303ccc7e40ed527668b695775cfb.htm#1297303ccc7e40ed527668b695775cfb">00261</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_1297303ccc7e40ed527668b695775cfb.htm#1297303ccc7e40ed527668b695775cfb">operator&lt;</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 )<span class="keyword"> const</span>
<a name="l00262"></a>00262 <span class="keyword">    </span>{
<a name="l00263"></a>00263         <span class="keywordflow">return</span>( wcscmp( *<span class="keyword">this</span>, str2 ) &lt; 0 );
<a name="l00264"></a>00264     }
<a name="l00265"></a>00265 <span class="comment"></span>
<a name="l00266"></a>00266 <span class="comment">    /// \brief</span>
<a name="l00267"></a>00267 <span class="comment">    /// Case-insensitive string comparison.</span>
<a name="l00268"></a>00268 <span class="comment">    /// </span>
<a name="l00269"></a>00269 <span class="comment">    /// \param str2 </span>
<a name="l00270"></a>00270 <span class="comment">    /// String to compare.</span>
<a name="l00271"></a>00271 <span class="comment">    /// </span>
<a name="l00272"></a>00272 <span class="comment">    /// \return</span>
<a name="l00273"></a>00273 <span class="comment">    /// Returns:</span>
<a name="l00274"></a>00274 <span class="comment">    /// &lt;ul&gt;</span>
<a name="l00275"></a>00275 <span class="comment">    ///      &lt;li&gt;-1 if this is less than str2</span>
<a name="l00276"></a>00276 <span class="comment">    ///      &lt;li&gt;0 if this is equal to str2</span>
<a name="l00277"></a>00277 <span class="comment">    ///       &lt;li&gt;1 if this is greater than str2</span>
<a name="l00278"></a>00278 <span class="comment">    /// &lt;/ul&gt;</span>
<a name="l00279"></a>00279 <span class="comment">    /// </span>
<a name="l00280"></a>00280 <span class="comment">    /// </span>
<a name="l00281"></a>00281 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">int</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_2ae75112dd004be34bf2dbe7d484b94a.htm#2ae75112dd004be34bf2dbe7d484b94a">ICompare</a>( <span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> str2 ) <span class="keyword">const</span>;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="comment"></span>
<a name="l00284"></a>00284 <span class="comment">    /// \return</span>
<a name="l00285"></a>00285 <span class="comment">    /// Returns the Unicode version of this string that the caller does not have</span>
<a name="l00286"></a>00286 <span class="comment">    /// to destroy </span>
<a name="l00287"></a>00287 <span class="comment">    /// </span>
<a name="l00288"></a>00288 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_63b2a83659eba2b3e71b13d08281fff6.htm#63b2a83659eba2b3e71b13d08281fff6">operator FdoString*</a>( ) <span class="keyword">const</span>;
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="comment"></span>
<a name="l00292"></a>00292 <span class="comment">    /// \return</span>
<a name="l00293"></a>00293 <span class="comment">    /// Returns the UTF8 version of this string that the caller does not have</span>
<a name="l00294"></a>00294 <span class="comment">    /// to destroy </span>
<a name="l00295"></a>00295 <span class="comment">    /// </span>
<a name="l00296"></a>00296 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_8e68273b500c4894f6c0123f1d6c7ba1.htm#8e68273b500c4894f6c0123f1d6c7ba1">operator const char*</a>( ) <span class="keyword">const</span>;
<a name="l00297"></a>00297 <span class="comment"></span>
<a name="l00298"></a>00298 <span class="comment">    /// \return</span>
<a name="l00299"></a>00299 <span class="comment">    /// Returns the length (in wide characters) of the Unicode version of this string</span>
<a name="l00300"></a>00300 <span class="comment">    /// </span>
<a name="l00301"></a>00301 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> size_t <a class="code" href="../../d8/d8d/class_fdo_string_p_6a3e0dea976007aa99ceeeb6d8add1c3.htm#6a3e0dea976007aa99ceeeb6d8add1c3">GetLength</a>() <span class="keyword">const</span>;
<a name="l00302"></a>00302 <span class="comment"></span>
<a name="l00303"></a>00303 <span class="comment">    /// \brief</span>
<a name="l00304"></a>00304 <span class="comment">    /// Gets the characters to the left of the given sub-string.</span>
<a name="l00305"></a>00305 <span class="comment">    /// </span>
<a name="l00306"></a>00306 <span class="comment">    /// \param delimiter </span>
<a name="l00307"></a>00307 <span class="comment">    /// The substring.</span>
<a name="l00308"></a>00308 <span class="comment">    /// </span>
<a name="l00309"></a>00309 <span class="comment">    /// \return</span>
<a name="l00310"></a>00310 <span class="comment">    /// Returns all of the characters</span>
<a name="l00311"></a>00311 <span class="comment">    ///     to the left of the first occurance of the delimiter string.</span>
<a name="l00312"></a>00312 <span class="comment">    ///     All of this string is returned if the delimiter is</span>
<a name="l00313"></a>00313 <span class="comment">    ///     not in this string. An empty string(L"") is returned if the delimiter is</span>
<a name="l00314"></a>00314 <span class="comment">    /// is NULL or L"".</span>
<a name="l00315"></a>00315 <span class="comment">    /// </span>
<a name="l00316"></a>00316 <span class="comment"></span>
<a name="l00317"></a>00317     <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_fe3c727325c38316969bfe5d6ff1c4e8.htm#fe3c727325c38316969bfe5d6ff1c4e8">Left</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* delimiter ) <span class="keyword">const</span>;
<a name="l00318"></a>00318 <span class="comment"></span>
<a name="l00319"></a>00319 <span class="comment">    /// \brief</span>
<a name="l00320"></a>00320 <span class="comment">    /// Gets the characters to the right of the given sub-string.</span>
<a name="l00321"></a>00321 <span class="comment">    /// </span>
<a name="l00322"></a>00322 <span class="comment">    /// \param delimiter </span>
<a name="l00323"></a>00323 <span class="comment">    /// The substring.</span>
<a name="l00324"></a>00324 <span class="comment">    /// </span>
<a name="l00325"></a>00325 <span class="comment">    /// \return</span>
<a name="l00326"></a>00326 <span class="comment">    /// Returns all of the characters</span>
<a name="l00327"></a>00327 <span class="comment">    ///     to the right of the first occurance of the delimiter string.</span>
<a name="l00328"></a>00328 <span class="comment">    ///     an empty string(L"") is returned if the delimiter is</span>
<a name="l00329"></a>00329 <span class="comment">    ///     not in this string. All of this string is returned if the delimiter is </span>
<a name="l00330"></a>00330 <span class="comment">    /// NULL or L"".</span>
<a name="l00331"></a>00331 <span class="comment">    /// </span>
<a name="l00332"></a>00332 <span class="comment"></span>
<a name="l00333"></a>00333     <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_ddc8d8d85e6061f4a9da776f20a6e149.htm#ddc8d8d85e6061f4a9da776f20a6e149">Right</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* delimiter ) <span class="keyword">const</span>;
<a name="l00334"></a>00334 <span class="comment"></span>
<a name="l00335"></a>00335 <span class="comment">    /// \brief</span>
<a name="l00336"></a>00336 <span class="comment">    /// Extracts a sub-string of this string</span>
<a name="l00337"></a>00337 <span class="comment">    /// </span>
<a name="l00338"></a>00338 <span class="comment">    /// \param first </span>
<a name="l00339"></a>00339 <span class="comment">    /// the 0-based position of the first character to return.</span>
<a name="l00340"></a>00340 <span class="comment">    /// Negative values are treated as 0.</span>
<a name="l00341"></a>00341 <span class="comment">    /// \param count </span>
<a name="l00342"></a>00342 <span class="comment">    /// the number of characters to return.</span>
<a name="l00343"></a>00343 <span class="comment">    /// If negative then all characters up to the end of this string are returned.</span>
<a name="l00344"></a>00344 <span class="comment">    /// \param useUTF8 </span>
<a name="l00345"></a>00345 <span class="comment">    /// true: perform Mid against the UTF8 representation of this string.</span>
<a name="l00346"></a>00346 <span class="comment">    /// false (default): perform it against the Unicode representation.</span>
<a name="l00347"></a>00347 <span class="comment">    /// </span>
<a name="l00348"></a>00348 <span class="comment">    /// \return</span>
<a name="l00349"></a>00349 <span class="comment">    /// The extracted sub-string</span>
<a name="l00350"></a>00350 <span class="comment">    /// </span>
<a name="l00351"></a>00351 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_a6c9181abc8f27a912479a6166a83339.htm#a6c9181abc8f27a912479a6166a83339">Mid</a>( size_t first, size_t count, <span class="keywordtype">bool</span> useUTF8 = <span class="keyword">false</span> );
<a name="l00352"></a>00352 <span class="comment"></span>
<a name="l00353"></a>00353 <span class="comment">    /// \brief</span>
<a name="l00354"></a>00354 <span class="comment">    /// Replaces sub-strings.</span>
<a name="l00355"></a>00355 <span class="comment">    /// </span>
<a name="l00356"></a>00356 <span class="comment">    /// \param pOld </span>
<a name="l00357"></a>00357 <span class="comment">    /// the sub-string to replace</span>
<a name="l00358"></a>00358 <span class="comment">    /// \param pNew </span>
<a name="l00359"></a>00359 <span class="comment">    /// the string to replace pOld by</span>
<a name="l00360"></a>00360 <span class="comment">    /// </span>
<a name="l00361"></a>00361 <span class="comment">    /// \return</span>
<a name="l00362"></a>00362 <span class="comment">    /// Returns a copy of this string, with all occurrences of pOld</span>
<a name="l00363"></a>00363 <span class="comment">    /// replaced by pNew. This string itself is not modified</span>
<a name="l00364"></a>00364 <span class="comment">    /// </span>
<a name="l00365"></a>00365 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_ed0a7c6426e0cd874ddf6d3355c8a530.htm#ed0a7c6426e0cd874ddf6d3355c8a530">Replace</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* pOld, <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* pNew ) <span class="keyword">const</span>;
<a name="l00366"></a>00366 <span class="comment"></span>
<a name="l00367"></a>00367 <span class="comment">    /// \return</span>
<a name="l00368"></a>00368 <span class="comment">    /// Returns a copy of this string with all characters in upper case.</span>
<a name="l00369"></a>00369 <span class="comment">    /// </span>
<a name="l00370"></a>00370 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_7a93c3eb71354e1ba5140f962a87045d.htm#7a93c3eb71354e1ba5140f962a87045d">Upper</a>() <span class="keyword">const</span>;
<a name="l00371"></a>00371 <span class="comment"></span>
<a name="l00372"></a>00372 <span class="comment">    /// \return</span>
<a name="l00373"></a>00373 <span class="comment">    /// Returns a copy of this string with all characters in lower case.</span>
<a name="l00374"></a>00374 <span class="comment">    /// </span>
<a name="l00375"></a>00375 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_01e16e254c6ea14a282f295d9b9f2660.htm#01e16e254c6ea14a282f295d9b9f2660">Lower</a>() <span class="keyword">const</span>;
<a name="l00376"></a>00376 <span class="comment"></span>
<a name="l00377"></a>00377 <span class="comment">    /// \brief</span>
<a name="l00378"></a>00378 <span class="comment">    /// Checks for a sub-string.</span>
<a name="l00379"></a>00379 <span class="comment">    /// </span>
<a name="l00380"></a>00380 <span class="comment">    /// \param subString </span>
<a name="l00381"></a>00381 <span class="comment">    /// the sub-string to check</span>
<a name="l00382"></a>00382 <span class="comment">    /// </span>
<a name="l00383"></a>00383 <span class="comment">    /// \return</span>
<a name="l00384"></a>00384 <span class="comment">    /// Returns true if this string has at least 1 occurrence of subString</span>
<a name="l00385"></a>00385 <span class="comment">    /// </span>
<a name="l00386"></a>00386 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_7b078c40f156461e679d09fb895cef06.htm#7b078c40f156461e679d09fb895cef06">Contains</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* subString ) <span class="keyword">const</span>;
<a name="l00387"></a>00387 <span class="comment"></span>
<a name="l00388"></a>00388 <span class="comment">    /// \return</span>
<a name="l00389"></a>00389 <span class="comment">    /// Returns true if this string represents a number.</span>
<a name="l00390"></a>00390 <span class="comment">    /// </span>
<a name="l00391"></a>00391 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">bool</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_b17e13ef10cb11d0e3b0c3ae7440112a.htm#b17e13ef10cb11d0e3b0c3ae7440112a">IsNumber</a>() <span class="keyword">const</span>;
<a name="l00392"></a>00392 <span class="comment"></span>
<a name="l00393"></a>00393 <span class="comment">    /// \brief</span>
<a name="l00394"></a>00394 <span class="comment">    /// Converts this string to a long integer.</span>
<a name="l00395"></a>00395 <span class="comment">    /// </span>
<a name="l00396"></a>00396 <span class="comment">    /// \return</span>
<a name="l00397"></a>00397 <span class="comment">    /// Returns the long integer (0 if the string is not numeric).</span>
<a name="l00398"></a>00398 <span class="comment">    /// </span>
<a name="l00399"></a>00399 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keywordtype">long</span> <a class="code" href="../../d8/d8d/class_fdo_string_p_596550aaf84d4d569fdd2cbe8da0a86a.htm#596550aaf84d4d569fdd2cbe8da0a86a">ToLong</a>() <span class="keyword">const</span>;
<a name="l00400"></a>00400 <span class="comment"></span>
<a name="l00401"></a>00401 <span class="comment">    /// \brief</span>
<a name="l00402"></a>00402 <span class="comment">    /// Converts this string to a double precision number.</span>
<a name="l00403"></a>00403 <span class="comment">    /// </span>
<a name="l00404"></a>00404 <span class="comment">    /// \return</span>
<a name="l00405"></a>00405 <span class="comment">    /// Returns double (0 if the string is not numeric).</span>
<a name="l00406"></a>00406 <span class="comment">    /// </span>
<a name="l00407"></a>00407 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../df/db1/group__typedefs_g4f6e86ba3c4bfb09c01003f64e7b77db.htm#g4f6e86ba3c4bfb09c01003f64e7b77db">FdoDouble</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_c68cc53ba4e5973819c0f8b11caed44c.htm#c68cc53ba4e5973819c0f8b11caed44c">ToDouble</a>() <span class="keyword">const</span>;
<a name="l00408"></a>00408 <span class="comment"></span>
<a name="l00409"></a>00409 <span class="comment">    /// \brief</span>
<a name="l00410"></a>00410 <span class="comment">    /// Converts this string to a boolean.</span>
<a name="l00411"></a>00411 <span class="comment">    /// </span>
<a name="l00412"></a>00412 <span class="comment">    /// \param defaultValue </span>
<a name="l00413"></a>00413 <span class="comment">    /// value returned when string is not recognized as boolean</span>
<a name="l00414"></a>00414 <span class="comment">    /// </span>
<a name="l00415"></a>00415 <span class="comment">    /// \return</span>
<a name="l00416"></a>00416 <span class="comment">    /// Returns true if the string in lower case is "t", "true", "y", "yes", or "1".</span>
<a name="l00417"></a>00417 <span class="comment">    /// Returns false if the string in lower case is "f", "false", "n", "no", or "0".</span>
<a name="l00418"></a>00418 <span class="comment">    /// Otherwise returns defaultValue.</span>
<a name="l00419"></a>00419 <span class="comment">    /// </span>
<a name="l00420"></a>00420 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <a class="code" href="../../df/db1/group__typedefs_g467f74207096bcd703476c3c8e6f9d2d.htm#g467f74207096bcd703476c3c8e6f9d2d">FdoBoolean</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_f791a48688e98291867af0d998d5ca4e.htm#f791a48688e98291867af0d998d5ca4e">ToBoolean</a>(<a class="code" href="../../df/db1/group__typedefs_g467f74207096bcd703476c3c8e6f9d2d.htm#g467f74207096bcd703476c3c8e6f9d2d">FdoBoolean</a> defaultValue=<span class="keyword">false</span> ) <span class="keyword">const</span>;
<a name="l00421"></a>00421 <span class="comment"></span>
<a name="l00422"></a>00422 <span class="comment">    /// \brief</span>
<a name="l00423"></a>00423 <span class="comment">    /// Create a formatted string.</span>
<a name="l00424"></a>00424 <span class="comment">    /// </span>
<a name="l00425"></a>00425 <span class="comment">    /// \param wValue </span>
<a name="l00426"></a>00426 <span class="comment">    /// the formatting template. Can contain </span>
<a name="l00427"></a>00427 <span class="comment">    /// "sprintf" style formatting specs.</span>
<a name="l00428"></a>00428 <span class="comment">    /// &lt;param name="..."&gt;</span>
<a name="l00429"></a>00429 <span class="comment">    /// substitution parms to format into string.</span>
<a name="l00430"></a>00430 <span class="comment">    ///     wValue must have one formatting spec per parm.</span>
<a name="l00431"></a>00431 <span class="comment">    /// &lt;/param&gt;</span>
<a name="l00432"></a>00432 <span class="comment">    /// </span>
<a name="l00433"></a>00433 <span class="comment">    /// \return</span>
<a name="l00434"></a>00434 <span class="comment">    /// Returns the formatted string.</span>
<a name="l00435"></a>00435 <span class="comment">    /// </span>
<a name="l00436"></a>00436 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">static</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a> <a class="code" href="../../d8/d8d/class_fdo_string_p_44eb70fc2cf4fc5117e3c47e8435ec2f.htm#44eb70fc2cf4fc5117e3c47e8435ec2f">Format</a>( <a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* wValue, ... );
<a name="l00437"></a>00437 <span class="comment"></span>
<a name="l00438"></a>00438 <span class="comment">    /// \brief</span>
<a name="l00439"></a>00439 <span class="comment">    /// Constant representing a zero-length string.</span>
<a name="l00440"></a>00440 <span class="comment">    /// </span>
<a name="l00441"></a><a class="code" href="../../d8/d8d/class_fdo_string_p_756a871cec4c08bb93e8df98c4e4b64c.htm#756a871cec4c08bb93e8df98c4e4b64c">00441</a> <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* <a class="code" href="../../d8/d8d/class_fdo_string_p_756a871cec4c08bb93e8df98c4e4b64c.htm#756a871cec4c08bb93e8df98c4e4b64c">mEmptyString</a>;
<a name="l00442"></a>00442 <span class="comment"></span>
<a name="l00443"></a>00443 <span class="comment">/// \cond DOXYGEN-IGNORE</span>
<a name="l00444"></a>00444 <span class="comment"></span><span class="comment"></span>
<a name="l00445"></a>00445 <span class="comment">    /// Utility function for converting from unicode to utf8.</span>
<a name="l00446"></a>00446 <span class="comment">    /// returned value is allocated and must be deleted by caller.</span>
<a name="l00447"></a>00447 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">static</span> <span class="keywordtype">int</span> Utf8FromUnicode(
<a name="l00448"></a>00448         <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>   *   Wtext,
<a name="l00449"></a>00449         <span class="keywordtype">int</span>         in_size,
<a name="l00450"></a>00450         <span class="keywordtype">char</span>    *       str_out,
<a name="l00451"></a>00451         <span class="keywordtype">int</span>         out_max_size,
<a name="l00452"></a>00452         <span class="keywordtype">bool</span>        thrown_exception = <span class="keyword">true</span>
<a name="l00453"></a>00453     );
<a name="l00454"></a>00454 <span class="comment"></span>
<a name="l00455"></a>00455 <span class="comment">    /// Utility function for converting from utf8 to unicode.</span>
<a name="l00456"></a>00456 <span class="comment">    /// returned value is allocated and must be deleted by caller.</span>
<a name="l00457"></a>00457 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">static</span> <span class="keywordtype">int</span> Utf8ToUnicode(
<a name="l00458"></a>00458         <span class="keyword">const</span> <span class="keywordtype">char</span>  *   str_in,
<a name="l00459"></a>00459         <span class="keywordtype">int</span>         in_size,
<a name="l00460"></a>00460         <span class="keywordtype">wchar_t</span> *   Wtext,
<a name="l00461"></a>00461         <span class="keywordtype">int</span>         out_size,
<a name="l00462"></a>00462         <span class="keywordtype">bool</span>        thrown_exception = <span class="keyword">true</span>
<a name="l00463"></a>00463     );
<a name="l00464"></a>00464 <span class="comment"></span>
<a name="l00465"></a>00465 <span class="comment">    /// Utility function for converting from unicode to utf8.</span>
<a name="l00466"></a>00466 <span class="comment">    /// returned value is allocated and must be deleted by caller.</span>
<a name="l00467"></a>00467 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">static</span> <span class="keywordtype">int</span> Utf8FromUnicode(
<a name="l00468"></a>00468         <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>   *   Wtext,
<a name="l00469"></a>00469         <span class="keywordtype">char</span>    *       str_out,
<a name="l00470"></a>00470         <span class="keywordtype">int</span>         out_max_size,
<a name="l00471"></a>00471         <span class="keywordtype">bool</span>        thrown_exception = <span class="keyword">true</span>
<a name="l00472"></a>00472     );
<a name="l00473"></a>00473 <span class="comment"></span>
<a name="l00474"></a>00474 <span class="comment">    /// Utility function for converting from utf8 to unicode.</span>
<a name="l00475"></a>00475 <span class="comment">    /// returned value is allocated and must be deleted by caller.</span>
<a name="l00476"></a>00476 <span class="comment"></span>    <a class="code" href="../../d7/daa/_std_8h_aa092aaaeadccf793bf4f89d882caa89.htm#aa092aaaeadccf793bf4f89d882caa89">FDO_API_COMMON</a> <span class="keyword">static</span> <span class="keywordtype">int</span> Utf8ToUnicode(
<a name="l00477"></a>00477         <span class="keyword">const</span> <span class="keywordtype">char</span>  *   str_in,
<a name="l00478"></a>00478         <span class="keywordtype">wchar_t</span> *   Wtext,
<a name="l00479"></a>00479         <span class="keywordtype">int</span>         out_size,
<a name="l00480"></a>00480         <span class="keywordtype">bool</span>        thrown_exception = <span class="keyword">true</span>
<a name="l00481"></a>00481     );
<a name="l00482"></a>00482 <span class="comment"></span>
<a name="l00483"></a>00483 <span class="comment">    /// Return the length (in Unicode characters) of a UTF8 string</span>
<a name="l00484"></a>00484 <span class="comment"></span>    <span class="keyword">static</span> <span class="keywordtype">int</span> Utf8Len(<span class="keyword">const</span> <span class="keywordtype">char</span> *utf8String);<span class="comment"></span>
<a name="l00485"></a>00485 <span class="comment">/// \endcond</span>
<a name="l00486"></a>00486 <span class="comment"></span>
<a name="l00487"></a>00487 <span class="keyword">private</span>:<span class="comment"></span>
<a name="l00488"></a>00488 <span class="comment">    /// structure used to convert between Unicode and UTF8</span>
<a name="l00489"></a>00489 <span class="comment"></span>    <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00490"></a>00490 <span class="keyword">    </span>{
<a name="l00491"></a>00491     <span class="keywordtype">int</span>     cmask;
<a name="l00492"></a>00492     <span class="keywordtype">int</span>     cval;
<a name="l00493"></a>00493     <span class="keywordtype">int</span>     shift;
<a name="l00494"></a>00494     <span class="keywordtype">long</span>    lmask;
<a name="l00495"></a>00495     <span class="keywordtype">long</span>    lval;
<a name="l00496"></a>00496     } Tab;
<a name="l00497"></a>00497 <span class="comment"></span>
<a name="l00498"></a>00498 <span class="comment">    /// General functions to set this object's string value.</span>
<a name="l00499"></a>00499 <span class="comment"></span>    <span class="keywordtype">void</span> SetString(<span class="keyword">const</span> <a class="code" href="../../d8/d8d/class_fdo_string_p.htm">FdoStringP</a>&amp; oValue);
<a name="l00500"></a>00500     <span class="keywordtype">void</span> SetString(<a class="code" href="../../df/db1/group__typedefs_gd5a3d36c3e5fd69a638c2164a236e10f.htm#gd5a3d36c3e5fd69a638c2164a236e10f">FdoString</a>* wValue, <a class="code" href="../../df/db1/group__typedefs_g467f74207096bcd703476c3c8e6f9d2d.htm#g467f74207096bcd703476c3c8e6f9d2d">FdoBoolean</a> bAttach = <span class="keyword">false</span>);
<a name="l00501"></a>00501     <span class="keywordtype">void</span> SetString(<span class="keyword">const</span> <span class="keywordtype">char</span>* sValue);
<a name="l00502"></a>00502 
<a name="l00503"></a>00503     <span class="keywordtype">void</span> SetSingle() <span class="keyword">const</span>;
<a name="l00504"></a>00504 <span class="comment"></span>
<a name="l00505"></a>00505 <span class="comment">    /// Caller is responsible for deleting the returned string</span>
<a name="l00506"></a>00506 <span class="comment"></span>    <span class="keywordtype">wchar_t</span>* _copyAsWChar( ) <span class="keyword">const</span>;
<a name="l00507"></a>00507     <span class="keywordtype">char</span>* _copyAsChar( ) <span class="keyword">const</span>;
<a name="l00508"></a>00508 <span class="comment"></span>
<a name="l00509"></a>00509 <span class="comment">    /// Refcount functions. Refcount is the number of </span>
<a name="l00510"></a>00510 <span class="comment">    /// FdoStringP objects that point to a particular</span>
<a name="l00511"></a>00511 <span class="comment">    /// string buffer.</span>
<a name="l00512"></a>00512 <span class="comment"></span>    <span class="keywordtype">void</span> AddRef();
<a name="l00513"></a>00513     <span class="keywordtype">void</span> Release();
<a name="l00514"></a>00514     <span class="comment"></span>
<a name="l00515"></a>00515 <span class="comment">    /// String buffer </span>
<a name="l00516"></a>00516 <span class="comment"></span><span class="comment"></span>
<a name="l00517"></a>00517 <span class="comment">    /// unicode string</span>
<a name="l00518"></a>00518 <span class="comment"></span>    <span class="keywordtype">wchar_t</span>* mwString;<span class="comment"></span>
<a name="l00519"></a>00519 <span class="comment">    /// utf8 string</span>
<a name="l00520"></a>00520 <span class="comment"></span>    <span class="keywordtype">char</span>* msString;<span class="comment"></span>
<a name="l00521"></a>00521 <span class="comment">    /// associated ref counter.</span>
<a name="l00522"></a>00522 <span class="comment"></span>    <span class="keywordtype">long</span>* mRefCount;
<a name="l00523"></a>00523 <span class="comment"></span>
<a name="l00524"></a>00524 <span class="comment">    /// table for converting between UTF8 and Unicode.</span>
<a name="l00525"></a>00525 <span class="comment"></span>    <span class="keyword">static</span> Tab tab[];
<a name="l00526"></a>00526 };
<a name="l00527"></a>00527 
<a name="l00528"></a>00528 <span class="preprocessor">#endif</span>
<a name="l00529"></a>00529 <span class="preprocessor"></span>
<a name="l00530"></a>00530 
</pre></div><!-- footer.html -->
		<hr>
		<table width="100%"  border="0">
			<tr>
				<td>Comments or suggestions? Send us <a href="mailto:isd.docs@autodesk.com&subject=FDO%20API%20documentation">feedback</a>.</td>
				<!-- The logo can go in another cell, when we get one -->			
			</tr>
		</table>
	</body>
</html>
