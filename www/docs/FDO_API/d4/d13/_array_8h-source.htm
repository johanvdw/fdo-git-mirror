<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"	"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>FDO API Reference</title>
		<link href="../../custom.css" rel="stylesheet" type="text/css">
		<link href="../../tabs.css" rel="stylesheet" type="text/css">
	</head>
	<body bgcolor="#FFFFFF">
		<table width="100%"  border="0">
			<tr>
				<td><b>FDO API Reference<b></td>
				<td align="right"><b>Feature Data Objects<b></td>
			</tr>
			
		</table>
<!-- End of: header.html -->
<!-- Generated by Doxygen 1.5.1-p1 -->
<div class="tabs">
  <ul>
    <li><a href="../../main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="../../modules.htm"><span>Modules</span></a></li>
    <li><a href="../../classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="../../files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="../../files.htm"><span>File&nbsp;List</span></a></li>
    <li><a href="../../globals.htm"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>Array.h</h1><a href="../../d3/dc5/_array_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef _ARRAY_H_</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define _ARRAY_H_</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span><span class="comment">// </span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// Copyright (C) 2004-2006  Autodesk, Inc.</span>
<a name="l00007"></a>00007 <span class="comment">// </span>
<a name="l00008"></a>00008 <span class="comment">// This library is free software; you can redistribute it and/or</span>
<a name="l00009"></a>00009 <span class="comment">// modify it under the terms of version 2.1 of the GNU Lesser</span>
<a name="l00010"></a>00010 <span class="comment">// General Public License as published by the Free Software Foundation.</span>
<a name="l00011"></a>00011 <span class="comment">// </span>
<a name="l00012"></a>00012 <span class="comment">// This library is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">// Lesser General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">// </span>
<a name="l00017"></a>00017 <span class="comment">// You should have received a copy of the GNU Lesser General Public</span>
<a name="l00018"></a>00018 <span class="comment">// License along with this library; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#pragma once</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;<a class="code" href="../../de/d02/_array_helper_8h.htm">Common/ArrayHelper.h</a>&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">// Template for dynamic array.  It supports:</span>
<a name="l00030"></a>00030 <span class="comment">//  - shared ownership, via reference counting</span>
<a name="l00031"></a>00031 <span class="comment">//  - single allocation on heap for entire structure (no internal indirection)</span>
<a name="l00032"></a>00032 <span class="comment">//  - dynamic growth with infrequent reallocation</span>
<a name="l00033"></a>00033 <span class="comment">//  - hiding "new" and "delete" from callers that may have redefined these operators</span>
<a name="l00034"></a>00034 <span class="comment">//</span>
<a name="l00035"></a>00035 <span class="comment">// This class integrates its own needed member variables within</span>
<a name="l00036"></a>00036 <span class="comment">// the array itself.  This approach is very space efficient, as </span>
<a name="l00037"></a>00037 <span class="comment">// it avoids the overhead of a level of indirection; there is no</span>
<a name="l00038"></a>00038 <span class="comment">// pointer to an internal, owned array.</span>
<a name="l00039"></a>00039 <span class="comment">//</span>
<a name="l00040"></a>00040 <span class="comment">// The tradeoffs to get these features are:</span>
<a name="l00041"></a>00041 <span class="comment">//  - any method call that could cause re-allocation is static, </span>
<a name="l00042"></a>00042 <span class="comment">//    returning a (possibly new) location for the array object</span>
<a name="l00043"></a>00043 <span class="comment">//  - one cannot call re-allocating methods if the object is shared</span>
<a name="l00044"></a>00044 <span class="comment">//  - this class must never contain virtual methods (thus does its own reference counting)</span>
<a name="l00045"></a>00045 <span class="comment">//  - the allocation mechanism delegates to a helper class</span>
<a name="l00046"></a>00046 <span class="comment">//  - it is not typesafe for objects that cannot safely be moved around</span>
<a name="l00047"></a>00047 <span class="comment">//    in memory or which have non-empty destructors (it is safe for basic</span>
<a name="l00048"></a>00048 <span class="comment">//    types and most structs).</span>
<a name="l00049"></a>00049 <span class="comment">//</span>
<a name="l00050"></a>00050 <span class="comment">// Example:</span>
<a name="l00051"></a>00051 <span class="comment">//      FdoIntArray* ints = FdoIntArray::Create();</span>
<a name="l00052"></a>00052 <span class="comment">//      ints = FdoIntArray::Append(ints, 7);</span>
<a name="l00053"></a>00053 <span class="comment">//      FdoInt32 moreInts [] = { 8, 9 };</span>
<a name="l00054"></a>00054 <span class="comment">//      FdoInt32 numMoreInts = sizeof(moreInts)/sizeof(moreInts[0]);</span>
<a name="l00055"></a>00055 <span class="comment">//      ints = FdoIntArray::Append(ints, numMoreInts, moreInts);</span>
<a name="l00056"></a>00056 <span class="comment">//      int element = (*ints)[1];</span>
<a name="l00057"></a>00057 <span class="comment">//      cout &lt;&lt; "The second element is " &lt;&lt; element &lt;&lt; endl;</span>
<a name="l00058"></a>00058 <span class="comment">//      FDO_SAFE_RELEASE(ints);</span>
<a name="l00059"></a>00059 <span class="comment"></span>
<a name="l00060"></a>00060 <span class="comment">/// \brief</span>
<a name="l00061"></a>00061 <span class="comment">/// Abstract template class for defining dynamic arrays.</span>
<a name="l00062"></a>00062 <span class="comment">/// </span>
<a name="l00063"></a>00063 <span class="comment">/// &lt;span class="red_text"&gt;&lt;b&gt;WARNING:&lt;/b&gt;&lt;/span&gt; This array uses a single memory allocation to store array elements</span>
<a name="l00064"></a>00064 <span class="comment">/// and may re-allocate that memory when the array size needs to change.</span>
<a name="l00065"></a>00065 <span class="comment">/// Therefore, do not keep pointers to array elements and avoid using </span>
<a name="l00066"></a>00066 <span class="comment">/// for objects which cannot be safely moved around in memory or which have</span>
<a name="l00067"></a>00067 <span class="comment">/// non-empty destructors.</span>
<a name="l00068"></a><a class="code" href="../../d9/d14/class_fdo_array.htm">00068</a> <span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span><a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray</a>
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070 <span class="keyword">public</span>:
<a name="l00071"></a>00071 <span class="comment"></span>
<a name="l00072"></a>00072 <span class="comment">    /// \brief</span>
<a name="l00073"></a>00073 <span class="comment">    /// Create an empty array</span>
<a name="l00074"></a>00074 <span class="comment">    /// </span>
<a name="l00075"></a>00075 <span class="comment">    /// \return</span>
<a name="l00076"></a>00076 <span class="comment">    /// Returns a FdoArray pointer</span>
<a name="l00077"></a>00077 <span class="comment">    /// </span>
<a name="l00078"></a>00078 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_68aa13104536308e249b437d2c750ea8.htm#68aa13104536308e249b437d2c750ea8">Create</a>();<span class="comment"></span>
<a name="l00079"></a>00079 <span class="comment">    /// \brief</span>
<a name="l00080"></a>00080 <span class="comment">    /// Create a dynamic array preallocated to a specific size</span>
<a name="l00081"></a>00081 <span class="comment">    /// </span>
<a name="l00082"></a>00082 <span class="comment">    /// \param initialAlloc </span>
<a name="l00083"></a>00083 <span class="comment">    /// Input initial size of the array</span>
<a name="l00084"></a>00084 <span class="comment">    /// </span>
<a name="l00085"></a>00085 <span class="comment">    /// \return</span>
<a name="l00086"></a>00086 <span class="comment">    /// Returns a FdoArray pointer</span>
<a name="l00087"></a>00087 <span class="comment">    /// </span>
<a name="l00088"></a>00088 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_68aa13104536308e249b437d2c750ea8.htm#68aa13104536308e249b437d2c750ea8">Create</a>(FdoInt32 initialAlloc);<span class="comment"></span>
<a name="l00089"></a>00089 <span class="comment">    /// \brief</span>
<a name="l00090"></a>00090 <span class="comment">    /// Create a dynamic array from a pointer to a fixed array</span>
<a name="l00091"></a>00091 <span class="comment">    /// </span>
<a name="l00092"></a>00092 <span class="comment">    /// \param elements </span>
<a name="l00093"></a>00093 <span class="comment">    /// Input pointer to array of elements</span>
<a name="l00094"></a>00094 <span class="comment">    /// \param initialNumElements </span>
<a name="l00095"></a>00095 <span class="comment">    /// Input number of elements to be added</span>
<a name="l00096"></a>00096 <span class="comment">    /// </span>
<a name="l00097"></a>00097 <span class="comment">    /// \return</span>
<a name="l00098"></a>00098 <span class="comment">    /// Returns a FdoArray pointer</span>
<a name="l00099"></a>00099 <span class="comment">    /// </span>
<a name="l00100"></a>00100 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_68aa13104536308e249b437d2c750ea8.htm#68aa13104536308e249b437d2c750ea8">Create</a>(<span class="keyword">const</span> T* elements, FdoInt32 initialNumElements);
<a name="l00101"></a>00101 <span class="comment"></span>
<a name="l00102"></a>00102 <span class="comment">    /// \brief</span>
<a name="l00103"></a>00103 <span class="comment">    /// Increase the reference count.</span>
<a name="l00104"></a>00104 <span class="comment">    /// </span>
<a name="l00105"></a>00105 <span class="comment">    /// \return</span>
<a name="l00106"></a>00106 <span class="comment">    /// Returns the new reference count. For debugging use only.</span>
<a name="l00107"></a>00107 <span class="comment">    /// </span>
<a name="l00108"></a><a class="code" href="../../d9/d14/class_fdo_array_59875bfbb3ff859c77bcb48b78ddb86a.htm#59875bfbb3ff859c77bcb48b78ddb86a">00108</a> <span class="comment"></span>    <span class="keyword">inline</span> FdoInt32 <a class="code" href="../../d9/d14/class_fdo_array_59875bfbb3ff859c77bcb48b78ddb86a.htm#59875bfbb3ff859c77bcb48b78ddb86a">AddRef</a>() { <span class="keywordflow">return</span> ++((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)<span class="keyword">this</span>)-&gt;m_metadata.refCount; }<span class="comment"></span>
<a name="l00109"></a>00109 <span class="comment">    /// \brief</span>
<a name="l00110"></a>00110 <span class="comment">    /// Decrease the reference count.</span>
<a name="l00111"></a>00111 <span class="comment">    /// </span>
<a name="l00112"></a>00112 <span class="comment">    /// \return</span>
<a name="l00113"></a>00113 <span class="comment">    /// Returns the new reference count. For debugging use only.</span>
<a name="l00114"></a>00114 <span class="comment">    /// </span>
<a name="l00115"></a><a class="code" href="../../d9/d14/class_fdo_array_20091a0a0071baa7132275e972b844c9.htm#20091a0a0071baa7132275e972b844c9">00115</a> <span class="comment"></span>    <span class="keyword">inline</span> FdoInt32 <a class="code" href="../../d9/d14/class_fdo_array_20091a0a0071baa7132275e972b844c9.htm#20091a0a0071baa7132275e972b844c9">Release</a>() { <span class="keywordflow">if</span> (0 != --((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)<span class="keyword">this</span>)-&gt;m_metadata.refCount ) <span class="keywordflow">return</span> ((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)<span class="keyword">this</span>)-&gt;m_metadata.refCount; <a class="code" href="../../d9/d14/class_fdo_array_d650b64014b20414a531231a4815c201.htm#d650b64014b20414a531231a4815c201">Dispose</a>(); <span class="keywordflow">return</span> 0; }
<a name="l00116"></a>00116 <span class="comment"></span>
<a name="l00117"></a>00117 <span class="comment">    /// \brief</span>
<a name="l00118"></a>00118 <span class="comment">    /// Retrieves the reference count.</span>
<a name="l00119"></a>00119 <span class="comment">    /// </span>
<a name="l00120"></a>00120 <span class="comment">    /// \return</span>
<a name="l00121"></a>00121 <span class="comment">    /// Returns the existing reference count value.</span>
<a name="l00122"></a>00122 <span class="comment">    /// </span>
<a name="l00123"></a><a class="code" href="../../d9/d14/class_fdo_array_e8efb6ebb32a4623390e3c41aeaae156.htm#e8efb6ebb32a4623390e3c41aeaae156">00123</a> <span class="comment"></span>    <span class="keyword">inline</span> FdoInt32 <a class="code" href="../../d9/d14/class_fdo_array_e8efb6ebb32a4623390e3c41aeaae156.htm#e8efb6ebb32a4623390e3c41aeaae156">GetRefCount</a>() { <span class="keywordflow">return</span> ((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)<span class="keyword">this</span>)-&gt;m_metadata.refCount; }
<a name="l00124"></a>00124 <span class="comment"></span>
<a name="l00125"></a>00125 <span class="comment">    /// \brief</span>
<a name="l00126"></a>00126 <span class="comment">    /// Gets the number of items in the array.</span>
<a name="l00127"></a>00127 <span class="comment">    /// </span>
<a name="l00128"></a>00128 <span class="comment">    /// \return</span>
<a name="l00129"></a>00129 <span class="comment">    /// Returns number of items in the array</span>
<a name="l00130"></a>00130 <span class="comment">    /// </span>
<a name="l00131"></a><a class="code" href="../../d9/d14/class_fdo_array_bd3558080c3a0f16cf6037940eaeb37b.htm#bd3558080c3a0f16cf6037940eaeb37b">00131</a> <span class="comment"></span>    FdoInt32 <a class="code" href="../../d9/d14/class_fdo_array_bd3558080c3a0f16cf6037940eaeb37b.htm#bd3558080c3a0f16cf6037940eaeb37b">GetCount</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)<span class="keyword">this</span>)-&gt;m_metadata.size; }<span class="comment"></span>
<a name="l00132"></a>00132 <span class="comment">    /// \brief</span>
<a name="l00133"></a>00133 <span class="comment">    /// Get a pointer to the data in the array.</span>
<a name="l00134"></a>00134 <span class="comment">    /// </span>
<a name="l00135"></a>00135 <span class="comment">    /// \return</span>
<a name="l00136"></a>00136 <span class="comment">    /// Returns a pointer to the data</span>
<a name="l00137"></a>00137 <span class="comment">    /// </span>
<a name="l00138"></a><a class="code" href="../../d9/d14/class_fdo_array_0d786a95cee46b3f8d49173ed2d1e5dd.htm#0d786a95cee46b3f8d49173ed2d1e5dd">00138</a> <span class="comment"></span>    T* <a class="code" href="../../d9/d14/class_fdo_array_0d786a95cee46b3f8d49173ed2d1e5dd.htm#0d786a95cee46b3f8d49173ed2d1e5dd">GetData</a>() { <span class="keywordflow">return</span> (T*)(((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)<span class="keyword">this</span>)-&gt;GetData()); }<span class="comment"></span>
<a name="l00139"></a>00139 <span class="comment">    /// \brief</span>
<a name="l00140"></a>00140 <span class="comment">    /// Get a pointer to the data in the array.</span>
<a name="l00141"></a>00141 <span class="comment">    /// </span>
<a name="l00142"></a>00142 <span class="comment">    /// \return</span>
<a name="l00143"></a>00143 <span class="comment">    /// Returns a pointer to the data</span>
<a name="l00144"></a>00144 <span class="comment">    /// </span>
<a name="l00145"></a><a class="code" href="../../d9/d14/class_fdo_array_56519e3fe023078361d9886628b093cf.htm#56519e3fe023078361d9886628b093cf">00145</a> <span class="comment"></span>    <span class="keyword">const</span> T* <a class="code" href="../../d9/d14/class_fdo_array_0d786a95cee46b3f8d49173ed2d1e5dd.htm#0d786a95cee46b3f8d49173ed2d1e5dd">GetData</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> (<span class="keyword">const</span> T*)(((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)<span class="keyword">this</span>)-&gt;GetData()); }
<a name="l00146"></a>00146 <span class="comment"></span>
<a name="l00147"></a>00147 <span class="comment">    /// \brief</span>
<a name="l00148"></a>00148 <span class="comment">    ///  Resize the array.</span>
<a name="l00149"></a>00149 <span class="comment">    /// </span>
<a name="l00150"></a>00150 <span class="comment">    /// \return</span>
<a name="l00151"></a>00151 <span class="comment">    /// Returns the new array pointer.</span>
<a name="l00152"></a>00152 <span class="comment">    /// </span>
<a name="l00153"></a>00153 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_299ae788a34b75bb16967b03e28dc02e.htm#299ae788a34b75bb16967b03e28dc02e">SetSize</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 numElements);
<a name="l00154"></a>00154 <span class="comment"></span>
<a name="l00155"></a>00155 <span class="comment">    /// \brief</span>
<a name="l00156"></a>00156 <span class="comment">    /// Adds the specified array of items to the end of the array. Returns a new array pointer.</span>
<a name="l00157"></a>00157 <span class="comment">    /// </span>
<a name="l00158"></a>00158 <span class="comment">    /// \param array </span>
<a name="l00159"></a>00159 <span class="comment">    /// Input array pointer</span>
<a name="l00160"></a>00160 <span class="comment">    /// \param numElements </span>
<a name="l00161"></a>00161 <span class="comment">    /// Input number of items to be added</span>
<a name="l00162"></a>00162 <span class="comment">    /// \param elements </span>
<a name="l00163"></a>00163 <span class="comment">    /// Input pointer to array to append</span>
<a name="l00164"></a>00164 <span class="comment">    /// </span>
<a name="l00165"></a>00165 <span class="comment">    /// \return</span>
<a name="l00166"></a>00166 <span class="comment">    /// Returns the new array pointer.</span>
<a name="l00167"></a>00167 <span class="comment">    /// </span>
<a name="l00168"></a>00168 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_f1d99bc4832671324451a3631403c4ef.htm#f1d99bc4832671324451a3631403c4ef">Append</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 numElements, T * elements);<span class="comment"></span>
<a name="l00169"></a>00169 <span class="comment">    /// \brief</span>
<a name="l00170"></a>00170 <span class="comment">    /// Adds the specified item to the end of the array. Returns a new array pointer.</span>
<a name="l00171"></a>00171 <span class="comment">    /// </span>
<a name="l00172"></a>00172 <span class="comment">    /// \param array </span>
<a name="l00173"></a>00173 <span class="comment">    /// Input array pointer</span>
<a name="l00174"></a>00174 <span class="comment">    /// \param element </span>
<a name="l00175"></a>00175 <span class="comment">    /// Input item to be appended to array</span>
<a name="l00176"></a>00176 <span class="comment">    /// </span>
<a name="l00177"></a>00177 <span class="comment">    /// \return</span>
<a name="l00178"></a>00178 <span class="comment">    /// Returns the new array pointer.</span>
<a name="l00179"></a>00179 <span class="comment">    /// </span>
<a name="l00180"></a>00180 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_f1d99bc4832671324451a3631403c4ef.htm#f1d99bc4832671324451a3631403c4ef">Append</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, T element);<span class="comment"></span>
<a name="l00181"></a>00181 <span class="comment">    /// \brief</span>
<a name="l00182"></a>00182 <span class="comment">    /// Removes all items from the array.</span>
<a name="l00183"></a>00183 <span class="comment">    /// </span>
<a name="l00184"></a>00184 <span class="comment">    /// \return</span>
<a name="l00185"></a>00185 <span class="comment">    /// Returns nothing</span>
<a name="l00186"></a>00186 <span class="comment">    /// </span>
<a name="l00187"></a>00187 <span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="../../d9/d14/class_fdo_array_807ff5b1db666e05f4077ccacfc3cd7e.htm#807ff5b1db666e05f4077ccacfc3cd7e">Clear</a>();
<a name="l00188"></a>00188 <span class="comment"></span>
<a name="l00189"></a>00189 <span class="comment">    /// \brief</span>
<a name="l00190"></a>00190 <span class="comment">    /// Provide index operator [] access to array members.</span>
<a name="l00191"></a>00191 <span class="comment">    /// </span>
<a name="l00192"></a>00192 <span class="comment">    /// \param i </span>
<a name="l00193"></a>00193 <span class="comment">    /// Input index to access</span>
<a name="l00194"></a>00194 <span class="comment">    /// </span>
<a name="l00195"></a>00195 <span class="comment">    /// \return</span>
<a name="l00196"></a>00196 <span class="comment">    /// Returns the value of the specified item in the array.</span>
<a name="l00197"></a>00197 <span class="comment">    /// </span>
<a name="l00198"></a><a class="code" href="../../d9/d14/class_fdo_array_ba28ecf74bf483e5ea5ba033d1126c56.htm#ba28ecf74bf483e5ea5ba033d1126c56">00198</a> <span class="comment"></span>    <span class="keyword">const</span> T&amp; <a class="code" href="../../d9/d14/class_fdo_array_ba28ecf74bf483e5ea5ba033d1126c56.htm#ba28ecf74bf483e5ea5ba033d1126c56">operator[]</a>(<span class="keywordtype">int</span> i)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d9/d14/class_fdo_array_9eaa32a3606bc8c5cefa04e2b4f10509.htm#9eaa32a3606bc8c5cefa04e2b4f10509">GetValue</a>(i); }<span class="comment"></span>
<a name="l00199"></a>00199 <span class="comment">    /// \brief</span>
<a name="l00200"></a>00200 <span class="comment">    /// Provide index operator [] access to array members.</span>
<a name="l00201"></a>00201 <span class="comment">    /// </span>
<a name="l00202"></a>00202 <span class="comment">    /// \param i </span>
<a name="l00203"></a>00203 <span class="comment">    /// Input index to access</span>
<a name="l00204"></a>00204 <span class="comment">    /// </span>
<a name="l00205"></a>00205 <span class="comment">    /// \return</span>
<a name="l00206"></a>00206 <span class="comment">    /// Returns the value of the specified item in the array.</span>
<a name="l00207"></a>00207 <span class="comment">    /// </span>
<a name="l00208"></a><a class="code" href="../../d9/d14/class_fdo_array_4252985a37efa055c57963b7be91f054.htm#4252985a37efa055c57963b7be91f054">00208</a> <span class="comment"></span>    T&amp; <a class="code" href="../../d9/d14/class_fdo_array_ba28ecf74bf483e5ea5ba033d1126c56.htm#ba28ecf74bf483e5ea5ba033d1126c56">operator[]</a>(<span class="keywordtype">int</span> i) { <span class="keywordflow">return</span> <a class="code" href="../../d9/d14/class_fdo_array_9eaa32a3606bc8c5cefa04e2b4f10509.htm#9eaa32a3606bc8c5cefa04e2b4f10509">GetValue</a>(i); }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="keyword">protected</span>:<span class="comment"></span>
<a name="l00211"></a>00211 <span class="comment">    /// Constructor</span>
<a name="l00212"></a><a class="code" href="../../d9/d14/class_fdo_array_bb9c0070732d9fab7c5b30a77aedfa5a.htm#bb9c0070732d9fab7c5b30a77aedfa5a">00212</a> <span class="comment"></span>    <a class="code" href="../../d9/d14/class_fdo_array_bb9c0070732d9fab7c5b30a77aedfa5a.htm#bb9c0070732d9fab7c5b30a77aedfa5a">FdoArray</a>() {}
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_28dfbf133ca379bff53112cb0ed484d8.htm#28dfbf133ca379bff53112cb0ed484d8">AllocMore</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 atLeastThisMuch, <span class="keywordtype">bool</span> exactly);
<a name="l00215"></a>00215     <span class="keyword">static</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_3e0f3866df9037444f80645cab426716.htm#3e0f3866df9037444f80645cab426716">SetAlloc</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 numElements);
<a name="l00216"></a>00216 <span class="comment"></span>
<a name="l00217"></a>00217 <span class="comment">    /// Access elements</span>
<a name="l00218"></a>00218 <span class="comment"></span>    <span class="keyword">const</span> T&amp; <a class="code" href="../../d9/d14/class_fdo_array_9eaa32a3606bc8c5cefa04e2b4f10509.htm#9eaa32a3606bc8c5cefa04e2b4f10509">GetValue</a>(FdoInt32 i) <span class="keyword">const</span>;
<a name="l00219"></a>00219     T&amp; <a class="code" href="../../d9/d14/class_fdo_array_9eaa32a3606bc8c5cefa04e2b4f10509.htm#9eaa32a3606bc8c5cefa04e2b4f10509">GetValue</a>(FdoInt32 i);
<a name="l00220"></a>00220     <span class="keywordtype">void</span> <a class="code" href="../../d9/d14/class_fdo_array_2cc96c586a0cbbec01decdd2e7581f37.htm#2cc96c586a0cbbec01decdd2e7581f37">SetValue</a>(FdoInt32 i, T newElement);
<a name="l00221"></a>00221 <span class="comment"></span>
<a name="l00222"></a>00222 <span class="comment">    /// the rest of FdoIDisposable</span>
<a name="l00223"></a>00223 <span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="../../d9/d14/class_fdo_array_d650b64014b20414a531231a4815c201.htm#d650b64014b20414a531231a4815c201">Dispose</a>();
<a name="l00224"></a>00224 };
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00227"></a>00227 <span class="keyword">inline</span>
<a name="l00228"></a><a class="code" href="../../d9/d14/class_fdo_array_68aa13104536308e249b437d2c750ea8.htm#68aa13104536308e249b437d2c750ea8">00228</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_68aa13104536308e249b437d2c750ea8.htm#68aa13104536308e249b437d2c750ea8">FdoArray&lt;T&gt;::Create</a>()
<a name="l00229"></a>00229 {
<a name="l00230"></a>00230     <span class="keywordflow">return</span> <a class="code" href="../../d9/d14/class_fdo_array_28dfbf133ca379bff53112cb0ed484d8.htm#28dfbf133ca379bff53112cb0ed484d8">AllocMore</a>(0, 0, <span class="keyword">true</span>);
<a name="l00231"></a>00231 }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00234"></a>00234 <span class="keyword">inline</span>
<a name="l00235"></a><a class="code" href="../../d9/d14/class_fdo_array_9ef7f9828c5a4c5e8931f4a91e1c7bc6.htm#9ef7f9828c5a4c5e8931f4a91e1c7bc6">00235</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_68aa13104536308e249b437d2c750ea8.htm#68aa13104536308e249b437d2c750ea8">FdoArray&lt;T&gt;::Create</a>(FdoInt32 initialAlloc)
<a name="l00236"></a>00236 {
<a name="l00237"></a>00237     <span class="keywordflow">return</span> <a class="code" href="../../d9/d14/class_fdo_array_28dfbf133ca379bff53112cb0ed484d8.htm#28dfbf133ca379bff53112cb0ed484d8">AllocMore</a>(0, initialAlloc, <span class="keyword">true</span>);
<a name="l00238"></a>00238 }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00241"></a>00241 <span class="keyword">inline</span>
<a name="l00242"></a><a class="code" href="../../d9/d14/class_fdo_array_b77fad9963d5ccaa542487efe767b7a9.htm#b77fad9963d5ccaa542487efe767b7a9">00242</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_68aa13104536308e249b437d2c750ea8.htm#68aa13104536308e249b437d2c750ea8">FdoArray&lt;T&gt;::Create</a>(<span class="keyword">const</span> T* elements, FdoInt32 initialNumElements)
<a name="l00243"></a>00243 {
<a name="l00244"></a>00244     <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array = <a class="code" href="../../d9/d14/class_fdo_array_28dfbf133ca379bff53112cb0ed484d8.htm#28dfbf133ca379bff53112cb0ed484d8">AllocMore</a>(0, initialNumElements, <span class="keyword">true</span>);
<a name="l00245"></a>00245     <span class="keywordflow">if</span> (array != NULL)
<a name="l00246"></a>00246         array = (<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> *)<a class="code" href="../../df/d0a/class_fdo_array_helper_b980413d7092545973f096c670f683e5.htm#b980413d7092545973f096c670f683e5">FdoArrayHelper::Append</a>((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*) array, initialNumElements, (<a class="code" href="../../df/db1/group__typedefs_g5d3763a847e3e7232225944ba5655c97.htm#g5d3763a847e3e7232225944ba5655c97">FdoByte</a>*) elements, <span class="keyword">sizeof</span>(T));
<a name="l00247"></a>00247     <span class="keywordflow">return</span> array;
<a name="l00248"></a>00248 }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00251"></a>00251 <span class="keyword">inline</span>
<a name="l00252"></a><a class="code" href="../../d9/d14/class_fdo_array_f1d99bc4832671324451a3631403c4ef.htm#f1d99bc4832671324451a3631403c4ef">00252</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_f1d99bc4832671324451a3631403c4ef.htm#f1d99bc4832671324451a3631403c4ef">FdoArray&lt;T&gt;::Append</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 numElements, T * elements)
<a name="l00253"></a>00253 {
<a name="l00254"></a>00254     array = (<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> *)<a class="code" href="../../df/d0a/class_fdo_array_helper_b980413d7092545973f096c670f683e5.htm#b980413d7092545973f096c670f683e5">FdoArrayHelper::Append</a>((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*) array, numElements, (<a class="code" href="../../df/db1/group__typedefs_g5d3763a847e3e7232225944ba5655c97.htm#g5d3763a847e3e7232225944ba5655c97">FdoByte</a>*) elements, <span class="keyword">sizeof</span>(T));
<a name="l00255"></a>00255     <span class="keywordflow">return</span> array;
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00259"></a>00259 <span class="keyword">inline</span>
<a name="l00260"></a><a class="code" href="../../d9/d14/class_fdo_array_1fe7d0938a9f456e58d8acf8aefc8994.htm#1fe7d0938a9f456e58d8acf8aefc8994">00260</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_f1d99bc4832671324451a3631403c4ef.htm#f1d99bc4832671324451a3631403c4ef">FdoArray&lt;T&gt;::Append</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, T element)
<a name="l00261"></a>00261 {
<a name="l00262"></a>00262     <span class="keywordflow">if</span> ( ((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)array)-&gt;m_metadata.size == ((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)array)-&gt;m_metadata.alloc )
<a name="l00263"></a>00263     {
<a name="l00264"></a>00264         array = (<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> *)<a class="code" href="../../df/d0a/class_fdo_array_helper_f112510b25197d201912233a672069b2.htm#f112510b25197d201912233a672069b2">FdoArrayHelper::AllocMore</a>((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*) array, 1, <span class="keyword">false</span> <span class="comment">/*exactly*/</span>, <span class="keyword">sizeof</span>(T));
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266     array-&gt;GetValue((((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*)array)-&gt;m_metadata.size)++) = element;
<a name="l00267"></a>00267     <span class="keywordflow">return</span> array;
<a name="l00268"></a>00268 }
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00271"></a>00271 <span class="keyword">inline</span>
<a name="l00272"></a><a class="code" href="../../d9/d14/class_fdo_array_807ff5b1db666e05f4077ccacfc3cd7e.htm#807ff5b1db666e05f4077ccacfc3cd7e">00272</a> <span class="keywordtype">void</span> <a class="code" href="../../d9/d14/class_fdo_array_807ff5b1db666e05f4077ccacfc3cd7e.htm#807ff5b1db666e05f4077ccacfc3cd7e">FdoArray&lt;T&gt;::Clear</a>()
<a name="l00273"></a>00273 {<span class="comment"></span>
<a name="l00274"></a>00274 <span class="comment">    /// since no memory reallocation we can avoid input/output of array class pointer</span>
<a name="l00275"></a>00275 <span class="comment"></span>    <a class="code" href="../../d9/d14/class_fdo_array_299ae788a34b75bb16967b03e28dc02e.htm#299ae788a34b75bb16967b03e28dc02e">SetSize</a>(<span class="keyword">this</span>, 0);
<a name="l00276"></a>00276 }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00279"></a>00279 <span class="keyword">inline</span>
<a name="l00280"></a><a class="code" href="../../d9/d14/class_fdo_array_299ae788a34b75bb16967b03e28dc02e.htm#299ae788a34b75bb16967b03e28dc02e">00280</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_299ae788a34b75bb16967b03e28dc02e.htm#299ae788a34b75bb16967b03e28dc02e">FdoArray&lt;T&gt;::SetSize</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 numElements)
<a name="l00281"></a>00281 {
<a name="l00282"></a>00282     array = (<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> *)<a class="code" href="../../df/d0a/class_fdo_array_helper_eccb520d4339d581ad808446366566fe.htm#eccb520d4339d581ad808446366566fe">FdoArrayHelper::SetSize</a>((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*) array, numElements, <span class="keyword">sizeof</span>(T));
<a name="l00283"></a>00283     <span class="keywordflow">return</span> array;
<a name="l00284"></a>00284 }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00287"></a>00287 <span class="keyword">inline</span>
<a name="l00288"></a><a class="code" href="../../d9/d14/class_fdo_array_3e0f3866df9037444f80645cab426716.htm#3e0f3866df9037444f80645cab426716">00288</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_3e0f3866df9037444f80645cab426716.htm#3e0f3866df9037444f80645cab426716">FdoArray&lt;T&gt;::SetAlloc</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 numElements)
<a name="l00289"></a>00289 {
<a name="l00290"></a>00290     array = (<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> *)<a class="code" href="../../df/d0a/class_fdo_array_helper_fb5b2d748d39e1bb692a46c4ab1ff40c.htm#fb5b2d748d39e1bb692a46c4ab1ff40c">FdoArrayHelper::SetAlloc</a>((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*) array, numElements, <span class="keyword">sizeof</span>(T));
<a name="l00291"></a>00291     <span class="keywordflow">return</span> array;
<a name="l00292"></a>00292 }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 <span class="comment">//</span>
<a name="l00295"></a>00295 <span class="comment">// Allocate some more memory for the array.</span>
<a name="l00296"></a>00296 <span class="comment">// If the given array is NULL, a new array of zero size </span>
<a name="l00297"></a>00297 <span class="comment">// but the requested allocation is returned.</span>
<a name="l00298"></a>00298 <span class="comment">// The returned array will always have at least one new</span>
<a name="l00299"></a>00299 <span class="comment">// free element allocated. Thus, passing atLeastThisMuch &lt; 1, </span>
<a name="l00300"></a>00300 <span class="comment">// while not an error, still results in some new storage.</span>
<a name="l00301"></a>00301 <span class="comment">//</span>
<a name="l00302"></a>00302 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00303"></a>00303 <span class="keyword">inline</span>
<a name="l00304"></a><a class="code" href="../../d9/d14/class_fdo_array_28dfbf133ca379bff53112cb0ed484d8.htm#28dfbf133ca379bff53112cb0ed484d8">00304</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * <a class="code" href="../../d9/d14/class_fdo_array_28dfbf133ca379bff53112cb0ed484d8.htm#28dfbf133ca379bff53112cb0ed484d8">FdoArray&lt;T&gt;::AllocMore</a>(<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> * array, FdoInt32 atLeastThisMuch, <span class="keywordtype">bool</span> exactly)
<a name="l00305"></a>00305 {
<a name="l00306"></a>00306     array = (<a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;T&gt;</a> *)<a class="code" href="../../df/d0a/class_fdo_array_helper_f112510b25197d201912233a672069b2.htm#f112510b25197d201912233a672069b2">FdoArrayHelper::AllocMore</a>((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*) array, atLeastThisMuch, exactly, <span class="keyword">sizeof</span>(T));
<a name="l00307"></a>00307     <span class="keywordflow">return</span> array;
<a name="l00308"></a>00308 }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00311"></a>00311 <span class="keyword">inline</span>
<a name="l00312"></a><a class="code" href="../../d9/d14/class_fdo_array_d650b64014b20414a531231a4815c201.htm#d650b64014b20414a531231a4815c201">00312</a> <span class="keywordtype">void</span> <a class="code" href="../../d9/d14/class_fdo_array_d650b64014b20414a531231a4815c201.htm#d650b64014b20414a531231a4815c201">FdoArray&lt;T&gt;::Dispose</a>()
<a name="l00313"></a>00313 {
<a name="l00314"></a>00314     <a class="code" href="../../df/d0a/class_fdo_array_helper_9887099f833bf46f31d944cbd2831ca4.htm#9887099f833bf46f31d944cbd2831ca4">FdoArrayHelper::DisposeOfArray</a>((<a class="code" href="../../db/de4/struct_fdo_array_helper_1_1_generic_array.htm">FdoArrayHelper::GenericArray</a>*) <span class="keyword">this</span>, <span class="keyword">sizeof</span>(T));
<a name="l00315"></a>00315 }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00318"></a>00318 <span class="keyword">inline</span>
<a name="l00319"></a><a class="code" href="../../d9/d14/class_fdo_array_9eaa32a3606bc8c5cefa04e2b4f10509.htm#9eaa32a3606bc8c5cefa04e2b4f10509">00319</a> <span class="keyword">const</span> T&amp; <a class="code" href="../../d9/d14/class_fdo_array_9eaa32a3606bc8c5cefa04e2b4f10509.htm#9eaa32a3606bc8c5cefa04e2b4f10509">FdoArray&lt;T&gt;::GetValue</a>(FdoInt32 i)<span class="keyword"> const </span>
<a name="l00320"></a>00320 <span class="keyword"></span>{
<a name="l00321"></a>00321     <span class="keywordflow">if</span> (i &gt;= <a class="code" href="../../d9/d14/class_fdo_array_bd3558080c3a0f16cf6037940eaeb37b.htm#bd3558080c3a0f16cf6037940eaeb37b">GetCount</a>() || i &lt; 0)
<a name="l00322"></a>00322         <span class="keywordflow">throw</span> <a class="code" href="../../db/dee/class_fdo_exception_c53d28ded380490e958e2b6fbc25477e.htm#c53d28ded380490e958e2b6fbc25477e">FdoException::Create</a>(<a class="code" href="../../db/dee/class_fdo_exception_0f9d229e51975e1ea886949e6ea83188.htm#0f9d229e51975e1ea886949e6ea83188">FdoException::NLSGetMessage</a>(<a class="code" href="../../df/d98/_exception_8h_277e2b8d4ea4e4c6ff7a7c1a37cafdd2.htm#277e2b8d4ea4e4c6ff7a7c1a37cafdd2">FDO_NLSID</a>(<a class="code" href="../../d9/d44/_fdo_message_8h_8b79671244237821b6ef70e575d56223.htm#8b79671244237821b6ef70e575d56223">FDO_5_INDEXOUTOFBOUNDS</a>)));
<a name="l00323"></a>00323 
<a name="l00324"></a>00324     <span class="keywordflow">return</span> *(this-&gt;<a class="code" href="../../d9/d14/class_fdo_array_0d786a95cee46b3f8d49173ed2d1e5dd.htm#0d786a95cee46b3f8d49173ed2d1e5dd">GetData</a>()+i); 
<a name="l00325"></a>00325 }
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00328"></a>00328 <span class="keyword">inline</span>
<a name="l00329"></a><a class="code" href="../../d9/d14/class_fdo_array_d17334f019e97ad8e39e1eee6b9fcd79.htm#d17334f019e97ad8e39e1eee6b9fcd79">00329</a> T&amp; <a class="code" href="../../d9/d14/class_fdo_array_9eaa32a3606bc8c5cefa04e2b4f10509.htm#9eaa32a3606bc8c5cefa04e2b4f10509">FdoArray&lt;T&gt;::GetValue</a>(FdoInt32 i) 
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331     <span class="keywordflow">if</span> (i &gt;= <a class="code" href="../../d9/d14/class_fdo_array_bd3558080c3a0f16cf6037940eaeb37b.htm#bd3558080c3a0f16cf6037940eaeb37b">GetCount</a>() || i &lt; 0)
<a name="l00332"></a>00332         <span class="keywordflow">throw</span> <a class="code" href="../../db/dee/class_fdo_exception_c53d28ded380490e958e2b6fbc25477e.htm#c53d28ded380490e958e2b6fbc25477e">FdoException::Create</a>(<a class="code" href="../../db/dee/class_fdo_exception_0f9d229e51975e1ea886949e6ea83188.htm#0f9d229e51975e1ea886949e6ea83188">FdoException::NLSGetMessage</a>(<a class="code" href="../../df/d98/_exception_8h_277e2b8d4ea4e4c6ff7a7c1a37cafdd2.htm#277e2b8d4ea4e4c6ff7a7c1a37cafdd2">FDO_NLSID</a>(<a class="code" href="../../d9/d44/_fdo_message_8h_8b79671244237821b6ef70e575d56223.htm#8b79671244237821b6ef70e575d56223">FDO_5_INDEXOUTOFBOUNDS</a>)));
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="keywordflow">return</span> *(this-&gt;<a class="code" href="../../d9/d14/class_fdo_array_0d786a95cee46b3f8d49173ed2d1e5dd.htm#0d786a95cee46b3f8d49173ed2d1e5dd">GetData</a>()+i); 
<a name="l00335"></a>00335 }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00338"></a>00338 <span class="keyword">inline</span>
<a name="l00339"></a><a class="code" href="../../d9/d14/class_fdo_array_2cc96c586a0cbbec01decdd2e7581f37.htm#2cc96c586a0cbbec01decdd2e7581f37">00339</a> <span class="keywordtype">void</span> <a class="code" href="../../d9/d14/class_fdo_array_2cc96c586a0cbbec01decdd2e7581f37.htm#2cc96c586a0cbbec01decdd2e7581f37">FdoArray&lt;T&gt;::SetValue</a>(FdoInt32 i, T newElement) 
<a name="l00340"></a>00340 {
<a name="l00341"></a>00341     <span class="keywordflow">if</span> (i &gt;= <a class="code" href="../../d9/d14/class_fdo_array_bd3558080c3a0f16cf6037940eaeb37b.htm#bd3558080c3a0f16cf6037940eaeb37b">GetCount</a>() || i &lt; 0)
<a name="l00342"></a>00342         <span class="keywordflow">throw</span> <a class="code" href="../../db/dee/class_fdo_exception_c53d28ded380490e958e2b6fbc25477e.htm#c53d28ded380490e958e2b6fbc25477e">FdoException::Create</a>(<a class="code" href="../../db/dee/class_fdo_exception_0f9d229e51975e1ea886949e6ea83188.htm#0f9d229e51975e1ea886949e6ea83188">FdoException::NLSGetMessage</a>(<a class="code" href="../../df/d98/_exception_8h_277e2b8d4ea4e4c6ff7a7c1a37cafdd2.htm#277e2b8d4ea4e4c6ff7a7c1a37cafdd2">FDO_NLSID</a>(<a class="code" href="../../d9/d44/_fdo_message_8h_8b79671244237821b6ef70e575d56223.htm#8b79671244237821b6ef70e575d56223">FDO_5_INDEXOUTOFBOUNDS</a>)));
<a name="l00343"></a>00343 
<a name="l00344"></a>00344     *(this-&gt;<a class="code" href="../../d9/d14/class_fdo_array_0d786a95cee46b3f8d49173ed2d1e5dd.htm#0d786a95cee46b3f8d49173ed2d1e5dd">GetData</a>()+i) = newElement;
<a name="l00345"></a>00345 }
<a name="l00346"></a>00346 <span class="comment"></span>
<a name="l00347"></a>00347 <span class="comment">/// \ingroup (typedefs)</span>
<a name="l00348"></a>00348 <span class="comment">/// \brief</span>
<a name="l00349"></a>00349 <span class="comment">/// Dynamic array of bytes (FdoByte).</span>
<a name="l00350"></a><a class="code" href="../../df/db1/group__typedefs_g778eb6391ff51ab9b108437f13c09c82.htm#g778eb6391ff51ab9b108437f13c09c82">00350</a> <span class="comment"></span><span class="keyword">typedef</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;FdoByte&gt;</a>   <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoByteArray</a>;
<a name="l00351"></a>00351 <span class="comment"></span>
<a name="l00352"></a>00352 <span class="comment">/// \ingroup (typedefs)</span>
<a name="l00353"></a>00353 <span class="comment">/// \brief</span>
<a name="l00354"></a>00354 <span class="comment">/// Dynamic array of doubles (FdoDouble).</span>
<a name="l00355"></a><a class="code" href="../../df/db1/group__typedefs_g4785ab2a288601ce85c14d1b9499e850.htm#g4785ab2a288601ce85c14d1b9499e850">00355</a> <span class="comment"></span><span class="keyword">typedef</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;FdoDouble&gt;</a> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoDoubleArray</a>;
<a name="l00356"></a>00356 <span class="comment"></span>
<a name="l00357"></a>00357 <span class="comment">/// \ingroup (typedefs)</span>
<a name="l00358"></a>00358 <span class="comment">/// \brief</span>
<a name="l00359"></a>00359 <span class="comment">/// Dynamic array of integers (FdoInt32).</span>
<a name="l00360"></a><a class="code" href="../../df/db1/group__typedefs_ga3b18761030ddd7d27f142e49e9a5e35.htm#ga3b18761030ddd7d27f142e49e9a5e35">00360</a> <span class="comment"></span><span class="keyword">typedef</span> <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoArray&lt;FdoInt32&gt;</a>  <a class="code" href="../../d9/d14/class_fdo_array.htm">FdoIntArray</a>;
<a name="l00361"></a>00361 <span class="comment">//typedef FdoArray&lt;FdoString&gt; FdoStringArray;</span>
<a name="l00362"></a>00362 <span class="preprocessor">#endif</span>
<a name="l00363"></a>00363 <span class="preprocessor"></span>
<a name="l00364"></a>00364 
</pre></div><!-- footer.html -->
		<hr>
		<table width="100%"  border="0">
			<tr>
				<td>Comments or suggestions? Send us <a href="mailto:isd.docs@autodesk.com&subject=FDO%20API%20documentation">feedback</a>.</td>
				<!-- The logo can go in another cell, when we get one -->			
			</tr>
		</table>
	</body>
</html>
