<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <title>Establishing a Connection</title>
      <link rel="stylesheet" type="text/css" href="../style/cpm.css">
      <link rel="stylesheet" type="text/css" href="../style/isd.css">
      <link rel="stylesheet" type="text/css" href="../style/isd_html_standard.css"><script type="text/javascript" src="../scripts/ac_common.js"></script><script type="text/javascript" src="../scripts/ac.strings.js"></script><script type="text/javascript" src="../scripts/acmap.js"></script><script type="text/javascript" src="../scripts/ac.acad_ak.js"></script><script language="javascript">
            function hideInfo() {
                info = document.getElementById('infoline');
                info.innerHTML = ' ';
                info.style.visibility = 'hidden';
            }
            function showInfo(title) {
                info = document.getElementById('infoline');
                info.innerHTML = title;
                info.style.visibility='visible';
            }
        </script><meta type="description" content="Establishing a Connection">
      <meta type="keywords" content="">
      <meta type="topic-type" content="concept">
   </head>
   <body onLoad="javascript:initFrame('WS7106c181349dd8d0121cc40105df83c831-7fff.htm','23'); javascript:initPage('Establishing a Connection','FDO Developer\'s Guide'); javascript:highlightSearchResults(); top.setPageLoaded(1);" height="100%">
      <div class="head">
         <div class="head-block">
            <div class="nav-group">
               <!--browse buttons-->
               <div class="browse">
                  <nobr>
                     <div id="homeTitle" style="display:none">Home: FDO Developer's Guide</div><a href="WS73099cc142f487551d92abb10dc573c45d-7fdf.htm" target="content" class="headNavLink" onmouseover="showInfo(document.getElementById('homeTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-home-xp.gif" border="0"></a><span class="home-button-separator">&nbsp;</span><div id="prevTitle" style="display:none">Connection Semantics</div><a href="WS7106c181349dd8d0121cc40105df83c831-8000.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('prevTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-prev-xp.gif" border="0"></a><div id="parentTitle" style="display:none">Establishing a Connection</div><a href="WSfacf1429558a55de8821c21057fbebc2b2a0.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('parentTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-up-xp.gif" border="0"></a><div id="nextTitle" style="display:none">Capabilities</div><a href="WSfacf1429558a55de8821c21057fbebc2b-ac2.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('nextTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-next-xp.gif" border="0"></a></nobr>
               </div>
               <!--end browse buttons-->
            </div>
            <div class="button-info"><span id="infoline">&nbsp;</span></div>
            <div class="ancestry"><a href="WSfacf1429558a55de8821c21057fbebc2b2a0.htm">Establishing a Connection</a>&nbsp;&gt;&nbsp;
            </div>
            <div class="head-text"><span>Establishing a Connection</span></div>
         </div>
      </div>
      <div class="head-margin">&nbsp;</div>
      <div style="line-height: 0pt">&nbsp;</div>
      <div class="head-margin">&nbsp;</div><span style="display:none"><a name="WS7106c181349dd8d0121cc40105df83c831-7fff"></a></span>
      <!--Body--><p><span style="display:none"><a name="WS73099cc142f4875520a47a10f192cc9dc-711e"></a></span>As
         mentioned in a previous section, <span class="hypertext"><span class="char_link"><a href="WS7106c181349dd8d0121cc40105df83c831-8000.htm">Connection Semantics</a></span></span>,
         the FDO API uses a provider to connect to a data store and its underlying
         data source technology. These data source technologies must be installed
         and configured. Certain values generated during data source installation
         and configuration are used as arguments during the connection process.
         Because the FDO API does not provide any methods to automate the
         collection and presentation of these configuration values, either
         the application developer must request the user to input these configuration
         values during the connection process, or the application developer
         can provide an application configuration interface, which would
         populate the application with the container configuration values
         and thus allow the user to choose them from lists.
      </p>
      <div>
         <div class="note-note"><span class="label">Note</span>For more information about
            connecting, see <span class="bookTitle">The Essential FDO</span>.
         </div>
      </div><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b2bd"></a></span><p class="list-intro"><span style="display:none"><a name="WS73099cc142f487555e01641096cb1c9da-7e76"></a></span>A connection
         can be made in either one or two steps:
      </p>
      <ul>
         <li><em class="strong">One-step
               connection. </em>If the user sets the required connection
            properties and calls the connection object’s Open() method once,
            the returned state is FdoConnectionState_Open, no additional information
            is needed.
         </li>
         <li><em class="strong">Two-step
               connection. </em>If the user sets the required connection
            properties and calls the connection object’s Open() method, the
            returned state is FdoConnectionState_Pending, additional information
            is needed to complete the connection. In this case, the first call
            to Open() has resulted in the retrieval of a list of values for
            a property that becomes a required property for the second call
            to the Open() method. After the user has selected one of the values
            in the list, the second call to Open() should result in FdoConnectionState_Open.
         </li>
      </ul>
      <p><span style="display:none"><a name="WS73099cc142f4875520a47a10f192cc9dc-711d"></a></span>Connecting to a data store by way of the MySQL
         or the ArcSDE provider, for example, can be done in either one or
         two steps. In the first step, the data store parameter is not required.
         If the user does not give the data store parameter a value, the
         FDO will retrieve the list of data store values from the data source
         so that the user can choose from them during the second step. Otherwise
         the user can give the data store a value in the first step, and assuming
         that the value is valid, the connection will be completed in one step.
      </p>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-617a"></a></span>For the purpose of this example, let’s assume
         that the user has installed MySQL on his local machine. During the
         installation he was prompted to assign a password to the system
         administrator account whose name is ‘root’. He set the password
         to ‘test’.
      </p>
      <p><span style="display:none"><a name="WS73099cc142f4875520a47a10f192cc9dc-711c"></a></span>The following steps are preliminary to establishing
         a connection:
      </p>
      <!--OList--><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b2b7"></a></span><ol type="1" start="1">
         <li>Get
            the list of providers. 
            <div class="codeBlock"><pre class="codeLine">FdoPtr&lt;FdoProviderRegistry&gt; registry = (FdoProviderRegistry *)FdoFeatureAccessManager::GetProviderRegistry();</pre><pre class="codeLine">FdoProviderCollection * providers = registry-&gt;GetProviders();</pre></div>
         </li>
         <li>Get
            the display names for all of the providers in the registry. An example
            of a display name might be <span class="uis-unspecified">OSGeo FDO Provider for MySQL</span>.
            <div class="codeBlock"><pre class="codeLine">FdoStringP displayName;</pre><pre class="codeLine">FdoStringP internalName;</pre><pre class="codeLine">FdoPtr&lt;FdoProvider&gt; provider;</pre><pre class="codeLine">int count = providers-&gt;GetCount();</pre><pre class="codeLine">for(int i = 0; i &lt; count; i++) {</pre><pre class="codeLine"> &nbsp;provider = providers-&gt;GetItem(i);</pre><pre class="codeLine"> &nbsp;internalName = provider-&gt;GetName();</pre><pre class="codeLine"> &nbsp;displayName = provider-&gt;GetDisplayName();</pre><pre class="codeLine"> &nbsp;// add displayName to your list</pre><pre class="codeLine">}</pre></div>
         </li>
         <li>Use
            the display names to create a menu list, from which the user will
            select from when making a connection.
         </li>
      </ol>
      <p><span style="display:none"><a name="WS73099cc142f4875520a47a10f192cc9dc-711b"></a></span>After the user initiates a provider display
         name from the connection menu, do the following:
      </p>
      <!--OList--><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b2b8"></a></span><ol type="1" start="1">
         <li>Loop
            through the providers in the registry until you match the display
            name selected by the user from the connection menu with a provider
            display name in the registry and retrieve the internal name for
            that provider. An example of an internal could be <span class="uis-unspecified">OSGeo.MySQL.3.2</span>. 
            <div class="codeBlock"><pre class="codeLine">FdoStringP internalName = provider-&gt;GetName();</pre></div>
         </li>
         <li>Get
            an instance of the connection manager.
            <div class="codeBlock"><pre class="codeLine">FdoPtr&lt;FdoConnectionManager&gt; connectMgr = (FdoConnectionManager *)FdoFeatureAccessManager::GetConnectionManager();</pre></div>
         </li>
         <li>Call
            the manager’s CreateConnection() method using the provider internal
            name as an argument to obtain a connection object.
            <div class="codeBlock"><pre class="codeLine">FdoPtr&lt;FdoIConnection&gt; fdoConnection = connectMgr-&gt;CreateConnection(L”OsGeo.MySQL.3.2”);</pre></div>
         </li>
         <li>Obtain
            a connection info object by calling the connection object’s GetConnectionInfo()
            method.
            <div class="codeBlock"><pre class="codeLine">FdoPtr&lt;FdoIConnectionInfo&gt; info = fdoConnection-&gt;GetConnectionInfo();</pre></div>
         </li>
         <li>Obtain
            a connection property dictionary object by calling the connection
            info object’s GetConnection Properties() method and use this dictionary
            to construct a dialog box requesting connection information from
            the user.
            <div class="codeBlock"><pre class="codeLine">FdoPtr&lt;FdoIConnectionPropertyDictionary&gt; ConnDict = info-&gt;GetConnectionProperties();</pre></div>
         </li>
         <li>Get
            a list of connection property names from the dictionary and use
            this list to get information about the property. The following code loops
            through the dictionary getting all of the possible information. 
            <div>
               <div class="note-note"><span class="label">Note</span>An attempt to get the
                  values of an enumerable property is made only if the property is
                  required.
               </div>
            </div>
            <div class="codeBlock"><pre class="codeLine">FdoInt32 count = 0;</pre><pre class="codeLine">FdoString ** names = NULL;</pre><pre class="codeLine">FdoStringP name;</pre><pre class="codeLine">FdoStringP localname;</pre><pre class="codeLine">FdoStringP val;</pre><pre class="codeLine">FdoStringP defaultVal;</pre><pre class="codeLine">bool isRequired = false;</pre><pre class="codeLine">bool isProtected = false;</pre><pre class="codeLine">bool isFilename = false;</pre><pre class="codeLine">bool isFilepath = false;</pre><pre class="codeLine">bool isDatastorename = false;</pre><pre class="codeLine">bool isEnumerable = false;</pre><pre class="codeLine">FdoInt32 enumCount = 0;</pre><pre class="codeLine">FdoString ** enumNames = NULL;</pre><pre class="codeLine">FdoStringP enumName;</pre><pre class="codeLine">names = ConnDict-&gt;GetPropertyNames(count);</pre><pre class="codeLine">for(int i = 0; i &lt; count; i++) {</pre><pre class="codeLine"> &nbsp;name = names[i];</pre><pre class="codeLine"> &nbsp;val = dict-&gt;GetProperty(name);</pre><pre class="codeLine"> &nbsp;defaultVal = dict-&gt;GetPropertyDefault(name);</pre><pre class="codeLine"> &nbsp;localname = dict-&gt;GetLocalizedName(name);</pre><pre class="codeLine"> &nbsp;isRequired = dict-&gt;IsPropertyRequired(name);</pre><pre class="codeLine"> &nbsp;isProtected = dict-&gt;IsPropertyProtected(name);</pre><pre class="codeLine"> &nbsp;isFilename = dict-&gt;IsPropertyFileName(name);</pre><pre class="codeLine"> &nbsp;isFilepath = dict-&gt;IsPropertyFilePath(name);</pre><pre class="codeLine"> &nbsp;isDatastorename = dict-&gt;IsPropertyDatastoreName(name);</pre><pre class="codeLine"> &nbsp;isEnumerable = dict-&gt;IsPropertyEnumerable(name);</pre><pre class="codeLine"> &nbsp;if (isEnumerable) {</pre><pre class="codeLine"> &nbsp;&nbsp;&nbsp;if (isRequired) {</pre><pre class="codeLine"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enumNames = dict-&gt;EnumeratePropertyValues(name, enumCount);</pre><pre class="codeLine"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int j = 0; j &lt; enumCount; j++) {</pre><pre class="codeLine"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enumName = enumNames[j];</pre><pre class="codeLine"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><pre class="codeLine"> &nbsp;&nbsp;&nbsp;}</pre><pre class="codeLine"> &nbsp;}</pre><pre class="codeLine">}</pre></div>
         </li>
         <li>Use
            the GetLocalizedName method to obtain the name of the property to
            present to the user. Calls to dictionary methods need the value of
            the internal name in the string array returned by GetPropertyNames(). So
            when the user selects the localized name in the menu, the program must
            map the localized name to the internal name.
         </li>
         <li>Use
            the IsPropertyRequired method to determine whether to mark the line
            as either required or optional; the dialog box handler should not
            permit the user to click OK in the dialog box unless a required
            field has a value.
         </li>
         <li>Use
            the IsPropertyProtected method to determine whether the dialog box
            handler should process the field value as protected data, for example,
            a password.
         </li>
         <li>Use
            the IsPropertyEnumerable and IsRequired methods to determine whether
            to call the EnumeratePropertyValues method to get a list of valid
            values.
            <div>
               <div class="note-note"><span class="label">Note</span>Call the EnumeratePropertyValues
                  method only if both methods return true. Otherwise be prepared to
                  catch an exception if there is no pending connection. The assumption
                  is that a connection exists and the program is retrieving values
                  from the data store.
               </div>
            </div>
         </li>
      </ol>
      <p><span style="display:none"><a name="WS73099cc142f4875520a47a10f192cc9dc-711a"></a></span>As shown in the code lines above, the EnumeratePropertyValues method
         takes a property name and an updates integer argument and returns a
         string array. The updates integer will say how many values are in
         the returned array. Present the list of choices to the user.
      </p>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-6179"></a></span>If the property is not enumerable, present the
         values returned by either the GetProperty or GetPropertyDefault
         methods to the user.
      </p>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-6178"></a></span>Now that the user has seen the set of properties
         in the dictionary, s/he can set the required properties. A property
         is set by calling the dictionary’s SetProperty method. The MySQL
         connection property names are Username, Password, Service, and DataStore.
         The dictionary tells us that Username, Password, and Service are
         required properties and that DataStore is not required. Let’s connect
         to the MySQL as root. <span class="code"></span></p>
      <div class="codeBlock"><pre class="codeLine">ConnDict-&gt;SetProperty(L”Username”, L”root”);</pre><pre class="codeLine">ConnDict-&gt;SetProperty(L”Password”, L”test”);</pre><pre class="codeLine">ConnDict-&gt;SetProperty(L”Service”, L”localhost”);</pre></div>
      <div>
         <div class="note-note"><span class="label">Note</span><span class="code">fdoconnection-&gt;GetConnectionString()</span> returns <span class="code">Username=root;Password=test;Service=localhost;</span>. <span class="code">fdoconnection-&gt;SetConnectionString(L”Username=root;Password=test;Service=localhost;”);</span> would
            set the connection properties to the same values as the three calls
            above to the connection dictionary’s SetProperty() method.
         </div>
      </div>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-6177"></a></span>Open the connection.
      </p>
      <div class="codeBlock"><pre class="codeLine">FdoConnectionState state = fdoConnection-&gt;Open();</pre></div>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-6176"></a></span>The value of state is FdoConnectionState_Pending.
         An examination of the connection dictionary will reveal that the
         DataStore property is now required.
      </p>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-6175"></a></span>When the user checks the command capabilities,
         he discovers that he can create a data store.
      </p>
      <div class="codeBlock"><pre class="codeLine">FdoPtr&lt;FdoICommandCapabilities&gt; commandCapabilities = fdoConnection-&gt;GetCommandCapabilities();</pre><pre class="codeLine">bool bSupportsCreateDatastore = false;</pre><pre class="codeLine">FdoInt32 numCommands;</pre><pre class="codeLine">FdoIn32 * commands = commandCapabilities-&gt;GetCommands(numCommands);</pre><pre class="codeLine">for(int i = 0; i &lt; numCommands; i++) {</pre><pre class="codeLine"> &nbsp;switch(commands[i]) {</pre><pre class="codeLine"> &nbsp;&nbsp;&nbsp;case FdoCommandType_CreateDataStore : bSupportsCreateDatastore = true;</pre><pre class="codeLine"> &nbsp;}</pre><pre class="codeLine">}</pre></div>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-6174"></a></span>He can use the pending connection to MySQL to
         create the datastore. Use the connection object to create the FdoICreateDataStore
         command object. Use the command object to create the FdoIDataStorePropertyDictionary
         object and find out from this object what properties you must define. Use
         the dictionary object to set the required properties and then execute
         the command to create the ‘fdo_user’ data store. The only required
         property is DataStore.
      </p>
      <div>
         <div class="note-note"><span class="label">Note</span>The FdoIDataPropertyDictionary
            and the FdoIConnectionPropertyDictionary classes are both derived
            from FdoIPropertyDictionary. The code used above to access the FdoIConnectionPropertyDictionary
            object works for the FdoIDataPropertyDictionary.
         </div>
      </div>
      <div class="codeBlock"><pre class="codeLine">FdoPtr&lt;FdoICreateDataStore&gt; createDataStoreCmd = dynamic_cast&lt;FdoICreateDataStore *&gt; (fdoConnection-&gt;CreateCommand(FdoCommandType_CreateDataStore));</pre><pre class="codeLine">FdoPtr&lt;FdoIDataStorePropertyDictionary&gt; createDsDict = createDataStoreCmd-&gt;GetDataStoreProperties();</pre><pre class="codeLine">createDsDict-&gt;SetProperty(L”DataStore”, L”fdo_user”);</pre><pre class="codeLine">createDataStoreCmd-&gt;Execute();</pre></div>
      <p><span style="display:none"><a name="WS1a9193826455f5ff104d7f510f19418261-6173"></a></span>Now use the connection property dictionary to
         set the DataStore property to ‘fdo_user’ and call the Open() method
         on the connection object. This method should return FdoConnectionState_Open.
      </p><br></body>
</html>