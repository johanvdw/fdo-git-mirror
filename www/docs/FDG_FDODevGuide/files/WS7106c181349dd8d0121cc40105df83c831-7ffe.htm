<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <title>Connection Example</title>
      <link rel="stylesheet" type="text/css" href="../style/cpm.css">
      <link rel="stylesheet" type="text/css" href="../style/isd.css">
      <link rel="stylesheet" type="text/css" href="../style/isd_html_standard.css"><script type="text/javascript" src="../scripts/ac_common.js"></script><script type="text/javascript" src="../scripts/ac.strings.js"></script><script type="text/javascript" src="../scripts/acmap.js"></script><script type="text/javascript" src="../scripts/ac.acad_ak.js"></script><script language="javascript">
            function hideInfo() {
                info = document.getElementById('infoline');
                info.innerHTML = 'Â ';
                info.style.visibility = 'hidden';
            }
            function showInfo(title) {
                info = document.getElementById('infoline');
                info.innerHTML = title;
                info.style.visibility='visible';
            }
        </script><meta type="description" content="Connection Example">
      <meta type="keywords" content="">
      <meta type="topic-type" content="concept">
   </head>
   <body onLoad="javascript:initFrame('WS7106c181349dd8d0121cc40105df83c831-7ffe.htm','23'); javascript:highlightSearchResults(); top.setPageLoaded(1);" height="100%">
      <!--
                            Name = Topic;
                            Class =  CPM-Topic ISD-Topic ;
                            Url = WS7106c181349dd8d0121cc40105df83c831-7ffe.htm-->
      <div class="head">
         <div class="head-block">
            <div class="nav-group">
               <!--browse buttons-->
               <div class="browse">
                  <nobr>
                     <div id="homeTitle" style="display:none">Home: FDO Developer's Guide</div><a href="WS73099cc142f487551d92abb10dc573c45d-7fdf.htm" target="content" class="headNavLink" onmouseover="showInfo(document.getElementById('homeTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-home-xp.gif" border="0"></a><span class="home-button-separator">&nbsp;</span><div id="prevTitle" style="display:none">Establishing a Connection</div><a href="WS7106c181349dd8d0121cc40105df83c831-7fff.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('prevTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-prev-xp.gif" border="0"></a><div id="parentTitle" style="display:none">Establishing a Connection</div><a href="WSfacf1429558a55de8821c21057fbebc2b2a0.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('parentTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-up-xp.gif" border="0"></a><div id="nextTitle" style="display:none">Capabilities</div><a href="WSfacf1429558a55de8821c21057fbebc2b-ac2.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('nextTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-next-xp.gif" border="0"></a></nobr>
               </div>
               <!--end browse buttons-->
            </div>
            <div class="button-info"><span id="infoline">&nbsp;</span></div>
            <div class="ancestry"><a href="WSfacf1429558a55de8821c21057fbebc2b2a0.htm">Establishing a Connection</a>&nbsp;&gt;&nbsp;
            </div>
            <div class="head-text"><span>Connection Example</span></div>
         </div>
      </div>
      <div class="head-margin">&nbsp;</div>
      <div style="line-height: 0pt">&nbsp;</div>
      <div class="head-margin">&nbsp;</div><span style="display:none"><a name="WS7106c181349dd8d0121cc40105df83c831-7ffe"></a></span>
               
               
      <!--Body-->
                  
      <p>
                        
                        The
         following example demonstrates how to establish a connection. The connection
         is contained within one class, which has the following four public
         methods:
      </p>
                  
      <!--UList--><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b2be"></a></span>
                     
      <ul>
         <li>void
            PopulateConnectionMenu(Menu * connectMenu); 
         </li>
         <li>GisString
            * MapProviderMenuNameToInternalName(GisString * menuName); 
         </li>
         <li>int
            GetConnectionPropertyValues(FdoIConnectionPropertyDictionary *dictionary,
            Dialog * connectDialog); 
         </li>
         <li>int
            ConnectToProvider(GisString * providerMenuName); 
         </li>
      </ul>
                     
                     
                     
                  
                  
      <p>This class also has the following three private
         data members:
      </p>
                  
      <!--UList--><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b2bf"></a></span>
                     
      <ul>
         <li>GisPtr&lt;IProviderRegistry&gt;
            registry; 
         </li>
         <li>GisPtr&lt;IConnectionManager&gt;
            connectionManager; 
         </li>
         <li>GisPtr&lt;FdoIConnection&gt;
            connection; 
         </li>
      </ul>
                     
                     
                  
                  
      <p>The registry and connectionManager variables
         are initialized during object creation. The connection variable
         is given a value by the connection operation.
      </p>
                  
      <div class="codeBlock">
                        <pre class="codeLine">//get the display names for all of the providers in the registry</pre>
                        <pre class="codeLine">//and build a connection menu</pre>
                        <pre class="codeLine">void</pre>
                        <pre class="codeLine">ExerciseFdoUtilities::PopulateConnectionMenu(Menu * connectMenu) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;const FdoProviderCollection * providers;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisPtr&lt;FdoProvider&gt; provider;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;try {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;providers = registry-&gt;GetProviders ();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisInt32 providerCount = providers-&gt;GetCount();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisString * providerDisplayName = NULL;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; providerCount; i++) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;provider = providers-&gt;GetItem (i);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;providerDisplayName = provider-&gt;GetDisplayName();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// add providerDisplayName to menu</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectMenu-&gt;Add(providerDisplayName);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;catch (GisException* ex) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;// exception handling</pre>
                        <pre class="codeLine">&nbsp;&nbsp;ex-&gt;Release();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">}</pre>
                        <pre class="codeLine">// user selects a provider from the connection menu</pre>
                        <pre class="codeLine">// loop through the registry to match the provider name selected</pre>
                        <pre class="codeLine">// by the user with the display names in the registry</pre>
                        <pre class="codeLine">// once you get a match, get the provider internal name</pre>
                        <pre class="codeLine">GisString *</pre>
                        <pre class="codeLine">ExerciseFdoUtilities::MapProviderMenuNameToInternalName(</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisString * menuName) {</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;try {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;const FdoProviderCollection * providers =</pre>
                        <pre class="codeLine">registry-&gt;GetProviders();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisPtr&lt;FdoProvider&gt; provider;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisString * providerInternalName = NULL;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisInt32 providerCount = providers-&gt;GetCount();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;for(int i = 0; i &lt; providerCount; i++) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;provider = providers-&gt;GetItem(i);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wcsicmp(menuName,</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;provider-&gt;GetDisplayName()) == 0) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;providerInternalName = provider-&gt;GetName();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;if (providerInternalName == NULL) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// error handling</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;} else {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return providerInternalName;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;catch (GisException* ex) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// exception handling</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;ex-&gt;Release();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;return NULL;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">}</pre>
                        <pre class="codeLine">// map the provider menu name to an internal name</pre>
                        <pre class="codeLine">// use the connection manager to make a connection object using</pre>
                        <pre class="codeLine">// the provider internal name</pre>
                        <pre class="codeLine">// get the connection property dictionary from the connection</pre>
                        <pre class="codeLine">// object use the dictionary to construct a dialog, which asks</pre>
                        <pre class="codeLine">// the user to input values for connection properties specific</pre>
                        <pre class="codeLine">// to the provider (see the comments in the </pre>
                        <pre class="codeLine">// GetConnectionProperties method)</pre>
                        <pre class="codeLine">// use the values given by the user to set the properties in the</pre>
                        <pre class="codeLine">// dictionary</pre>
                        <pre class="codeLine">// open the connection</pre>
                        <pre class="codeLine">// if the connection state returned by the open operation is</pre>
                        <pre class="codeLine">// pending, then ask the user for additional connection property</pre>
                        <pre class="codeLine">// values and call open again</pre>
                        <pre class="codeLine">int</pre>
                        <pre class="codeLine">ExerciseFdoUtilities::ConnectToProvider(GisString * providerMenuName) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisString * providerInternalName = MapProviderMenuNameToInternalName(providerMenuName);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;if (providerInternalName == NULL) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;return 1;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisPtr&lt;FdoIConnectionInfo&gt; connectionInfo;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisPtr&lt;FdoIConnectionPropertyDictionary&gt; connectionPropertyDictionary;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;Dialog * connectDialog = new Dialog();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;FdoConnectionState connectState;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;int retval = 0;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;try {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;connection = connectionManager-&gt;CreateConnection(providerInternalName);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;connectionInfo = connection-&gt;GetConnectionInfo();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;connectionPropertyDictionary = connectionInfo-&gt;GetConnectionProperties();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;retval = GetConnectionPropertyValues(connectionPropertyDictionary, connectDialog);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;if (retval == 0) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectState = connection-&gt;Open();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (connectState) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case FdoConnectionState_Busy: break;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case FdoConnectionState_Closed: break;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case FdoConnectionState_Open : break;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case FdoConnectionState_Pending : </pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = GetConnectionPropertyValues(connectionPropertyDictionary, connectDialog);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (retval == 0) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectState = connection-&gt;Open();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default : </pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GisException * ex = GisException::Create(L"connection-&gt;Open() returned unknown connection state");</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw ex;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;catch (GisException * ex){</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// error handling</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;ex-&gt;Release();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;if (connection) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection-&gt;Close();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;} </pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;return 1;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;if (connectState != FdoConnectionState_Open) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// error handling</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;return 1;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;return 0;</pre>
                        <pre class="codeLine">}</pre>
                        <pre class="codeLine">// this method constructs the dialog the user fills in with</pre>
                        <pre class="codeLine">// values for the connection properties</pre>
                        <pre class="codeLine">// if the user fills in all the required fields and does not</pre>
                        <pre class="codeLine">// cancel, the method sets the property values in the property </pre>
                        <pre class="codeLine">// dictionary once that is done, the connection can be opened</pre>
                        <pre class="codeLine">int</pre>
                        <pre class="codeLine">ExerciseFdoUtilities::GetConnectionPropertyValues(</pre>
                        <pre class="codeLine">FdoIConnectionPropertyDictionary</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;*dictionary, Dialog * dialog) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;int retval = 0;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;// get the list of property names in the dictionary</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisString ** propertyNames = NULL;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisInt32 nameCount = 0;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;propertyNames = dictionary-&gt;GetPropertyNames(nameCount);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;GisString * propertyName = NULL;</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;// loop through the property names adding each property to the</pre>
                        <pre class="codeLine">&nbsp;&nbsp;// dialog</pre>
                        <pre class="codeLine">&nbsp;&nbsp;for(int i = 0; i &lt; nameCount; i++) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// get the property name</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;propertyName = propertyNames[i];</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// get the label to be used for the property input line </pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// in the dialog</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisString * propertyLabel = dictionary-&gt;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetLocalizedName(propertyName);</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// determine whether to make the entry line required </pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// or optional</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;bool IsRequired = dictionary-&gt;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IsPropertyRequired(propertyName);</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// determine whether the user input has to be handled in a</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// secure way</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;bool IsProtected = dictionary-&gt;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IsPropertyProtected(propertyName);</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// get the actual and default values for the property</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// these could be the empty string, that is, (GisString *)ââ</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisString * actualValue = dictionary-&gt;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetProperty(propertyName);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisString * defaultValue = dictionary-&gt;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetPropertyDefault(propertyName);</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// determine whether the property values are enumerable</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;bool IsEnumerable = dictionary-&gt;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IsPropertyEnumerable(propertyName);</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisString ** EnumeratedValues = NULL;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisInt32 numValues = 0;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;if (IsEnumerable) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// get the list of valid values</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EnumeratedValues = dictionary-&gt;EnumeratePropertyValues</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(propertyName, numValues);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// the dictionary entry for this property could possibly be</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// populatetd by a subsequent call to the Open() method</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;bool greyOut = false;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;if (IsEnumerable &amp;&amp; numValues == 0) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;greyOut = true;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// the values are enumerable and there is only one</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;else if (IsEnumerable &amp;&amp; numValues == 1) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// add the line to the dialog,</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// setting the spin box value to EnumeratedValues[0]</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// the values are enumerable and there is more than one</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;else if (IsEnumerable &amp;&amp; numValues &gt; 1) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// add the line to the dialog,</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// setting the spin box value to the actualValue if </pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// not empty, or setting it to the defaultValue if </pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// valid and not empty, or setting it to one of the</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// enumerated values</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// set the field to the actual value if not empty</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;else if ( wcscmp(actualValue, L"") != 0) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// add line to dialog</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;// set the field to whatever is the default value</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;else {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// add line to dialog</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;// blocks until user clicks ok or cancel in dialog</pre>
                        <pre class="codeLine">&nbsp;&nbsp;// returns 0 if user clicks ok and all required input is </pre>
                        <pre class="codeLine">&nbsp;&nbsp;// there and valid if user doesn't fill in required fields,</pre>
                        <pre class="codeLine">&nbsp;&nbsp;// dialog persists until user does so or presses cancel</pre>
                        <pre class="codeLine">&nbsp;&nbsp;// returns positive if user cancels</pre>
                        <pre class="codeLine">&nbsp;&nbsp;retval = dialog-&gt;expose();</pre>
                        <pre class="codeLine">&nbsp;&nbsp;if (retval == 0) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;GisString * value = NULL;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;for(int i = 0; i &lt; nameCount; i++) {</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// get the property name</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;propertyName = propertyNames[i];</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// get the value input by the user for this property</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = dialog-&gt;GetValue(propertyName);</pre>
                        <pre class="codeLine"></pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dictionary-&gt;SetProperty(propertyName, value);</pre>
                        <pre class="codeLine">&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;}</pre>
                        <pre class="codeLine">&nbsp;&nbsp;return retval;</pre>
                        <pre class="codeLine">}</pre>
                     </div>
                  
      <p></p>
               
            
      <!---->
      <!--See also-->
      <div class="footer-block"><a href="javascript:doComments('../html/ac.cmtdialog.htm');"><span class="comments-link">Comments?</span></a></div><br></body>
</html>