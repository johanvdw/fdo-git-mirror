<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <title>Operational Concepts</title>
      <link rel="stylesheet" type="text/css" href="../style/cpm.css">
      <link rel="stylesheet" type="text/css" href="../style/isd.css">
      <link rel="stylesheet" type="text/css" href="../style/isd_html_standard.css"><script type="text/javascript" src="../scripts/ac_common.js"></script><script type="text/javascript" src="../scripts/ac.strings.js"></script><script type="text/javascript" src="../scripts/acmap.js"></script><script type="text/javascript" src="../scripts/ac.acad_ak.js"></script><script language="javascript">
            function hideInfo() {
                info = document.getElementById('infoline');
                info.innerHTML = ' ';
                info.style.visibility = 'hidden';
            }
            function showInfo(title) {
                info = document.getElementById('infoline');
                info.innerHTML = title;
                info.style.visibility='visible';
            }
        </script><meta type="description" content="Operational Concepts">
      <meta type="keywords" content="">
      <meta type="topic-type" content="concept">
   </head>
   <body onLoad="javascript:initFrame('WS7106c181349dd8d016672d6105df83c6e7-7ffe.htm','14'); javascript:highlightSearchResults(); top.setPageLoaded(1);" height="100%">
      <!--
                            Name = Topic;
                            Class =  CPM-Topic ISD-Topic ;
                            Url = WS7106c181349dd8d016672d6105df83c6e7-7ffe.htm-->
      <div class="head">
         <div class="head-block">
            <div class="nav-group">
               <!--browse buttons-->
               <div class="browse">
                  <nobr>
                     <div id="homeTitle" style="display:none">Home: FDO Developer's Guide</div><a href="WS73099cc142f487551d92abb10dc573c45d-7fdf.htm" target="content" class="headNavLink" onmouseover="showInfo(document.getElementById('homeTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-home-xp.gif" border="0"></a><span class="home-button-separator">&nbsp;</span><div id="prevTitle" style="display:none">Data Concepts</div><a href="WS7106c181349dd8d016672d6105df83c6e7-7fff.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('prevTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-prev-xp.gif" border="0"></a><div id="parentTitle" style="display:none">FDO Concepts</div><a href="WSfacf1429558a55de8821c21057fbebc2b-b81.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('parentTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-up-xp.gif" border="0"></a><div id="nextTitle" style="display:none">Development Practices</div><a href="WSfacf1429558a55de8821c21057fbebc2b-82c.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('nextTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-next-xp.gif" border="0"></a></nobr>
               </div>
               <!--end browse buttons-->
            </div>
            <div class="button-info"><span id="infoline">&nbsp;</span></div>
            <div class="ancestry"><a href="WSfacf1429558a55de8821c21057fbebc2b-b81.htm">FDO Concepts</a>&nbsp;&gt;&nbsp;
            </div>
            <div class="head-text"><span>Operational Concepts</span></div>
         </div>
      </div>
      <div class="head-margin">&nbsp;</div>
      <div style="line-height: 0pt">&nbsp;</div>
      <div class="head-margin">&nbsp;</div><span style="display:none"><a name="WS7106c181349dd8d016672d6105df83c6e7-7ffe"></a></span>
               
               
      <!--Body-->
                  
      <p>The concepts that are defined in this section
         relate to the FDO operations used to manage and manipulate data.
      </p>
                  
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-b10"></a></span>
                        
         <p class="section_title_h1"><a name="TOC_ENTRY__d0e1293"></a>What Is a Command?
         </p>
                        
         <p>
                              In
            FDO, the application uses a command to select and update features,
            define new types of feature classes, lock features, version features,
            and perform some analysis of features. Each Command object executes
            a specific type of command against the underlying data store. Interfaces
            define the semantics of each command, allowing them to be well-defined
            and strongly typed. Because FDO uses a standard set of commands,
            providers can extend existing commands and add new commands, specific
            to that provider. Feature commands execute against a particular
            connection and may execute within the scope of a transaction.
         </p>
                        
         <p>An FDO command is a particular FDO interface
            that is used by the application to invoke an operation against a
            data store. A command may retrieve data from a data store (for example,
            a Select command), may update data in a data store (for example,
            an Update or Delete command), may perform some analysis (for example,
            an Activate Spatial Context command), or may cause some other change
            in a data store or session (for example, a Begin Transaction command).
         </p>
                     
      </div>
                  
      <div class="section"><span style="display:none"><a name="WS7106c181349dd8d016672d6105df83c6e7-7ffd"></a></span>
                        
         <p class="section_title_h1"><a name="TOC_ENTRY__d0e1314"></a>What Is an Expression?
         </p>
                        
         <p>
                              
                              An
            expression is a construct that an application can use to build up
            a filter. An expression is a clause of a filter or larger expression.
            For example, “Lanes &gt;=4 and PavementType = 'Asphalt'” takes two
            expressions and combines them to create a filter.
         </p>
                        
         <p>For more information about using expressions
            with FDO, see <span class="char_link"><a href="WSfacf1429558a55de8821c21057fbebc2b-7ff.htm">
                  <!--Reference = WSfacf1429558a55de8821c21057fbebc2b-7ff; Target topic = WSfacf1429558a55de8821c21057fbebc2b-7ff.htm-->Filter and Expression Languages</a></span>.
         </p>
                     
      </div>
                  
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-b0f"></a></span>
                        
         <p class="section_title_h1"><a name="TOC_ENTRY__d0e1345"></a>What Is a Filter?
         </p>
                        
         <p>
                              
                              
                              A
            filter is a construct that an application specifies to an FDO provider
            to identify a subset of objects of an FDO data
            store. For example, a filter may be used to identify all Road type
            features that have 2 lanes and that are within 200 metres of a particular
            location. Many FDO commands use filter parameters to specify the
            objects to which the command applies. For example, a Select command
            uses a filter to identify the objects that the application wants
            to retrieve. Similarly, a Delete command uses a filter to identify
            the objects that the application wants to delete from the data store. 
         </p>
                        
         <p>For more information about using filters with
            FDO, see <span class="char_link"><a href="WSfacf1429558a55de8821c21057fbebc2b-7ff.htm">
                  <!--Reference = WSfacf1429558a55de8821c21057fbebc2b-7ff; Target topic = WSfacf1429558a55de8821c21057fbebc2b-7ff.htm-->Filter and Expression Languages</a></span>.
         </p>
                     
      </div>
                  
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-b0e"></a></span>
                        
         <p class="section_title_h1"><a name="TOC_ENTRY__d0e1394"></a>What Is Locking?
         </p>
                        
         <p>
                              
                              
                              A
            user can use locking to gain update control of an object in the data
            store to the exclusion of other users. There are two general types
            of locks—transaction locks and persistent locks. Transaction locks
            are temporary and endure only for the duration of the transaction
            (see <span class="char_link"><a href="WS7106c181349dd8d016672d6105df83c6e7-7ffe.htm#WS7106c181349dd8d016672d6105df83c6e7-7ffc">
                  <!--Reference = WS7106c181349dd8d016672d6105df83c6e7-7ffc; Target topic = WS7106c181349dd8d016672d6105df83c6e7-7ffe.htm-->What Is a Transaction?</a></span>). 
         </p>
                        
         <p>Persistent locks applied to objects by a user
            remain with the object until either that user removes those locks
            or the locks are removed by another user with the appropriate authority.
         </p>
                     
      </div>
                  
      <div class="section"><span style="display:none"><a name="WS7106c181349dd8d016672d6105df83c6e7-7ffc"></a></span>
                        
         <p class="section_title_h1"><a name="TOC_ENTRY__d0e1443"></a>What Is a Transaction?
         </p>
                        
         <p>
                              A transaction changes the data
            store in some way. The way these changes affect the data store is
            determined by the transaction’s properties. For example, the Atomic
            property specifies that either all changes happen or non happen.
            In transaction processing the data store treats a series of commands
            as a single atomic unit of change to that data store. Either all
            changes generated by the commands are successful or the whole set
            is cancelled. A transaction is a single atomic unit of changes to
            a data store. The application terminates a transaction with either
            a “commit,” which applies the set of changes, or a “rollback,” which
            cancels the set of changes. Further, the data store may automatically
            roll back a transaction if it detects a severe error in any of the commands
            within the transaction. A transaction has the following properties:
                           
         </p>
                        
         <!--UList--><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-b08"></a></span>
                           
         <ul>
            <li>
                                    <em class="strong">Atomic. </em>Either
               all changes generated by the commands within a transaction happen
               or none happen.
            </li>
            <li>
                                    <em class="strong">Consistent. </em>The
               transaction leaves the data store in a consistent state regarding
               any constraints or other data integrity rules.
            </li>
            <li>
                                    <em class="strong">Isolated. </em>Changes
               being made within a transaction by one user are not visible to other
               users until after that transaction is committed.
            </li>
            <li>
                                    <em class="strong">Durable. </em>After
               a transaction is completed successfully, the changes are persistent
               in the data store on disk and cannot be lost if the program or processor
               fails.
            </li>
         </ul>
                           
                           
                           
                        
                     
      </div>
                  
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-b0d"></a></span>
                        
         <p class="section_title_h1"><a name="TOC_ENTRY__d0e1497"></a>What Is a Long Transaction?
         </p>
                        
         <p>
                              A
            long transaction (LT) is an administration unit used to group conditional changes
            to objects. Depending on the situation, such a unit might contain conditional
            changes to one or to many objects. Long transactions are used to modify
            as-built data in the database without permanently changing the as-built
            data. Long transactions can be used to apply revisions or alternates
            to an object.
         </p>
                     
      </div>
                  
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-b0c"></a></span>
                        
         <p class="section_title_h1"><a name="TOC_ENTRY__d0e1511"></a>What Is a Root Long Transaction?
         </p>
                        
         <p>
                              
                              
                              A root long transaction is
            a long transaction that represents permanent data. Any long transaction
            has a root long transaction as an ancestor in its long transaction
            dependency graph.
         </p>
                     
      </div>
               
            
      <!---->
      <!--See also-->
      <div class="footer-block"><a href="javascript:doComments('../html/ac.cmtdialog.htm');"><span class="comments-link">Comments?</span></a></div><br></body>
</html>