<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <title>FGF Binary Specification</title>
      <link rel="stylesheet" type="text/css" href="../style/cpm.css">
      <link rel="stylesheet" type="text/css" href="../style/isd.css">
      <link rel="stylesheet" type="text/css" href="../style/isd_html_standard.css"><script type="text/javascript" src="../scripts/ac_common.js"></script><script type="text/javascript" src="../scripts/ac.strings.js"></script><script type="text/javascript" src="../scripts/acmap.js"></script><script type="text/javascript" src="../scripts/ac.acad_ak.js"></script><script language="javascript">
            function hideInfo() {
                info = document.getElementById('infoline');
                info.innerHTML = 'Â ';
                info.style.visibility = 'hidden';
            }
            function showInfo(title) {
                info = document.getElementById('infoline');
                info.innerHTML = title;
                info.style.visibility='visible';
            }
        </script><meta type="description" content="FGF Binary Specification">
      <meta type="keywords" content="">
      <meta type="topic-type" content="concept">
   </head>
   <body onLoad="javascript:initFrame('WSfacf1429558a55de8821c21057fbebc2b-789.htm','87'); javascript:initPage('FGF Binary Specification','FDO Developer\'s Guide'); javascript:highlightSearchResults(); top.setPageLoaded(1);" height="100%">
      <div class="head">
         <div class="head-block">
            <div class="nav-group">
               <!--browse buttons-->
               <div class="browse">
                  <nobr>
                     <div id="homeTitle" style="display:none">Home: FDO Developer's Guide</div><a href="WS73099cc142f487551d92abb10dc573c45d-7fdf.htm" target="content" class="headNavLink" onmouseover="showInfo(document.getElementById('homeTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-home-xp.gif" border="0"></a><span class="home-button-separator">&nbsp;</span><div id="prevTitle" style="display:none">FGF and WKB</div><a href="WSfacf1429558a55de8821c21057fbebc2b-78a.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('prevTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-prev-xp.gif" border="0"></a><div id="parentTitle" style="display:none">The Geometry API</div><a href="WSfacf1429558a55de8821c21057fbebc2b-78b.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('parentTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-up-xp.gif" border="0"></a><div id="nextTitle" style="display:none">FGF Text</div><a href="WS1a9193826455f5ffd30557110ffe778f8-7e2f.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('nextTitle').innerHTML);" onmouseout="hideInfo();"><img src="../images/nav-next-xp.gif" border="0"></a></nobr>
               </div>
               <!--end browse buttons-->
            </div>
            <div class="button-info"><span id="infoline">&nbsp;</span></div>
            <div class="ancestry"><a href="WSfacf1429558a55de8821c21057fbebc2b-78b.htm">The Geometry API</a>&nbsp;&gt;&nbsp;
            </div>
            <div class="head-text"><span>FGF Binary Specification</span></div>
         </div>
      </div>
      <div class="head-margin">&nbsp;</div>
      <div style="line-height: 0pt">&nbsp;</div>
      <div class="head-margin">&nbsp;</div><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-789"></a></span>
      <!--Body--><p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c26"></a></span>In this section, the memory layout of each simple
         geometry type is described. The format is based on the OGC specification,
         which is built on the memory layout of a C++ struct. All arrays have
         a computable size and are inline; they do not point to a different
         location in memory. This format allows streaming of geometry data.
      </p>
      <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c25"></a></span>First, the different data types, their size,
         and memory layout are discussed.
      </p>
      <div class="codeBlock"><pre class="codeLine">// double == 8byte IEEE double number in little endian encoding.</pre><pre class="codeLine">// int == 4 byte integer in little endian encoding</pre><pre class="codeLine">// the type of the geometry</pre><pre class="codeLine">enum GeometryType : int</pre><pre class="codeLine">{</pre><pre class="codeLine">	None = 0,</pre><pre class="codeLine">	Point = 1,</pre><pre class="codeLine">	LineString = 2,</pre><pre class="codeLine">	Polygon = 3,</pre><pre class="codeLine">	MultiPoint = 4,</pre><pre class="codeLine">	MultiLineString = 5,</pre><pre class="codeLine">	MultiPolygon = 6,</pre><pre class="codeLine">	MultiGeometry = 7,</pre><pre class="codeLine">	CurveString = 10,</pre><pre class="codeLine">	CurvePolygon = 11,</pre><pre class="codeLine">	MultiCurveString = 12,</pre><pre class="codeLine">	MultiCurvePolygon = 13</pre><pre class="codeLine">}</pre></div>
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-74f"></a></span><p class="section_title_h1"><a name="TOC_ENTRY__d0e6325"></a>Coordinate Types
         </p>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c24"></a></span>This is a bit field, for example, xym == coordinateDimensionality.XY
            | CoordinateDimensionality.M. The following sequence defines the type
            of coordinates used for this object: 
         </p>
         <div class="codeBlock"><pre class="codeLine">enum CoordinateDimensionality : FdoInt32</pre><pre class="codeLine">{</pre><pre class="codeLine">	XY = 0,</pre><pre class="codeLine">	Z = 1,</pre><pre class="codeLine">	M = 2</pre><pre class="codeLine">}</pre></div>
      </div>
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-74e"></a></span><p class="section_title_h1"><a name="TOC_ENTRY__d0e6343"></a>Basic Geometry
         </p>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c23"></a></span>The following sequence establishes the basic
            pure geometry:
         </p>
         <div class="codeBlock"><pre class="codeLine">struct Geometry </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType;</pre><pre class="codeLine">	CoordinateDimensionality type;</pre><pre class="codeLine">}</pre></div>
      </div>
      <div class="section"><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-74d"></a></span><p class="section_title_h1"><a name="TOC_ENTRY__d0e6359"></a>Notation Definition
         </p>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c22"></a></span>The following sequence defines a notation used
            to specify geometries within a byte stream.
         </p>
         <div class="codeBlock"><pre class="codeLine">// Define a notation within this specification</pre><pre class="codeLine">// int PositionSize(geometry)</pre><pre class="codeLine">// {</pre><pre class="codeLine">	// if (geometry.type == CoordinateDimensionality.XY |</pre><pre class="codeLine">		// CoordinateDimensionality.M || </pre><pre class="codeLine">		// geometry.type == CoordinateDimensionality.XY |</pre><pre class="codeLine">		// CoordinateDimensionality.Z)</pre><pre class="codeLine">		// return 3;</pre><pre class="codeLine">	// if (geometry.type == CoordinateDimensionality.XY |</pre><pre class="codeLine">		// CoordinateDimensionality.M | CoordinateDimensionality.Z)</pre><pre class="codeLine">		// return 4</pre><pre class="codeLine">	// return 2;</pre><pre class="codeLine">// }</pre><pre class="codeLine">struct Point // : Geometry</pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; // == GeometryType.Point;</pre><pre class="codeLine">	CoordinateDimensionality type; // all types allowed</pre><pre class="codeLine">	double[] coords; // size = PositionSize(this) </pre><pre class="codeLine">}</pre><pre class="codeLine">struct LineString </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	CoordinateDimensionality type; </pre><pre class="codeLine">	int numPts; // &gt;0</pre><pre class="codeLine">	double[] coords; // size = numPts* PositionSize(this)</pre><pre class="codeLine">}</pre><pre class="codeLine">struct MultiPoint </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	int numPoints; // &gt; 0 </pre><pre class="codeLine">	Point[] points; // size = numPoints</pre><pre class="codeLine">}</pre><pre class="codeLine">struct MultiLineString </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	int numLineStrings; // &gt;= 0 </pre><pre class="codeLine">	LineString[] lineStrings; // size = numLineStrings</pre><pre class="codeLine">}</pre><pre class="codeLine">// building block for polygons, not geometry by itself</pre><pre class="codeLine">struct LinearRing </pre><pre class="codeLine">{</pre><pre class="codeLine">	int numPts; // &gt;0</pre><pre class="codeLine">	double[] coords; // size = numPts* PositionSize(polygon) </pre><pre class="codeLine">}</pre><pre class="codeLine">struct Polygon </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	CoordinateDimensionality type; </pre><pre class="codeLine">	int numRings; // &gt;= 1 as there has to be at least one ring </pre><pre class="codeLine">LinearRing[] lineStrings; // size = numRings</pre><pre class="codeLine">}</pre><pre class="codeLine">struct MultiPolygon </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	int numPolygons; // &gt;= 0</pre><pre class="codeLine">	Polygon[] polygons; // size = numPolygons</pre><pre class="codeLine">}</pre><pre class="codeLine">struct MultiGeometry </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	int numGeom; // &gt;= 0 </pre><pre class="codeLine">	Geometry[] geometry; // size = numGeom</pre><pre class="codeLine">}</pre><pre class="codeLine">enum CurveElementType : int</pre><pre class="codeLine">{</pre><pre class="codeLine">	LineString = 1,</pre><pre class="codeLine">	CircularArc = 2</pre><pre class="codeLine">}</pre><pre class="codeLine">struct CurveStringElement</pre><pre class="codeLine">{</pre><pre class="codeLine">	int CurveElementType;</pre><pre class="codeLine">}</pre><pre class="codeLine">struct LinearCurveStringElement </pre><pre class="codeLine">{</pre><pre class="codeLine">	int CurveElementType; </pre><pre class="codeLine">	int length;</pre><pre class="codeLine">	double[] coords; // size = this.length * PositionSize (this)</pre><pre class="codeLine">}</pre><pre class="codeLine">struct CircularArcCurveStringElement </pre><pre class="codeLine">{</pre><pre class="codeLine">	int CurveElementType; // == CurveElmentType.Arc</pre><pre class="codeLine">	double[] coords; // size = 2 * PositionSize(this)</pre><pre class="codeLine">}</pre><pre class="codeLine">struct CurveString </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	CoordinateDimensionality type; // all types allowed</pre><pre class="codeLine">	double[] startPoint; // size = PositionSize(this)</pre><pre class="codeLine">	int numElements; // &gt;=0</pre><pre class="codeLine">	CurveStringElement[] elements; // size = numElements</pre><pre class="codeLine">}</pre><pre class="codeLine">struct Ring</pre><pre class="codeLine">{</pre><pre class="codeLine">	double[] startPoint; // size = PositionSize(this)</pre><pre class="codeLine">	int numElements; // &gt;=0</pre><pre class="codeLine">	CurveStringElement[] elements; // size = numElements</pre><pre class="codeLine">}</pre><pre class="codeLine">struct MultiCurveString </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	int numCurveStrings; // &gt;= 0 </pre><pre class="codeLine">	CurveString[] curveStrings; // size = numCurveStrings</pre><pre class="codeLine">}</pre><pre class="codeLine">struct CurvePolygon </pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; ;</pre><pre class="codeLine">	CoordinateDimensionality type; </pre><pre class="codeLine">	int numRings; // &gt;=1 as there has to be at least one ring</pre><pre class="codeLine">	Ring[] rings; // size = numRings</pre><pre class="codeLine">}</pre><pre class="codeLine">struct MultiCurvePolygon</pre><pre class="codeLine">{</pre><pre class="codeLine">	int geomType; </pre><pre class="codeLine">	int numPolygons; // &gt;=0</pre><pre class="codeLine">	CurvePolygon[] polygons; // size = numElements</pre><pre class="codeLine">}</pre></div>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c20"></a></span>In the following example a polygon is formatted
            within a byte array representing the stream according to the FGF
            specification.
         </p><span style="display:none"><a name="WSfacf1429558a55de8821c21057fbebc2b-749"></a></span><div class="figure-anchor">
            <p><img src="../images/FDO_geometry_bytearray.ai"></p>
         </div>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c1f"></a></span>T = 3 stands for GeometryType == GeometryType.Polygon
         </p>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c1e"></a></span>CT = 0 stands for CoordinateDimensionality ==
            CoordinateDimensionality.XY
         </p>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c1d"></a></span>NR = 2 stands for number of rings = 2
         </p>
         <p><span style="display:none"><a name="WS73099cc142f4875594cc7110e6b3fa66-7c1c"></a></span>NP =3 stands for number of points = 3
         </p>
      </div><br></body>
</html>