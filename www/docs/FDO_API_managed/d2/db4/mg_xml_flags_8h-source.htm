<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"	"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>FDO .NET API Reference</title>
		<link href="../../custom.css" rel="stylesheet" type="text/css">
		<link href="../../tabs.css" rel="stylesheet" type="text/css">
	</head>
	<body bgcolor="#FFFFFF">
		<table width="100%"  border="0">
			<tr>
				<td><b>FDO .NET API Reference<b></td>
				<td align="right"><b>Feature Data Objects<b></td>
			</tr>
			
		</table>
<!-- End of: header.html -->
<!-- Generated by Doxygen 1.5.1-p1 -->
<div class="tabs">
  <ul>
    <li><a href="../../main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="../../modules.htm"><span>Modules</span></a></li>
    <li><a href="../../namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="../../classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="../../files.htm"><span>Files</span></a></li>
    <li><a href="../../pages.htm"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="../../files.htm"><span>File&nbsp;List</span></a></li>
    <li><a href="../../globals.htm"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>mgXmlFlags.h</h1><a href="../../d7/dd0/mg_xml_flags_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2004-2006  Autodesk, Inc.</span>
<a name="l00003"></a>00003 <span class="comment">* </span>
<a name="l00004"></a>00004 <span class="comment">* This library is free software; you can redistribute it and/or</span>
<a name="l00005"></a>00005 <span class="comment">* modify it under the terms of version 2.1 of the GNU Lesser</span>
<a name="l00006"></a>00006 <span class="comment">* General Public License as published by the Free Software Foundation.</span>
<a name="l00007"></a>00007 <span class="comment">* </span>
<a name="l00008"></a>00008 <span class="comment">* This library is distributed in the hope that it will be useful,</span>
<a name="l00009"></a>00009 <span class="comment">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00010"></a>00010 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00011"></a>00011 <span class="comment">* Lesser General Public License for more details.</span>
<a name="l00012"></a>00012 <span class="comment">* </span>
<a name="l00013"></a>00013 <span class="comment">* You should have received a copy of the GNU Lesser General Public</span>
<a name="l00014"></a>00014 <span class="comment">* License along with this library; if not, write to the Free Software</span>
<a name="l00015"></a>00015 <span class="comment">* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">*/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#pragma once</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;Fdo/Xml/Flags.h&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <a class="code" href="../../d8/d30/_common_namespace_8h_929d553cff3dd7f518de4e1b47b8ea2a.htm#929d553cff3dd7f518de4e1b47b8ea2a">BEGIN_NAMESPACE_OSGEO_FDO_COMMANDS_SCHEMA</a>
<a name="l00024"></a>00024 <span class="keyword">public</span> __gc <span class="keyword">class </span>PhysicalSchemaMappingCollection;
<a name="l00025"></a>00025 <a class="code" href="../../d8/d30/_common_namespace_8h_28303f4f8966bdae18a33da1978c9239.htm#28303f4f8966bdae18a33da1978c9239">END_NAMESPACE_OSGEO_FDO_COMMANDS_SCHEMA</a>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <a class="code" href="../../d8/d30/_common_namespace_8h_e8a0db70a369fb5aabcc2722e1bc2cb2.htm#e8a0db70a369fb5aabcc2722e1bc2cb2">BEGIN_NAMESPACE_OSGEO_FDO_XML</a>
<a name="l00028"></a>00028 <span class="keyword">public</span> __gc <span class="keyword">class </span>PhysicalElementMapping;
<a name="l00029"></a>00029 <span class="comment"></span>
<a name="l00030"></a>00030 <span class="comment">/// \ingroup (OSGeoFDOXml)</span>
<a name="l00031"></a>00031 <span class="comment">/// \brief</span>
<a name="l00032"></a>00032 <span class="comment">/// XmlFlags defines various options for serializing and deserializing</span>
<a name="l00033"></a>00033 <span class="comment">/// FDO element to and from XML Documents.</span>
<a name="l00034"></a><a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags.htm">00034</a> <span class="comment"></span><span class="keyword">public</span> __gc <span class="keyword">class </span><a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags.htm">XmlFlags</a> : <span class="keyword">public</span> <a class="code" href="../../d8/d30/_common_namespace_8h_bfd166a5d24ab2e990a03e8efac51c13.htm#bfd166a5d24ab2e990a03e8efac51c13">NAMESPACE_OSGEO_RUNTIME</a>::Disposable
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 <span class="keyword">public</span>:<span class="comment"></span>
<a name="l00037"></a>00037 <span class="comment">    /// \brief</span>
<a name="l00038"></a>00038 <span class="comment">    /// The XmlFlags::ErrorLevel determines how strict the error reporting </span>
<a name="l00039"></a>00039 <span class="comment">    /// is when a Feature Schema is read from an XML Document. For each errorLevel a </span>
<a name="l00040"></a>00040 <span class="comment">    /// certain level of round-trip fidelity is guaranteed if the read succeeds.</span>
<a name="l00041"></a>00041 <span class="comment">    /// </span>
<a name="l00042"></a>00042 <span class="comment">    /// \param ErrorLevel_High </span>
<a name="l00043"></a>00043 <span class="comment">    /// the read fails with an exception when the </span>
<a name="l00044"></a>00044 <span class="comment">    /// Feature Schema cannot be read without alteration. If the Feature Schema </span>
<a name="l00045"></a>00045 <span class="comment">    /// is read successfully from document A and then written to document B, </span>
<a name="l00046"></a>00046 <span class="comment">    /// documents A and B are guaranteed to be identical. This errorLevel should be </span>
<a name="l00047"></a>00047 <span class="comment">    /// used when no alterations to the Feature Schema can be tolerated</span>
<a name="l00048"></a>00048 <span class="comment">    /// \param ErrorLevel_Normal </span>
<a name="l00049"></a>00049 <span class="comment">    /// fails if the Feature Schema cannot be read </span>
<a name="l00050"></a>00050 <span class="comment">    /// without changing the domain of its conforming instance documents. If the </span>
<a name="l00051"></a>00051 <span class="comment">    /// Feature Schema is read successfully from document A and then written to </span>
<a name="l00052"></a>00052 <span class="comment">    /// document B, any instance document that conforms to the document A schema </span>
<a name="l00053"></a>00053 <span class="comment">    /// will also conform to the document B schema. Any instance document that does</span>
<a name="l00054"></a>00054 <span class="comment">    /// not conform to A does not conform to B. However, documents A and B will not </span>
<a name="l00055"></a>00055 <span class="comment">    /// necessarily be identical.</span>
<a name="l00056"></a>00056 <span class="comment">    /// \param ErrorLevel_Low </span>
<a name="l00057"></a>00057 <span class="comment">    /// similar to ErrorLevel_Normal except that the </span>
<a name="l00058"></a>00058 <span class="comment">    /// instance document domain is allowed to grow. If the Feature Schema is read </span>
<a name="l00059"></a>00059 <span class="comment">    /// successfully from document A and then written to document B, any instance </span>
<a name="l00060"></a>00060 <span class="comment">    /// document that conforms to the document A schema will also conform to the </span>
<a name="l00061"></a>00061 <span class="comment">    /// document B schema. However a document that does not conform to the A schema </span>
<a name="l00062"></a>00062 <span class="comment">    /// may or may not conform to the B schema.</span>
<a name="l00063"></a>00063 <span class="comment">    /// \param ErrorLevel_VeryLow </span>
<a name="l00064"></a>00064 <span class="comment">    /// the read succeeds even if no level of </span>
<a name="l00065"></a>00065 <span class="comment">    /// round-trip fidelity is maintained. If the Feature Schema is read successfully </span>
<a name="l00066"></a>00066 <span class="comment">    /// from document A and then written to document B, any instance document that</span>
<a name="l00067"></a>00067 <span class="comment">    /// conforms to the document A schema may or may not conform to the document B </span>
<a name="l00068"></a>00068 <span class="comment">    /// schema. A document that does not conform to the A schema may or may not </span>
<a name="l00069"></a>00069 <span class="comment">    /// conform to the B schema. This errorLevel is useful for reading schemas from </span>
<a name="l00070"></a>00070 <span class="comment">    /// external sources into FDO when it doesn’t matter how much the schemas are </span>
<a name="l00071"></a>00071 <span class="comment">    /// altered during the read.</span>
<a name="l00072"></a>00072 <span class="comment">    /// </span>
<a name="l00073"></a><a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags_65bded5412991e87ab7792881774f851.htm#65bded5412991e87ab7792881774f851">00073</a> <span class="comment"></span>    __value <span class="keyword">enum</span> <a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags_65bded5412991e87ab7792881774f851.htm#65bded5412991e87ab7792881774f851">ErrorLevel</a> 
<a name="l00074"></a>00074     {
<a name="l00075"></a>00075         ErrorLevel_High = FdoXmlFlags::ErrorLevel_High,
<a name="l00076"></a>00076         ErrorLevel_Normal = FdoXmlFlags::ErrorLevel_Normal,
<a name="l00077"></a>00077         ErrorLevel_Low = FdoXmlFlags::ErrorLevel_Low,
<a name="l00078"></a>00078         ErrorLevel_VeryLow = FdoXmlFlags::ErrorLevel_VeryLow
<a name="l00079"></a>00079     };
<a name="l00080"></a>00080 <span class="comment"></span>
<a name="l00081"></a>00081 <span class="comment">    /// \brief</span>
<a name="l00082"></a>00082 <span class="comment">    /// Constructs an XmlFlags object.</span>
<a name="l00083"></a>00083 <span class="comment">    /// </span>
<a name="l00084"></a>00084 <span class="comment"></span>    <a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags.htm">XmlFlags</a>();
<a name="l00085"></a>00085 <span class="comment"></span>
<a name="l00086"></a>00086 <span class="comment">    /// \brief</span>
<a name="l00087"></a>00087 <span class="comment">    /// Constructs an XmlFlags object.</span>
<a name="l00088"></a>00088 <span class="comment">    /// </span>
<a name="l00089"></a>00089 <span class="comment">    /// \param location </span>
<a name="l00090"></a>00090 <span class="comment">    /// Input When writing  Feature Schemas, this specifies the </span>
<a name="l00091"></a>00091 <span class="comment">    /// prefix for the target namespace for any schemas that are written. The XML </span>
<a name="l00092"></a>00092 <span class="comment">    /// format for Feature Schemas is OGC GML, so a targetNamespace for the </span>
<a name="l00093"></a>00093 <span class="comment">    /// xs:schema element is required. This namespace will be http://[url]/[schema_name].</span>
<a name="l00094"></a>00094 <span class="comment">    /// </span>
<a name="l00095"></a>00095 <span class="comment"></span>    <a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags.htm">XmlFlags</a>(System::String* location);
<a name="l00096"></a>00096 <span class="comment"></span>
<a name="l00097"></a>00097 <span class="comment">    /// \brief</span>
<a name="l00098"></a>00098 <span class="comment">    /// Constructs an XmlFlags object.</span>
<a name="l00099"></a>00099 <span class="comment">    /// </span>
<a name="l00100"></a>00100 <span class="comment">    /// \param location </span>
<a name="l00101"></a>00101 <span class="comment">    /// Input When writing  Feature Schemas, this specifies the </span>
<a name="l00102"></a>00102 <span class="comment">    /// prefix for the target namespace for any schemas that are written. The XML </span>
<a name="l00103"></a>00103 <span class="comment">    /// format for Feature Schemas is OGC GML, so a targetNamespace for the </span>
<a name="l00104"></a>00104 <span class="comment">    /// xs:schema element is required. This namespace will be http://[url]/[schema_name].</span>
<a name="l00105"></a>00105 <span class="comment">    /// \param errorLevel </span>
<a name="l00106"></a>00106 <span class="comment">    /// Input The error level for reading feature schemas.</span>
<a name="l00107"></a>00107 <span class="comment">    /// </span>
<a name="l00108"></a>00108 <span class="comment"></span>    <a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags.htm">XmlFlags</a>(System::String* location, NAMESPACE_OSGEO_FDO_XML::XmlFlags::ErrorLevel errorLevel);
<a name="l00109"></a>00109 <span class="comment"></span>
<a name="l00110"></a>00110 <span class="comment">    /// \brief</span>
<a name="l00111"></a>00111 <span class="comment">    /// Constructs an XmlFlags object.</span>
<a name="l00112"></a>00112 <span class="comment">    /// </span>
<a name="l00113"></a>00113 <span class="comment">    /// \param location </span>
<a name="l00114"></a>00114 <span class="comment">    /// Input When writing  Feature Schemas, this specifies the </span>
<a name="l00115"></a>00115 <span class="comment">    /// prefix for the target namespace for any schemas that are written. The XML </span>
<a name="l00116"></a>00116 <span class="comment">    /// format for Feature Schemas is OGC GML, so a targetNamespace for the </span>
<a name="l00117"></a>00117 <span class="comment">    /// xs:schema element is required. This namespace will be http://[url]/[schema_name].</span>
<a name="l00118"></a>00118 <span class="comment">    /// \param errorLevel </span>
<a name="l00119"></a>00119 <span class="comment">    /// Input The error level for reading feature schemas.</span>
<a name="l00120"></a>00120 <span class="comment">    /// \param nameAdjust </span>
<a name="l00121"></a>00121 <span class="comment">    /// Input true: apply name adjustment to all elements. </span>
<a name="l00122"></a>00122 <span class="comment">    /// false: apply name adjustment only to elements with fdo:nameAdjust="true"</span>
<a name="l00123"></a>00123 <span class="comment">    /// </span>
<a name="l00124"></a>00124 <span class="comment"></span>    <a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags.htm">XmlFlags</a>(System::String* location, NAMESPACE_OSGEO_FDO_XML::XmlFlags::ErrorLevel errorLevel, System::Boolean nameAdjust);
<a name="l00125"></a>00125 <span class="comment"></span>
<a name="l00126"></a>00126 <span class="comment">    /// \brief</span>
<a name="l00127"></a>00127 <span class="comment">    /// Sets the target namespace prefix, see XmlFlags::Create().</span>
<a name="l00128"></a>00128 <span class="comment">    /// </span>
<a name="l00129"></a>00129 <span class="comment">    /// \param location </span>
<a name="l00130"></a>00130 <span class="comment">    /// Input the target namespace prefix.</span>
<a name="l00131"></a>00131 <span class="comment">    /// </span>
<a name="l00132"></a>00132 <span class="comment"></span>    __property System::Void set_Url(System::String* location);
<a name="l00133"></a>00133 <span class="comment"></span>
<a name="l00134"></a>00134 <span class="comment">    /// \brief</span>
<a name="l00135"></a>00135 <span class="comment">    /// Gets the target namespace prefix, see XmlFlags::Create().</span>
<a name="l00136"></a>00136 <span class="comment">    /// </span>
<a name="l00137"></a>00137 <span class="comment">    /// \return</span>
<a name="l00138"></a>00138 <span class="comment">    /// Returns the target namespace prefix.</span>
<a name="l00139"></a>00139 <span class="comment">    /// </span>
<a name="l00140"></a>00140 <span class="comment"></span>    __property System::String* get_Url();
<a name="l00141"></a>00141 <span class="comment"></span>
<a name="l00142"></a>00142 <span class="comment">    /// \brief</span>
<a name="l00143"></a>00143 <span class="comment">    /// Sets the error level, see XmlFlags::Create().</span>
<a name="l00144"></a>00144 <span class="comment">    /// </span>
<a name="l00145"></a>00145 <span class="comment">    /// \param value </span>
<a name="l00146"></a>00146 <span class="comment">    /// Input the error level.</span>
<a name="l00147"></a>00147 <span class="comment">    /// </span>
<a name="l00148"></a>00148 <span class="comment"></span>    __property System::Void set_Errorlevel(NAMESPACE_OSGEO_FDO_XML::XmlFlags::ErrorLevel value);
<a name="l00149"></a>00149 <span class="comment"></span>
<a name="l00150"></a>00150 <span class="comment">    /// \brief</span>
<a name="l00151"></a>00151 <span class="comment">    /// Gets the current error level, see XmlFlags::Create().</span>
<a name="l00152"></a>00152 <span class="comment">    /// </span>
<a name="l00153"></a>00153 <span class="comment">    /// \return</span>
<a name="l00154"></a>00154 <span class="comment">    /// Returns the error level.</span>
<a name="l00155"></a>00155 <span class="comment">    /// </span>
<a name="l00156"></a>00156 <span class="comment"></span>    __property NAMESPACE_OSGEO_FDO_XML::XmlFlags::ErrorLevel get_Errorlevel();
<a name="l00157"></a>00157 <span class="comment"></span>
<a name="l00158"></a>00158 <span class="comment">    /// \brief</span>
<a name="l00159"></a>00159 <span class="comment">    /// Sets the name adjustment flag, see XmlFlags::Create().</span>
<a name="l00160"></a>00160 <span class="comment">    /// </span>
<a name="l00161"></a>00161 <span class="comment">    /// \param nameAdjust </span>
<a name="l00162"></a>00162 <span class="comment">    /// Input the name adjustment flag.</span>
<a name="l00163"></a>00163 <span class="comment">    /// </span>
<a name="l00164"></a>00164 <span class="comment"></span>    __property System::Void set_NameAdjust(System::Boolean nameAdjust);
<a name="l00165"></a>00165 <span class="comment"></span>
<a name="l00166"></a>00166 <span class="comment">    /// \brief</span>
<a name="l00167"></a>00167 <span class="comment">    /// Gets the name adjustment flag, see XmlFlags::Create().</span>
<a name="l00168"></a>00168 <span class="comment">    /// </span>
<a name="l00169"></a>00169 <span class="comment">    /// \return</span>
<a name="l00170"></a>00170 <span class="comment">    /// Returns the name adjustment flag.</span>
<a name="l00171"></a>00171 <span class="comment">    /// </span>
<a name="l00172"></a>00172 <span class="comment"></span>    __property System::Boolean get_NameAdjust();
<a name="l00173"></a>00173 <span class="comment"></span>
<a name="l00174"></a>00174 <span class="comment">    /// \brief</span>
<a name="l00175"></a>00175 <span class="comment">    /// Sets the Schema Name as Prefix flag. This flag controls how</span>
<a name="l00176"></a>00176 <span class="comment">    /// an FDO Feature Schema name is generated when the schema is read</span>
<a name="l00177"></a>00177 <span class="comment">    /// from GML.</span>
<a name="l00178"></a>00178 <span class="comment">    /// </span>
<a name="l00179"></a>00179 <span class="comment">    /// \param schemaNameAsPrefix </span>
<a name="l00180"></a>00180 <span class="comment">    /// Input when true, the Feature Schema </span>
<a name="l00181"></a>00181 <span class="comment">    /// name is set to the prefix from the xmlns namespace declaration for </span>
<a name="l00182"></a>00182 <span class="comment">    /// the schema's targetNamespace. The target namespace prefix flag on this </span>
<a name="l00183"></a>00183 <span class="comment">    /// object is ignored</span>
<a name="l00184"></a>00184 <span class="comment">    /// in this case. If no suitable namespace declaration can be found,</span>
<a name="l00185"></a>00185 <span class="comment">    /// the Feature Schema name is set as if this flag were false.</span>
<a name="l00186"></a>00186 <span class="comment">    /// Schemas cannot be round-tripped when this flag is true. Therefore, it</span>
<a name="l00187"></a>00187 <span class="comment">    /// may only be set to true when the current ErrorLevel is VeryLow.</span>
<a name="l00188"></a>00188 <span class="comment">    /// Caution must be observed when using this flag. Unpredictable results</span>
<a name="l00189"></a>00189 <span class="comment">    /// can occur if a GML Schema uses different prefixes for its </span>
<a name="l00190"></a>00190 <span class="comment">    /// targetNamespace in different parts of the schema.</span>
<a name="l00191"></a>00191 <span class="comment">    /// </span>
<a name="l00192"></a>00192 <span class="comment"></span>    __property System::Void set_SchemaNameAsPrefix(System::Boolean schemaNameAsPrefix);
<a name="l00193"></a>00193 <span class="comment"></span>
<a name="l00194"></a>00194 <span class="comment">    /// \brief</span>
<a name="l00195"></a>00195 <span class="comment">    /// Gets the Schema Name as Prefix flag.</span>
<a name="l00196"></a>00196 <span class="comment">    /// </span>
<a name="l00197"></a>00197 <span class="comment">    /// \return</span>
<a name="l00198"></a>00198 <span class="comment">    /// Returns the Schema Name as Prefix flag.</span>
<a name="l00199"></a>00199 <span class="comment">    /// </span>
<a name="l00200"></a>00200 <span class="comment"></span>    __property System::Boolean get_SchemaNameAsPrefix();
<a name="l00201"></a>00201 <span class="comment"></span>
<a name="l00202"></a>00202 <span class="comment">    /// \brief</span>
<a name="l00203"></a>00203 <span class="comment">    /// Sets the Use GML ID flag.</span>
<a name="l00204"></a>00204 <span class="comment">    /// </span>
<a name="l00205"></a>00205 <span class="comment">    /// \param id </span>
<a name="l00206"></a>00206 <span class="comment">    /// Input when true, the feature id ( fid in GML 2, gml:id in GML 3)</span>
<a name="l00207"></a>00207 <span class="comment">    /// becomes the identity property of all feature classes.</span>
<a name="l00208"></a>00208 <span class="comment">    /// </span>
<a name="l00209"></a>00209 <span class="comment"></span>    __property System::Void set_UseGmlId(System::Boolean <span class="keywordtype">id</span>);
<a name="l00210"></a>00210 <span class="comment"></span>
<a name="l00211"></a>00211 <span class="comment">    /// \brief</span>
<a name="l00212"></a>00212 <span class="comment">    /// Gets the Use GML ID flag.</span>
<a name="l00213"></a>00213 <span class="comment">    /// </span>
<a name="l00214"></a>00214 <span class="comment">    /// \return</span>
<a name="l00215"></a>00215 <span class="comment">    /// Returns the Use GML ID flag.</span>
<a name="l00216"></a>00216 <span class="comment">    /// </span>
<a name="l00217"></a>00217 <span class="comment"></span>    __property System::Boolean get_UseGmlId();
<a name="l00218"></a>00218 <span class="comment"></span>
<a name="l00219"></a>00219 <span class="comment">    /// \brief</span>
<a name="l00220"></a>00220 <span class="comment">    /// Sets the Schema Mapping Overrides for translating schemas </span>
<a name="l00221"></a>00221 <span class="comment">    /// between GML and FDO. </span>
<a name="l00222"></a>00222 <span class="comment">    /// </span>
<a name="l00223"></a>00223 <span class="comment">    /// \param mappings </span>
<a name="l00224"></a>00224 <span class="comment">    /// Input the Schema Mapping Overrides. This collection</span>
<a name="l00225"></a>00225 <span class="comment">    /// can contain an XmlSchemaMapping element for each Feature Schema that</span>
<a name="l00226"></a>00226 <span class="comment">    /// may be written or read. When a Feature Schema is read or written to or </span>
<a name="l00227"></a>00227 <span class="comment">    /// from GML, this collection is checked for an XmlSchemaMapping item named </span>
<a name="l00228"></a>00228 <span class="comment">    /// the same as the feature schema. If present, the hints in this item </span>
<a name="l00229"></a>00229 <span class="comment">    /// affect how the feature schema is read or written. The Schema Mapping </span>
<a name="l00230"></a>00230 <span class="comment">    /// Overrides also control how features are read since they </span>
<a name="l00231"></a>00231 <span class="comment">    /// can override the default correspondences between feature class names </span>
<a name="l00232"></a>00232 <span class="comment">    /// and their GML element names.</span>
<a name="l00233"></a>00233 <span class="comment">    /// </span>
<a name="l00234"></a>00234 <span class="comment"></span>    __property System::Void set_SchemaMappings(NAMESPACE_OSGEO_FDO_COMMANDS_SCHEMA::PhysicalSchemaMappingCollection* mappings);
<a name="l00235"></a>00235 <span class="comment"></span>
<a name="l00236"></a>00236 <span class="comment">    /// \brief</span>
<a name="l00237"></a>00237 <span class="comment">    /// Gets the current Schema Mapping Overrides.</span>
<a name="l00238"></a>00238 <span class="comment">    /// </span>
<a name="l00239"></a>00239 <span class="comment">    /// \return</span>
<a name="l00240"></a>00240 <span class="comment">    /// Returns XmlSchemaMappingCollection*.</span>
<a name="l00241"></a>00241 <span class="comment">    /// </span>
<a name="l00242"></a>00242 <span class="comment"></span>    __property NAMESPACE_OSGEO_FDO_COMMANDS_SCHEMA::PhysicalSchemaMappingCollection* get_SchemaMappings();
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 <span class="keyword">public</span> <span class="keyword">private</span>:
<a name="l00245"></a>00245     <a class="code" href="../../d0/dba/class_o_s_geo_1_1_f_d_o_1_1_xml_1_1_xml_flags.htm">XmlFlags</a>(System::IntPtr unmanaged, System::Boolean autoDelete) : <a class="code" href="../../d8/d30/_common_namespace_8h_bfd166a5d24ab2e990a03e8efac51c13.htm#bfd166a5d24ab2e990a03e8efac51c13">NAMESPACE_OSGEO_RUNTIME</a>::Disposable(unmanaged, autoDelete)
<a name="l00246"></a>00246     {
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     <span class="keyword">inline</span> FdoXmlFlags* GetImpObj();
<a name="l00251"></a>00251 <span class="comment"></span>
<a name="l00252"></a>00252 <span class="comment">/// \cond DOXYGEN-IGNORE</span>
<a name="l00253"></a>00253 <span class="comment"></span><span class="keyword">protected</span>:
<a name="l00254"></a>00254     System::Void ReleaseUnmanagedObject();<span class="comment"></span>
<a name="l00255"></a>00255 <span class="comment">/// \endcond</span>
<a name="l00256"></a>00256 <span class="comment"></span>};
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <a class="code" href="../../d8/d30/_common_namespace_8h_eb7ce40b371f0204406c1888001d7d6c.htm#eb7ce40b371f0204406c1888001d7d6c">END_NAMESPACE_OSGEO_FDO_XML</a>
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 
</pre></div><!-- footer.html -->
		<hr>
		<table width="100%"  border="0">
			<tr>
				<td>Comments or suggestions? Send us <a href="mailto:isd.docs@autodesk.com&subject=FDO%20.NET%20API%20documentation">feedback</a>.</td>
				<!-- The logo can go in another cell, when we get one -->			
			</tr>
		</table>
	</body>
</html>
