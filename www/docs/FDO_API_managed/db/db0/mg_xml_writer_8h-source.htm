<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"	"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>FDO .NET API Reference</title>
		<link href="../../custom.css" rel="stylesheet" type="text/css">
		<link href="../../tabs.css" rel="stylesheet" type="text/css">
	</head>
	<body bgcolor="#FFFFFF">
		<table width="100%"  border="0">
			<tr>
				<td><b>FDO .NET API Reference<b></td>
				<td align="right"><b>Feature Data Objects<b></td>
			</tr>
			
		</table>
<!-- End of: header.html -->
<!-- Generated by Doxygen 1.5.1-p1 -->
<div class="tabs">
  <ul>
    <li><a href="../../main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="../../modules.htm"><span>Modules</span></a></li>
    <li><a href="../../namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="../../classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="../../files.htm"><span>Files</span></a></li>
    <li><a href="../../pages.htm"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="../../files.htm"><span>File&nbsp;List</span></a></li>
    <li><a href="../../globals.htm"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>mgXmlWriter.h</h1><a href="../../d7/de6/mg_xml_writer_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2004-2006  Autodesk, Inc.</span>
<a name="l00003"></a>00003 <span class="comment">* </span>
<a name="l00004"></a>00004 <span class="comment">* This library is free software; you can redistribute it and/or</span>
<a name="l00005"></a>00005 <span class="comment">* modify it under the terms of version 2.1 of the GNU Lesser</span>
<a name="l00006"></a>00006 <span class="comment">* General Public License as published by the Free Software Foundation.</span>
<a name="l00007"></a>00007 <span class="comment">* </span>
<a name="l00008"></a>00008 <span class="comment">* This library is distributed in the hope that it will be useful,</span>
<a name="l00009"></a>00009 <span class="comment">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00010"></a>00010 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00011"></a>00011 <span class="comment">* Lesser General Public License for more details.</span>
<a name="l00012"></a>00012 <span class="comment">* </span>
<a name="l00013"></a>00013 <span class="comment">* You should have received a copy of the GNU Lesser General Public</span>
<a name="l00014"></a>00014 <span class="comment">* License along with this library; if not, write to the Free Software</span>
<a name="l00015"></a>00015 <span class="comment">* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">*/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#pragma once</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "<a class="code" href="../../d6/df8/_disposable_8h.htm">Runtime\Disposable.h</a>"</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="keyword">class </span>FdoXmlWriter;
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <a class="code" href="../../d8/d30/_common_namespace_8h_fc1e829e869a2e19a25a6355374e117a.htm#fc1e829e869a2e19a25a6355374e117a">BEGIN_NAMESPACE_OSGEO_COMMON_IO</a>
<a name="l00026"></a>00026 <span class="keyword">public</span> __gc <span class="keyword">class </span><a class="code" href="../../d6/d31/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_io_1_1_io_stream.htm">IoStream</a>;
<a name="l00027"></a>00027 <span class="keyword">public</span> __gc <span class="keyword">class </span><a class="code" href="../../d6/d38/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_io_1_1_io_text_writer.htm">IoTextWriter</a>;
<a name="l00028"></a>00028 <a class="code" href="../../d8/d30/_common_namespace_8h_8cc0efac667e54f9a8e83c119b61ffa8.htm#8cc0efac667e54f9a8e83c119b61ffa8">END_NAMESPACE_OSGEO_COMMON_IO</a>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">using namespace </span><a class="code" href="../../d8/d30/_common_namespace_8h_5a773fdac5afdba2b2cbe4ee5429737a.htm#5a773fdac5afdba2b2cbe4ee5429737a">NAMESPACE_OSGEO_COMMON_IO</a>;
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <a class="code" href="../../d8/d30/_common_namespace_8h_8daf3cb7bff57507fe3cff21845ca1c2.htm#8daf3cb7bff57507fe3cff21845ca1c2">BEGIN_NAMESPACE_OSGEO_COMMON_XML</a>
<a name="l00033"></a>00033 <span class="comment"></span>
<a name="l00034"></a>00034 <span class="comment">/// \ingroup (OSGeoFDOCommonXml)</span>
<a name="l00035"></a>00035 <span class="comment">/// \brief</span>
<a name="l00036"></a>00036 <span class="comment">/// XmlWriter writes an XML document to a text or binary stream. </span>
<a name="l00037"></a>00037 <span class="comment">/// Note: The XML document is not completely written until this object</span>
<a name="l00038"></a>00038 <span class="comment">/// is destroyed by releasing all references to it. Therefore, this object</span>
<a name="l00039"></a>00039 <span class="comment">/// must be destroyed before reading back the document being written.</span>
<a name="l00040"></a><a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">00040</a> <span class="comment"></span><span class="keyword">public</span> __gc <span class="keyword">class </span><a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a> : <span class="keyword">public</span> <a class="code" href="../../d8/d30/_common_namespace_8h_bfd166a5d24ab2e990a03e8efac51c13.htm#bfd166a5d24ab2e990a03e8efac51c13">NAMESPACE_OSGEO_RUNTIME</a>::Disposable
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042 <span class="keyword">public</span>:<span class="comment"></span>
<a name="l00043"></a>00043 <span class="comment">    /// \brief</span>
<a name="l00044"></a>00044 <span class="comment">    /// XmlWriter::LineFormat specifies whether the output XML document</span>
<a name="l00045"></a>00045 <span class="comment">    /// has line breaks or indentation.</span>
<a name="l00046"></a>00046 <span class="comment">    /// </span>
<a name="l00047"></a>00047 <span class="comment">    /// \param LineFormat_None </span>
<a name="l00048"></a>00048 <span class="comment">    /// The document is written without line breaks or element indentation.</span>
<a name="l00049"></a>00049 <span class="comment">    /// \param LineFormat_Break </span>
<a name="l00050"></a>00050 <span class="comment">    /// The document is written with a line break after:</span>
<a name="l00051"></a>00051 <span class="comment">    /// &lt;ul&gt;</span>
<a name="l00052"></a>00052 <span class="comment">    /// &lt;li&gt; every end element tag</span>
<a name="l00053"></a>00053 <span class="comment">    /// &lt;li&gt; every start tag for elements with complex content (sub-elements)</span>
<a name="l00054"></a>00054 <span class="comment">    /// &lt;/ul&gt;</span>
<a name="l00055"></a>00055 <span class="comment">    /// Elements are not indented.</span>
<a name="l00056"></a>00056 <span class="comment">    /// \param LineFormat_Indent </span>
<a name="l00057"></a>00057 <span class="comment">    /// Same as LineFormat_Break, except that each element immediately following </span>
<a name="l00058"></a>00058 <span class="comment">    /// a line break is indented by a certain number of spaces. The number of</span>
<a name="l00059"></a>00059 <span class="comment">    /// spaces is the element's nesting level within the document X 3. The root</span>
<a name="l00060"></a>00060 <span class="comment">    /// element has nesting level 0.</span>
<a name="l00061"></a>00061 <span class="comment">    /// </span>
<a name="l00062"></a><a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer_3c03184de14b6fa2a51f64e4a7e72d4c.htm#3c03184de14b6fa2a51f64e4a7e72d4c">00062</a> <span class="comment"></span>    __value <span class="keyword">enum</span> <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer_3c03184de14b6fa2a51f64e4a7e72d4c.htm#3c03184de14b6fa2a51f64e4a7e72d4c">LineFormat</a> 
<a name="l00063"></a>00063     {
<a name="l00064"></a>00064         LineFormat_None = FdoXmlWriter::LineFormat_None,
<a name="l00065"></a>00065         LineFormat_Break = FdoXmlWriter::LineFormat_Break,
<a name="l00066"></a>00066         LineFormat_Indent = FdoXmlWriter::LineFormat_Indent
<a name="l00067"></a>00067     };
<a name="l00068"></a>00068 <span class="comment"></span>
<a name="l00069"></a>00069 <span class="comment">    /// \brief</span>
<a name="l00070"></a>00070 <span class="comment">    /// Constructs an XML writer on a file</span>
<a name="l00071"></a>00071 <span class="comment">    /// </span>
<a name="l00072"></a>00072 <span class="comment">    /// \param fileName </span>
<a name="l00073"></a>00073 <span class="comment">    /// Input name of the file to write.</span>
<a name="l00074"></a>00074 <span class="comment">    /// \param defaultRoot </span>
<a name="l00075"></a>00075 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00076"></a>00076 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00077"></a>00077 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00078"></a>00078 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00079"></a>00079 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00080"></a>00080 <span class="comment">    /// \param lineFormat </span>
<a name="l00081"></a>00081 <span class="comment">    /// Input indentation string for XML elements. If NULL</span>
<a name="l00082"></a>00082 <span class="comment">    /// the XML document contains no line breaks and elements are not indented. </span>
<a name="l00083"></a>00083 <span class="comment">    /// if L"" then the XML document has a line break after every end element</span>
<a name="l00084"></a>00084 <span class="comment">    /// tag but no elements are indented. Otherwise, this string must only </span>
<a name="l00085"></a>00085 <span class="comment">    /// contain spaces or tabs; the XML document has a line break after every end element</span>
<a name="l00086"></a>00086 <span class="comment">    /// and each element start is prepended with a repetition of this string.</span>
<a name="l00087"></a>00087 <span class="comment">    /// The string is repeated according to the element's nesting level.</span>
<a name="l00088"></a>00088 <span class="comment">    /// \param lineLength </span>
<a name="l00089"></a>00089 <span class="comment">    /// Input maximum line length. If 0 there is </span>
<a name="l00090"></a>00090 <span class="comment">    /// no maximum. Otherwise, a line break is added before an XML attribute is</span>
<a name="l00091"></a>00091 <span class="comment">    /// written, if the attribute would have caused the current line to exceed</span>
<a name="l00092"></a>00092 <span class="comment">    /// this length.</span>
<a name="l00093"></a>00093 <span class="comment">    /// </span>
<a name="l00094"></a>00094 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(System::String* fileName, System::Boolean defaultRoot, NAMESPACE_OSGEO_COMMON_XML::XmlWriter::LineFormat lineFormat, System::UInt32 lineLength);
<a name="l00095"></a>00095 <span class="comment"></span>
<a name="l00096"></a>00096 <span class="comment">    /// \brief</span>
<a name="l00097"></a>00097 <span class="comment">    /// Constructs an XML writer on a file</span>
<a name="l00098"></a>00098 <span class="comment">    /// </span>
<a name="l00099"></a>00099 <span class="comment">    /// \param fileName </span>
<a name="l00100"></a>00100 <span class="comment">    /// Input name of the file to write.</span>
<a name="l00101"></a>00101 <span class="comment">    /// \param defaultRoot </span>
<a name="l00102"></a>00102 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00103"></a>00103 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00104"></a>00104 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00105"></a>00105 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00106"></a>00106 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00107"></a>00107 <span class="comment">    /// \param lineFormat </span>
<a name="l00108"></a>00108 <span class="comment">    /// Input indentation string for XML elements. If NULL</span>
<a name="l00109"></a>00109 <span class="comment">    /// the XML document contains no line breaks and elements are not indented. </span>
<a name="l00110"></a>00110 <span class="comment">    /// if L"" then the XML document has a line break after every end element</span>
<a name="l00111"></a>00111 <span class="comment">    /// tag but no elements are indented. Otherwise, this string must only </span>
<a name="l00112"></a>00112 <span class="comment">    /// contain spaces or tabs; the XML document has a line break after every end element</span>
<a name="l00113"></a>00113 <span class="comment">    /// and each element start is prepended with a repetition of this string.</span>
<a name="l00114"></a>00114 <span class="comment">    /// The string is repeated according to the element's nesting level.</span>
<a name="l00115"></a>00115 <span class="comment">    /// </span>
<a name="l00116"></a>00116 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(System::String* fileName, System::Boolean defaultRoot, NAMESPACE_OSGEO_COMMON_XML::XmlWriter::LineFormat lineFormat);
<a name="l00117"></a>00117 <span class="comment"></span>
<a name="l00118"></a>00118 <span class="comment">    /// \brief</span>
<a name="l00119"></a>00119 <span class="comment">    /// Constructs an XML writer on a file</span>
<a name="l00120"></a>00120 <span class="comment">    /// </span>
<a name="l00121"></a>00121 <span class="comment">    /// \param fileName </span>
<a name="l00122"></a>00122 <span class="comment">    /// Input name of the file to write.</span>
<a name="l00123"></a>00123 <span class="comment">    /// \param defaultRoot </span>
<a name="l00124"></a>00124 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00125"></a>00125 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00126"></a>00126 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00127"></a>00127 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00128"></a>00128 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00129"></a>00129 <span class="comment">    /// </span>
<a name="l00130"></a>00130 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(System::String* fileName, System::Boolean defaultRoot);
<a name="l00131"></a>00131 <span class="comment"></span>
<a name="l00132"></a>00132 <span class="comment">    /// \brief</span>
<a name="l00133"></a>00133 <span class="comment">    /// Constructs an XML writer on a file</span>
<a name="l00134"></a>00134 <span class="comment">    /// </span>
<a name="l00135"></a>00135 <span class="comment">    /// \param fileName </span>
<a name="l00136"></a>00136 <span class="comment">    /// Input name of the file to write.</span>
<a name="l00137"></a>00137 <span class="comment">    /// </span>
<a name="l00138"></a>00138 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(System::String* fileName);
<a name="l00139"></a>00139 <span class="comment"></span>
<a name="l00140"></a>00140 <span class="comment">    /// \brief</span>
<a name="l00141"></a>00141 <span class="comment">    /// Constructs an XML writer on a stream</span>
<a name="l00142"></a>00142 <span class="comment">    /// </span>
<a name="l00143"></a>00143 <span class="comment">    /// \param stream </span>
<a name="l00144"></a>00144 <span class="comment">    /// Input the stream to write.</span>
<a name="l00145"></a>00145 <span class="comment">    /// \param defaultRoot </span>
<a name="l00146"></a>00146 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00147"></a>00147 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00148"></a>00148 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00149"></a>00149 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00150"></a>00150 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00151"></a>00151 <span class="comment">    /// \param lineFormat </span>
<a name="l00152"></a>00152 <span class="comment">    /// Input indentation string for XML elements. If NULL</span>
<a name="l00153"></a>00153 <span class="comment">    /// the XML document contains no line breaks and elements are not indented. </span>
<a name="l00154"></a>00154 <span class="comment">    /// if L"" then the XML document has a line break after every end element</span>
<a name="l00155"></a>00155 <span class="comment">    /// tag but no elements are indented. Otherwise, this string must only </span>
<a name="l00156"></a>00156 <span class="comment">    /// contain spaces or tabs; the XML document has a line break after every end element</span>
<a name="l00157"></a>00157 <span class="comment">    /// and each element start is prepended with a repetition of this string.</span>
<a name="l00158"></a>00158 <span class="comment">    /// The string is repeated according to the element's nesting level.</span>
<a name="l00159"></a>00159 <span class="comment">    /// \param lineLength </span>
<a name="l00160"></a>00160 <span class="comment">    /// Input maximum line length. If 0 there is </span>
<a name="l00161"></a>00161 <span class="comment">    /// no maximum. Otherwise, a line break is added before an XML attribute is</span>
<a name="l00162"></a>00162 <span class="comment">    /// written, if the attribute would have caused the current line to exceed</span>
<a name="l00163"></a>00163 <span class="comment">    /// this length.</span>
<a name="l00164"></a>00164 <span class="comment">    /// </span>
<a name="l00165"></a>00165 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoStream* stream, System::Boolean defaultRoot, NAMESPACE_OSGEO_COMMON_XML::XmlWriter::LineFormat lineFormat, System::UInt32 lineLength);
<a name="l00166"></a>00166 <span class="comment"></span>
<a name="l00167"></a>00167 <span class="comment">    /// \brief</span>
<a name="l00168"></a>00168 <span class="comment">    /// Constructs an XML writer on a stream</span>
<a name="l00169"></a>00169 <span class="comment">    /// </span>
<a name="l00170"></a>00170 <span class="comment">    /// \param stream </span>
<a name="l00171"></a>00171 <span class="comment">    /// Input the stream to write.</span>
<a name="l00172"></a>00172 <span class="comment">    /// \param defaultRoot </span>
<a name="l00173"></a>00173 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00174"></a>00174 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00175"></a>00175 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00176"></a>00176 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00177"></a>00177 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00178"></a>00178 <span class="comment">    /// \param lineFormat </span>
<a name="l00179"></a>00179 <span class="comment">    /// </span>
<a name="l00180"></a>00180 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoStream* stream, System::Boolean defaultRoot, NAMESPACE_OSGEO_COMMON_XML::XmlWriter::LineFormat lineFormat);
<a name="l00181"></a>00181 <span class="comment"></span>
<a name="l00182"></a>00182 <span class="comment">    /// \brief</span>
<a name="l00183"></a>00183 <span class="comment">    /// Constructs an XML writer on a stream</span>
<a name="l00184"></a>00184 <span class="comment">    /// </span>
<a name="l00185"></a>00185 <span class="comment">    /// \param stream </span>
<a name="l00186"></a>00186 <span class="comment">    /// Input the stream to write.</span>
<a name="l00187"></a>00187 <span class="comment">    /// \param defaultRoot </span>
<a name="l00188"></a>00188 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00189"></a>00189 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00190"></a>00190 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00191"></a>00191 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00192"></a>00192 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00193"></a>00193 <span class="comment">    /// </span>
<a name="l00194"></a>00194 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoStream* stream, System::Boolean defaultRoot);
<a name="l00195"></a>00195 <span class="comment"></span>
<a name="l00196"></a>00196 <span class="comment">    /// \brief</span>
<a name="l00197"></a>00197 <span class="comment">    /// Constructs an XML writer on a stream</span>
<a name="l00198"></a>00198 <span class="comment">    /// </span>
<a name="l00199"></a>00199 <span class="comment">    /// \param stream </span>
<a name="l00200"></a>00200 <span class="comment">    /// Input the stream to write.</span>
<a name="l00201"></a>00201 <span class="comment">    /// </span>
<a name="l00202"></a>00202 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoStream* stream);
<a name="l00203"></a>00203 <span class="comment"></span>
<a name="l00204"></a>00204 <span class="comment">    /// \brief</span>
<a name="l00205"></a>00205 <span class="comment">    /// Constructs an XML writer on a text writer</span>
<a name="l00206"></a>00206 <span class="comment">    /// </span>
<a name="l00207"></a>00207 <span class="comment">    /// \param writer </span>
<a name="l00208"></a>00208 <span class="comment">    /// Input the text writer.</span>
<a name="l00209"></a>00209 <span class="comment">    /// \param defaultRoot </span>
<a name="l00210"></a>00210 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00211"></a>00211 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00212"></a>00212 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00213"></a>00213 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00214"></a>00214 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00215"></a>00215 <span class="comment">    /// \param lineFormat </span>
<a name="l00216"></a>00216 <span class="comment">    /// Input indentation string for XML elements. If NULL</span>
<a name="l00217"></a>00217 <span class="comment">    /// the XML document contains no line breaks and elements are not indented. </span>
<a name="l00218"></a>00218 <span class="comment">    /// if L"" then the XML document has a line break after every end element</span>
<a name="l00219"></a>00219 <span class="comment">    /// tag but no elements are indented. Otherwise, this string must only </span>
<a name="l00220"></a>00220 <span class="comment">    /// contain spaces or tabs; the XML document has a line break after every end element</span>
<a name="l00221"></a>00221 <span class="comment">    /// and each element start is prepended with a repetition of this string.</span>
<a name="l00222"></a>00222 <span class="comment">    /// The string is repeated according to the element's nesting level.</span>
<a name="l00223"></a>00223 <span class="comment">    /// \param lineLength </span>
<a name="l00224"></a>00224 <span class="comment">    /// Input maximum line length. If 0 there is </span>
<a name="l00225"></a>00225 <span class="comment">    /// no maximum. Otherwise, a line break is added before an XML attribute is</span>
<a name="l00226"></a>00226 <span class="comment">    /// written, if the attribute would have caused the current line to exceed</span>
<a name="l00227"></a>00227 <span class="comment">    /// this length.</span>
<a name="l00228"></a>00228 <span class="comment">    /// </span>
<a name="l00229"></a>00229 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoTextWriter* writer, System::Boolean defaultRoot, NAMESPACE_OSGEO_COMMON_XML::XmlWriter::LineFormat lineFormat, System::UInt32 lineLength);
<a name="l00230"></a>00230 <span class="comment"></span>
<a name="l00231"></a>00231 <span class="comment">    /// \brief</span>
<a name="l00232"></a>00232 <span class="comment">    /// Constructs an XML writer on a text writer</span>
<a name="l00233"></a>00233 <span class="comment">    /// </span>
<a name="l00234"></a>00234 <span class="comment">    /// \param writer </span>
<a name="l00235"></a>00235 <span class="comment">    /// Input the text writer.</span>
<a name="l00236"></a>00236 <span class="comment">    /// \param defaultRoot </span>
<a name="l00237"></a>00237 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00238"></a>00238 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00239"></a>00239 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00240"></a>00240 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00241"></a>00241 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00242"></a>00242 <span class="comment">    /// \param lineFormat </span>
<a name="l00243"></a>00243 <span class="comment">    /// Input indentation string for XML elements. If NULL</span>
<a name="l00244"></a>00244 <span class="comment">    /// the XML document contains no line breaks and elements are not indented. </span>
<a name="l00245"></a>00245 <span class="comment">    /// if L"" then the XML document has a line break after every end element</span>
<a name="l00246"></a>00246 <span class="comment">    /// tag but no elements are indented. Otherwise, this string must only </span>
<a name="l00247"></a>00247 <span class="comment">    /// contain spaces or tabs; the XML document has a line break after every end element</span>
<a name="l00248"></a>00248 <span class="comment">    /// and each element start is prepended with a repetition of this string.</span>
<a name="l00249"></a>00249 <span class="comment">    /// The string is repeated according to the element's nesting level.</span>
<a name="l00250"></a>00250 <span class="comment">    /// </span>
<a name="l00251"></a>00251 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoTextWriter* writer, System::Boolean defaultRoot, NAMESPACE_OSGEO_COMMON_XML::XmlWriter::LineFormat lineFormat);
<a name="l00252"></a>00252 <span class="comment"></span>
<a name="l00253"></a>00253 <span class="comment">    /// \brief</span>
<a name="l00254"></a>00254 <span class="comment">    /// Constructs an XML writer on a text writer</span>
<a name="l00255"></a>00255 <span class="comment">    /// </span>
<a name="l00256"></a>00256 <span class="comment">    /// \param writer </span>
<a name="l00257"></a>00257 <span class="comment">    /// Input the text writer.</span>
<a name="l00258"></a>00258 <span class="comment">    /// \param defaultRoot </span>
<a name="l00259"></a>00259 <span class="comment">    /// true: all elements written are wrapped in a default root element, named "DataStore".</span>
<a name="l00260"></a>00260 <span class="comment">    /// false: the default root element is not written. In this case, the first </span>
<a name="l00261"></a>00261 <span class="comment">    /// element written (via  WriteStartElement() ) becomes the root element. </span>
<a name="l00262"></a>00262 <span class="comment">    /// The caller is responsible for ensuring that only one root element is written </span>
<a name="l00263"></a>00263 <span class="comment">    /// (the XML standard disallows multiple root elements).</span>
<a name="l00264"></a>00264 <span class="comment">    /// </span>
<a name="l00265"></a>00265 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoTextWriter* writer, System::Boolean defaultRoot);
<a name="l00266"></a>00266 <span class="comment"></span>
<a name="l00267"></a>00267 <span class="comment">    /// \brief</span>
<a name="l00268"></a>00268 <span class="comment">    /// Constructs an XML writer on a text writer</span>
<a name="l00269"></a>00269 <span class="comment">    /// </span>
<a name="l00270"></a>00270 <span class="comment">    /// \param writer </span>
<a name="l00271"></a>00271 <span class="comment">    /// Input the text writer.</span>
<a name="l00272"></a>00272 <span class="comment">    /// </span>
<a name="l00273"></a>00273 <span class="comment"></span>    <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(NAMESPACE_OSGEO_COMMON_IO::IoTextWriter* writer);
<a name="l00274"></a>00274 <span class="comment"></span>
<a name="l00275"></a>00275 <span class="comment">    /// \brief</span>
<a name="l00276"></a>00276 <span class="comment">    /// Gets the underlying text writer. If a text writer was passed to this object</span>
<a name="l00277"></a>00277 <span class="comment">    /// then this text writeer is returned.</span>
<a name="l00278"></a>00278 <span class="comment">    /// Otherwise, an auto-generated text writer is returned (a text writer</span>
<a name="l00279"></a>00279 <span class="comment">    /// wrapped around the file name or stream that was passed to this object)</span>
<a name="l00280"></a>00280 <span class="comment">    /// </span>
<a name="l00281"></a>00281 <span class="comment">    /// \return</span>
<a name="l00282"></a>00282 <span class="comment">    /// Returns the underlying text writer</span>
<a name="l00283"></a>00283 <span class="comment">    /// </span>
<a name="l00284"></a>00284 <span class="comment"></span>    __property NAMESPACE_OSGEO_COMMON_IO::IoTextWriter* get_TextWriter();
<a name="l00285"></a>00285 <span class="comment"></span>
<a name="l00286"></a>00286 <span class="comment">    /// \brief</span>
<a name="l00287"></a>00287 <span class="comment">    /// Gets the underlying stream. If a text writer was passed to this object</span>
<a name="l00288"></a>00288 <span class="comment">    /// then the stream for this text writer is returned.</span>
<a name="l00289"></a>00289 <span class="comment">    /// If a stream was passed to this object then this stream is returned.</span>
<a name="l00290"></a>00290 <span class="comment">    /// If a file name as passed then a auto-generated stream (wrapped around</span>
<a name="l00291"></a>00291 <span class="comment">    /// the file) is returned.</span>
<a name="l00292"></a>00292 <span class="comment">    /// </span>
<a name="l00293"></a>00293 <span class="comment">    /// \return</span>
<a name="l00294"></a>00294 <span class="comment">    /// Returns the underlying stream</span>
<a name="l00295"></a>00295 <span class="comment">    /// </span>
<a name="l00296"></a>00296 <span class="comment"></span>    __property NAMESPACE_OSGEO_COMMON_IO::IoStream* get_Stream();
<a name="l00297"></a>00297 <span class="comment"></span>
<a name="l00298"></a>00298 <span class="comment">    /// \brief</span>
<a name="l00299"></a>00299 <span class="comment">    /// Gets the current default root state.</span>
<a name="l00300"></a>00300 <span class="comment">    /// </span>
<a name="l00301"></a>00301 <span class="comment">    /// \return</span>
<a name="l00302"></a>00302 <span class="comment">    /// Returns true if the default root element will be written, false otherwise.</span>
<a name="l00303"></a>00303 <span class="comment">    /// </span>
<a name="l00304"></a>00304 <span class="comment"></span>    __property System::Boolean get_DefaultRoot();
<a name="l00305"></a>00305 <span class="comment"></span>
<a name="l00306"></a>00306 <span class="comment">    /// \brief</span>
<a name="l00307"></a>00307 <span class="comment">    /// Sets whether to write the default root element.</span>
<a name="l00308"></a>00308 <span class="comment">    /// Must be called before the first element is written,</span>
<a name="l00309"></a>00309 <span class="comment">    /// otherwise an exception is thrown</span>
<a name="l00310"></a>00310 <span class="comment">    /// </span>
<a name="l00311"></a>00311 <span class="comment">    /// \param defaultRoot </span>
<a name="l00312"></a>00312 <span class="comment">    /// true: use the default root element ("DataStore") as the root element.</span>
<a name="l00313"></a>00313 <span class="comment">    /// false: caller is responsible for writing the root element.</span>
<a name="l00314"></a>00314 <span class="comment">    /// </span>
<a name="l00315"></a>00315 <span class="comment"></span>    __property System::Void  set_DefaultRoot(System::Boolean defaultRoot );
<a name="l00316"></a>00316 <span class="comment"></span>
<a name="l00317"></a>00317 <span class="comment">    /// \brief</span>
<a name="l00318"></a>00318 <span class="comment">    /// Closes this XML Writer by writing end tags for all</span>
<a name="l00319"></a>00319 <span class="comment">    /// elements currently open. Once this function is called, no more</span>
<a name="l00320"></a>00320 <span class="comment">    /// elements can be added to the output document.</span>
<a name="l00321"></a>00321 <span class="comment">    /// </span>
<a name="l00322"></a>00322 <span class="comment"></span>    System::Void <a class="code" href="../../df/d8f/namespace_o_s_geo_1_1_f_d_o_1_1_connections_87f46db603d5eebca02aebc91c304152.htm#87f46db603d5eebca02aebc91c304152">Close</a>();
<a name="l00323"></a>00323 <span class="comment"></span>
<a name="l00324"></a>00324 <span class="comment">    /// \brief</span>
<a name="l00325"></a>00325 <span class="comment">    /// Writes an element start tag to the document</span>
<a name="l00326"></a>00326 <span class="comment">    /// </span>
<a name="l00327"></a>00327 <span class="comment">    /// \param elementName </span>
<a name="l00328"></a>00328 <span class="comment">    /// Input the element name. Must be a valid</span>
<a name="l00329"></a>00329 <span class="comment">    /// XML 1.0 element name.</span>
<a name="l00330"></a>00330 <span class="comment">    /// </span>
<a name="l00331"></a>00331 <span class="comment"></span>    System::Void WriteStartElement(System::String* elementName );
<a name="l00332"></a>00332 <span class="comment"></span>
<a name="l00333"></a>00333 <span class="comment">    /// \brief</span>
<a name="l00334"></a>00334 <span class="comment">    /// Writes the end tag for the current element to the document.</span>
<a name="l00335"></a>00335 <span class="comment">    /// An Exception is thrown if there is no element to end.</span>
<a name="l00336"></a>00336 <span class="comment">    /// </span>
<a name="l00337"></a>00337 <span class="comment"></span>    System::Void WriteEndElement();
<a name="l00338"></a>00338 <span class="comment"></span>
<a name="l00339"></a>00339 <span class="comment">    /// \brief</span>
<a name="l00340"></a>00340 <span class="comment">    /// Writes an attribute to the current element.</span>
<a name="l00341"></a>00341 <span class="comment">    /// An Exception is thrown if this function is called immediately after</span>
<a name="l00342"></a>00342 <span class="comment">    /// WriteEndElement().</span>
<a name="l00343"></a>00343 <span class="comment">    /// </span>
<a name="l00344"></a>00344 <span class="comment">    /// \param attributeName </span>
<a name="l00345"></a>00345 <span class="comment">    /// Input the element name. Must be a valid</span>
<a name="l00346"></a>00346 <span class="comment">    /// XML 1.0 attribute name.</span>
<a name="l00347"></a>00347 <span class="comment">    /// \param attributeValue </span>
<a name="l00348"></a>00348 <span class="comment">    /// Input the element value.</span>
<a name="l00349"></a>00349 <span class="comment">    /// </span>
<a name="l00350"></a>00350 <span class="comment"></span>    System::Void WriteAttribute( System::String* attributeName, System::String* attributeValue );
<a name="l00351"></a>00351 <span class="comment"></span>
<a name="l00352"></a>00352 <span class="comment">    /// \brief</span>
<a name="l00353"></a>00353 <span class="comment">    /// Writes simple (character) content for the current element. This function</span>
<a name="l00354"></a>00354 <span class="comment">    /// can be called multiple times for the same element. The characters are appended</span>
<a name="l00355"></a>00355 <span class="comment">    /// to the element's content. An Exception is thrown if there is no current </span>
<a name="l00356"></a>00356 <span class="comment">    /// element.</span>
<a name="l00357"></a>00357 <span class="comment">    /// </span>
<a name="l00358"></a>00358 <span class="comment">    /// \param characters </span>
<a name="l00359"></a>00359 <span class="comment">    /// Input characters to append to the element content.</span>
<a name="l00360"></a>00360 <span class="comment">    /// </span>
<a name="l00361"></a>00361 <span class="comment"></span>    System::Void WriteCharacters( System::String* characters );
<a name="l00362"></a>00362 <span class="comment"></span>
<a name="l00363"></a>00363 <span class="comment">    /// \brief</span>
<a name="l00364"></a>00364 <span class="comment">    /// Writes arbitrary bytes to the XML Writer. Caller is responsible</span>
<a name="l00365"></a>00365 <span class="comment">    /// for ensuring that the text does not introduce any errors into the </span>
<a name="l00366"></a>00366 <span class="comment">    /// XML document.</span>
<a name="l00367"></a>00367 <span class="comment">    /// </span>
<a name="l00368"></a>00368 <span class="comment">    /// \param bytes </span>
<a name="l00369"></a>00369 <span class="comment">    /// Input characters to write.</span>
<a name="l00370"></a>00370 <span class="comment">    /// </span>
<a name="l00371"></a>00371 <span class="comment">    /// \param count </span>
<a name="l00372"></a>00372 <span class="comment">    /// Input the number of bytes to write</span>
<a name="l00373"></a>00373 <span class="comment">    /// </span>
<a name="l00374"></a>00374 <span class="comment"></span>    System::Void WriteBytes( System::Byte bytes [],  System::UInt32 count );
<a name="l00375"></a>00375 <span class="comment"></span>
<a name="l00376"></a>00376 <span class="comment">    /// \brief</span>
<a name="l00377"></a>00377 <span class="comment">    /// utility function that converts FDO element names to valid XML</span>
<a name="l00378"></a>00378 <span class="comment">    /// element or attribute names. Conversion is done by changing each invalid </span>
<a name="l00379"></a>00379 <span class="comment">    /// character to a hex pattern ( "-xnnnn-" ).</span>
<a name="l00380"></a>00380 <span class="comment">    /// </span>
<a name="l00381"></a>00381 <span class="comment">    /// \param name </span>
<a name="l00382"></a>00382 <span class="comment">    /// Input the name to encode (convert).</span>
<a name="l00383"></a>00383 <span class="comment">    /// </span>
<a name="l00384"></a>00384 <span class="comment">    /// \return</span>
<a name="l00385"></a>00385 <span class="comment">    /// Returns the encoded name.</span>
<a name="l00386"></a>00386 <span class="comment">    /// </span>
<a name="l00387"></a>00387 <span class="comment"></span>    System::String* EncodeName(System::String* name);
<a name="l00388"></a>00388 <span class="comment"></span>
<a name="l00389"></a>00389 <span class="comment">    /// \brief</span>
<a name="l00390"></a>00390 <span class="comment">    /// Checks if a string is a valid XML 1.0 element or attribute name.</span>
<a name="l00391"></a>00391 <span class="comment">    /// </span>
<a name="l00392"></a>00392 <span class="comment">    /// \param name </span>
<a name="l00393"></a>00393 <span class="comment">    /// Input the string to check.</span>
<a name="l00394"></a>00394 <span class="comment">    /// </span>
<a name="l00395"></a>00395 <span class="comment">    /// \return</span>
<a name="l00396"></a>00396 <span class="comment">    /// Returns true if the string is a valid name, false otherwise.</span>
<a name="l00397"></a>00397 <span class="comment">    /// </span>
<a name="l00398"></a>00398 <span class="comment"></span>    System::Boolean IsValidName(System::String* name);
<a name="l00399"></a>00399 <span class="comment"></span>
<a name="l00400"></a>00400 <span class="comment">    /// \brief</span>
<a name="l00401"></a>00401 <span class="comment">    /// Given an element's or attribute's globally unique name ( uri and local name ),</span>
<a name="l00402"></a>00402 <span class="comment">    /// this function returns its fully qualified name as per the</span>
<a name="l00403"></a>00403 <span class="comment">    /// XML document being written, or the unqualified name if the uri is </span>
<a name="l00404"></a>00404 <span class="comment">    /// the default namespace. This is done by searching for the current </span>
<a name="l00405"></a>00405 <span class="comment">    /// namespace declaration that references the uri. </span>
<a name="l00406"></a>00406 <span class="comment">    /// </span>
<a name="l00407"></a>00407 <span class="comment">    /// \remarks</span>
<a name="l00408"></a>00408 <span class="comment">    /// If a matching default namespace declaration ( "xmlns=&lt;uri&gt;" ) was</span>
<a name="l00409"></a>00409 <span class="comment">    /// found and the name is for an element then the localName is returned.</span>
<a name="l00410"></a>00410 <span class="comment">    /// \note</span>
<a name="l00411"></a>00411 <span class="comment">    /// According to the XML 1.0 specification, default namespaces do </span>
<a name="l00412"></a>00412 <span class="comment">    /// not apply to attribute names, so the default namespace is ignored when the </span>
<a name="l00413"></a>00413 <span class="comment">    /// given name is not for an element.</span>
<a name="l00414"></a>00414 <span class="comment">    /// \n</span>
<a name="l00415"></a>00415 <span class="comment">    /// Otherwise, if a matching namespace declaration was found then </span>
<a name="l00416"></a>00416 <span class="comment">    /// "[namespace]:[localName]" is returned.</span>
<a name="l00417"></a>00417 <span class="comment">    /// \n</span>
<a name="l00418"></a>00418 <span class="comment">    /// Otherwise, L"" is returned (unable to determine qualified name).</span>
<a name="l00419"></a>00419 <span class="comment">    /// </span>
<a name="l00420"></a>00420 <span class="comment">    /// \param location </span>
<a name="l00421"></a>00421 <span class="comment">    /// Input the URI corresponding to an element.</span>
<a name="l00422"></a>00422 <span class="comment">    /// \param localName </span>
<a name="l00423"></a>00423 <span class="comment">    /// Input the local name corresponding to an element.</span>
<a name="l00424"></a>00424 <span class="comment">    /// \param isElement </span>
<a name="l00425"></a>00425 <span class="comment">    /// Input a boolean flag indicating that the URI corresponds to an element.</span>
<a name="l00426"></a>00426 <span class="comment">    /// </span>
<a name="l00427"></a>00427 <span class="comment">    /// \return</span>
<a name="l00428"></a>00428 <span class="comment">    /// Returns the fully qualified name corresponding to the uri.</span>
<a name="l00429"></a>00429 <span class="comment">    /// </span>
<a name="l00430"></a>00430 <span class="comment"></span>    System::String* UriToQName( System::String* location, System::String* localName, System::Boolean isElement);
<a name="l00431"></a>00431     System::String* UriToQName( System::String* location, System::String* localName);
<a name="l00432"></a>00432 <span class="comment"></span>
<a name="l00433"></a>00433 <span class="comment">/// \cond DOXYGEN-IGNORE</span>
<a name="l00434"></a>00434 <span class="comment"></span><span class="keyword">protected</span>:
<a name="l00435"></a>00435     System::Void ReleaseUnmanagedObject();
<a name="l00436"></a>00436 
<a name="l00437"></a>00437 <span class="keyword">public</span> <span class="keyword">private</span>:
<a name="l00438"></a>00438     <a class="code" href="../../de/d67/class_o_s_geo_1_1_f_d_o_1_1_common_1_1_xml_1_1_xml_writer.htm">XmlWriter</a>(System::IntPtr unmanaged, System::Boolean autoDelete);
<a name="l00439"></a>00439 
<a name="l00440"></a>00440     <span class="keyword">inline</span> FdoXmlWriter* GetImpObj();<span class="comment"></span>
<a name="l00441"></a>00441 <span class="comment">/// \endcond</span>
<a name="l00442"></a>00442 <span class="comment"></span>};
<a name="l00443"></a>00443 <a class="code" href="../../d8/d30/_common_namespace_8h_723bd348854811d01a9e6068933fcd2c.htm#723bd348854811d01a9e6068933fcd2c">END_NAMESPACE_OSGEO_COMMON_XML</a>
<a name="l00444"></a>00444 
<a name="l00445"></a>00445 
</pre></div><!-- footer.html -->
		<hr>
		<table width="100%"  border="0">
			<tr>
				<td>Comments or suggestions? Send us <a href="mailto:isd.docs@autodesk.com&subject=FDO%20.NET%20API%20documentation">feedback</a>.</td>
				<!-- The logo can go in another cell, when we get one -->			
			</tr>
		</table>
	</body>
</html>
