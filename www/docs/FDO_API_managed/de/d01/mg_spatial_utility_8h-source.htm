<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"	"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>FDO .NET API Reference</title>
		<link href="../../custom.css" rel="stylesheet" type="text/css">
		<link href="../../tabs.css" rel="stylesheet" type="text/css">
	</head>
	<body bgcolor="#FFFFFF">
		<table width="100%"  border="0">
			<tr>
				<td><b>FDO .NET API Reference<b></td>
				<td align="right"><b>Feature Data Objects<b></td>
			</tr>
			
		</table>
<!-- End of: header.html -->
<!-- Generated by Doxygen 1.5.1-p1 -->
<div class="tabs">
  <ul>
    <li><a href="../../main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="../../modules.htm"><span>Modules</span></a></li>
    <li><a href="../../namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="../../classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="../../files.htm"><span>Files</span></a></li>
    <li><a href="../../pages.htm"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="../../files.htm"><span>File&nbsp;List</span></a></li>
    <li><a href="../../globals.htm"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>mgSpatialUtility.h</h1><a href="../../dd/d35/mg_spatial_utility_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2004-2006  Autodesk, Inc.</span>
<a name="l00003"></a>00003 <span class="comment">* </span>
<a name="l00004"></a>00004 <span class="comment">* This library is free software; you can redistribute it and/or</span>
<a name="l00005"></a>00005 <span class="comment">* modify it under the terms of version 2.1 of the GNU Lesser</span>
<a name="l00006"></a>00006 <span class="comment">* General Public License as published by the Free Software Foundation.</span>
<a name="l00007"></a>00007 <span class="comment">* </span>
<a name="l00008"></a>00008 <span class="comment">* This library is distributed in the hope that it will be useful,</span>
<a name="l00009"></a>00009 <span class="comment">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00010"></a>00010 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00011"></a>00011 <span class="comment">* Lesser General Public License for more details.</span>
<a name="l00012"></a>00012 <span class="comment">* </span>
<a name="l00013"></a>00013 <span class="comment">* You should have received a copy of the GNU Lesser General Public</span>
<a name="l00014"></a>00014 <span class="comment">* License along with this library; if not, write to the Free Software</span>
<a name="l00015"></a>00015 <span class="comment">* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">*/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#pragma once</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "<a class="code" href="../../dc/d87/mg_spatial_geometry_validity_8h.htm">mgSpatialGeometryValidity.h</a>"</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <a class="code" href="../../d8/d30/_common_namespace_8h_8e6db5aa0178f499f0a16414b217a0d1.htm#8e6db5aa0178f499f0a16414b217a0d1">BEGIN_NAMESPACE_OSGEO_GEOMETRY</a>
<a name="l00024"></a><a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">00024</a> <span class="keyword">public</span> __gc __interface <a class="code" href="../../d2/d94/interface_o_s_geo_1_1_f_d_o_1_1_geometry_1_1_i_geometry.htm">IGeometry</a>;
<a name="l00025"></a><a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_0bcbdb0934462dcd2e1e48b364f78391.htm#0bcbdb0934462dcd2e1e48b364f78391">00025</a> <span class="keyword">public</span> __gc __interface <a class="code" href="../../d6/d12/interface_o_s_geo_1_1_f_d_o_1_1_geometry_1_1_i_linear_ring.htm">ILinearRing</a>;
<a name="l00026"></a><a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_1b65104bc639e3218ed24a8885ba1f6a.htm#1b65104bc639e3218ed24a8885ba1f6a">00026</a> <span class="keyword">public</span> __gc __interface <a class="code" href="../../d8/d5f/interface_o_s_geo_1_1_f_d_o_1_1_geometry_1_1_i_circular_arc_segment.htm">ICircularArcSegment</a>;
<a name="l00027"></a>00027 <span class="keyword">public</span> __gc <span class="keyword">class </span><a class="code" href="../../d8/d59/class_o_s_geo_1_1_f_d_o_1_1_geometry_1_1_object_factory.htm">ObjectFactory</a>;
<a name="l00028"></a><a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_afc25249d9349911d3c1ff97698e6a88.htm#afc25249d9349911d3c1ff97698e6a88">00028</a> <span class="keyword">public</span> __gc <span class="keyword">class </span><a class="code" href="../../d7/d8a/class_o_s_geo_1_1_f_d_o_1_1_geometry_1_1_geometry_factory_abstract.htm">GeometryFactoryAbstract</a>;
<a name="l00029"></a>00029 <span class="keyword">public</span> __gc __interface <a class="code" href="../../d5/d22/interface_o_s_geo_1_1_f_d_o_1_1_geometry_1_1_i_polygon.htm">IPolygon</a>;
<a name="l00030"></a>00030 <a class="code" href="../../d8/d30/_common_namespace_8h_5e750281f75430816d61ca45691b080e.htm#5e750281f75430816d61ca45691b080e">END_NAMESPACE_OSGEO_GEOMETRY</a>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">class </span>FdoSpatialUtility;
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <a class="code" href="../../d8/d30/_common_namespace_8h_efa59551efea12685e177039a121fba8.htm#efa59551efea12685e177039a121fba8">BEGIN_NAMESPACE_OSGEO_SPATIAL</a>
<a name="l00035"></a>00035 <span class="comment"></span>
<a name="l00036"></a>00036 <span class="comment">/// \ingroup (OSGeoFDOSpatial)</span>
<a name="l00037"></a>00037 <span class="comment">/// \brief</span>
<a name="l00038"></a>00038 <span class="comment">/// A Spatial utility class.</span>
<a name="l00039"></a><a class="code" href="../../df/ded/class_o_s_geo_1_1_f_d_o_1_1_spatial_1_1_spatial_utility.htm">00039</a> <span class="comment"></span><span class="keyword">public</span> __gc __sealed <span class="keyword">class </span><a class="code" href="../../df/ded/class_o_s_geo_1_1_f_d_o_1_1_spatial_1_1_spatial_utility.htm">SpatialUtility</a>
<a name="l00040"></a>00040 {
<a name="l00041"></a>00041 <span class="keyword">public</span>:<span class="comment"></span>
<a name="l00042"></a>00042 <span class="comment">    /// \brief</span>
<a name="l00043"></a>00043 <span class="comment">    /// Approximates a geometry, which may contain parametric curve components,</span>
<a name="l00044"></a>00044 <span class="comment">    /// with a geometry that only contains straight, linear components.</span>
<a name="l00045"></a>00045 <span class="comment">    /// </span>
<a name="l00046"></a>00046 <span class="comment">    /// \remarks</span>
<a name="l00047"></a>00047 <span class="comment">    /// If the given geometry does not require approximation, this method returns</span>
<a name="l00048"></a>00048 <span class="comment">    /// the input geometry, and thus avoids unnecessary object creation.</span>
<a name="l00049"></a>00049 <span class="comment">    /// Tolerances are in same units as the geometry's ordinates.</span>
<a name="l00050"></a>00050 <span class="comment">    /// If the given tolerances are both zero, a tesselated geometry is produced, </span>
<a name="l00051"></a>00051 <span class="comment">    /// wherein arcs are represented using only their three defining positions.</span>
<a name="l00052"></a>00052 <span class="comment">    /// Math performed is all in implicit Cartesian (rectilinear) coordinate system.</span>
<a name="l00053"></a>00053 <span class="comment">    /// Measurement ("M") ordinates of interpolated positions undergo linear </span>
<a name="l00054"></a>00054 <span class="comment">    /// interpolation from an arc's start position to end position (possibly disregarding</span>
<a name="l00055"></a>00055 <span class="comment">    /// an "M" ordinate in the arc's mid position).</span>
<a name="l00056"></a>00056 <span class="comment">    /// Unless the arc is too short for any interpolation, the "mid" point parameter</span>
<a name="l00057"></a>00057 <span class="comment">    /// used to define arcs is not guaranteed to appear among interpolated points.</span>
<a name="l00058"></a>00058 <span class="comment">    /// </span>
<a name="l00059"></a>00059 <span class="comment">    /// \param geometry </span>
<a name="l00060"></a>00060 <span class="comment">    /// Input Geometry to approximate</span>
<a name="l00061"></a>00061 <span class="comment">    /// \param maxSpacing </span>
<a name="l00062"></a>00062 <span class="comment">    /// Input Maximum length of each line segment used to approximate parametric curves. Ignored if zero.</span>
<a name="l00063"></a>00063 <span class="comment">    /// \param maxOffset </span>
<a name="l00064"></a>00064 <span class="comment">    /// Input Maximum distance that a line segment may be from the curve that it approximates (error tolerance). Ignored if zero.</span>
<a name="l00065"></a>00065 <span class="comment">    /// \param geometryFactory </span>
<a name="l00066"></a>00066 <span class="comment">    /// Input Geometry factory for the creation of the approximated geometry.</span>
<a name="l00067"></a>00067 <span class="comment">    /// </span>
<a name="l00068"></a>00068 <span class="comment">    /// \return</span>
<a name="l00069"></a>00069 <span class="comment">    /// Returns An approximation of the given geometry.</span>
<a name="l00070"></a>00070 <span class="comment">    /// </span>
<a name="l00071"></a>00071 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a> * ApproximateGeometryWithLineStrings(<a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a> * geometry, System::Double maxSpacing, System::Double maxOffset, NAMESPACE_OSGEO_GEOMETRY::GeometryFactoryAbstract * geometryFactory);
<a name="l00072"></a>00072 <span class="comment"></span>
<a name="l00073"></a>00073 <span class="comment">    /// \brief</span>
<a name="l00074"></a>00074 <span class="comment">    /// Tests whether a geometry can be supported using the given types and dimensionality.</span>
<a name="l00075"></a>00075 <span class="comment">    /// </span>
<a name="l00076"></a>00076 <span class="comment">    /// \param geometry </span>
<a name="l00077"></a>00077 <span class="comment">    /// Input Geometry to validate</span>
<a name="l00078"></a>00078 <span class="comment">    /// \param geometryTypes </span>
<a name="l00079"></a>00079 <span class="comment">    /// Input Array of allowed geometry types. NULL is valid if geometryTypesCount is zero.</span>
<a name="l00080"></a>00080 <span class="comment">    /// \param geometryComponentTypes </span>
<a name="l00081"></a>00081 <span class="comment">    /// Input Array of allowed geometry component types. NULL is valid if geometryComponentTypesCount is zero.</span>
<a name="l00082"></a>00082 <span class="comment">    /// \param dimensionality </span>
<a name="l00083"></a>00083 <span class="comment">    /// Input Bit-mask of allowed dimensionalities (see Dimensionality).</span>
<a name="l00084"></a>00084 <span class="comment">    /// </span>
<a name="l00085"></a>00085 <span class="comment">    /// \return</span>
<a name="l00086"></a>00086 <span class="comment">    /// Returns An enumeration indicating support for the given geometry.</span>
<a name="l00087"></a>00087 <span class="comment">    /// </span>
<a name="l00088"></a>00088 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../d9/d1f/group___o_s_geo_f_d_o_spatial_g01dc534a921e328a28d185c8fde5f0b7.htm#g01dc534a921e328a28d185c8fde5f0b7">NAMESPACE_OSGEO_SPATIAL::SpatialGeometryValidity</a> ValidateGeometryByType(<a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a> * geometry, <a class="code" href="../../d5/d44/group___o_s_geo_f_d_o_common_g1b753fd9c2659910ca1a042a05b56be6.htm#g1b753fd9c2659910ca1a042a05b56be6">NAMESPACE_OSGEO_COMMON::GeometryType</a> geometryTypes [], <a class="code" href="../../d5/d44/group___o_s_geo_f_d_o_common_gc01937dfff8ca91b71a9e69ded4747b3.htm#gc01937dfff8ca91b71a9e69ded4747b3">NAMESPACE_OSGEO_COMMON::GeometryComponentType</a> geometryComponentTypes [], System::Int32 dimensionality);
<a name="l00089"></a>00089 <span class="comment"></span>
<a name="l00090"></a>00090 <span class="comment">    /// \brief</span>
<a name="l00091"></a>00091 <span class="comment">    /// Evaluates if two FDO geometric objects spatially interact with each other based on a user supplied spatial operator.</span>
<a name="l00092"></a>00092 <span class="comment">    /// For example: Contains, Crosses, Disjoint, Equals, Intersects, Overlaps, Touches, Within, CoveredBy, Inside, EnvelopeIntersects.</span>
<a name="l00093"></a>00093 <span class="comment">    /// </span>
<a name="l00094"></a>00094 <span class="comment">    /// \param g1 </span>
<a name="l00095"></a>00095 <span class="comment">    /// Input Left hand Geometry to Evaluate</span>
<a name="l00096"></a>00096 <span class="comment">    /// \param op </span>
<a name="l00097"></a>00097 <span class="comment">    /// Input The spatial operation to apply to the left and right hand geometries </span>
<a name="l00098"></a>00098 <span class="comment">    /// \param g2 </span>
<a name="l00099"></a>00099 <span class="comment">    /// Input Right hand Geometry to Evaluate</span>
<a name="l00100"></a>00100 <span class="comment">    /// </span>
<a name="l00101"></a>00101 <span class="comment">    /// \return</span>
<a name="l00102"></a>00102 <span class="comment">    /// Returns The tesselated Geometry.</span>
<a name="l00103"></a>00103 <span class="comment">    /// </span>
<a name="l00104"></a>00104 <span class="comment"></span>    <span class="keyword">static</span> System::Boolean Evaluate(<a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a> * g1, <a class="code" href="../../d4/da7/group___o_s_geo_f_d_o_filter_g10709fa72eaae34c583b8fa433087b9b.htm#g10709fa72eaae34c583b8fa433087b9b">NAMESPACE_OSGEO_FDO_FILTER::SpatialOperations</a> op, <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a> * g2);
<a name="l00105"></a>00105 <span class="comment"></span>
<a name="l00106"></a>00106 <span class="comment">    /// \brief</span>
<a name="l00107"></a>00107 <span class="comment">    /// Tesselates a curve geometry into a set of line strings that approximate the curve geometry.</span>
<a name="l00108"></a>00108 <span class="comment">    /// </span>
<a name="l00109"></a>00109 <span class="comment">    /// \param curve </span>
<a name="l00110"></a>00110 <span class="comment">    /// Input Geometry to tesselate </span>
<a name="l00111"></a>00111 <span class="comment">    /// </span>
<a name="l00112"></a>00112 <span class="comment">    /// \return</span>
<a name="l00113"></a>00113 <span class="comment">    /// Returns The tesselated Geometry.</span>
<a name="l00114"></a>00114 <span class="comment">    /// </span>
<a name="l00115"></a>00115 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a>* TesselateCurve( <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a>* curve);
<a name="l00116"></a>00116 <span class="comment"></span>
<a name="l00117"></a>00117 <span class="comment">    /// \brief</span>
<a name="l00118"></a>00118 <span class="comment">    /// Gets the extents of a geometry contained in a byte array.</span>
<a name="l00119"></a>00119 <span class="comment">    /// </span>
<a name="l00120"></a>00120 <span class="comment">    /// \param bytes </span>
<a name="l00121"></a>00121 <span class="comment">    /// Input Geometry whose extents will be returned</span>
<a name="l00122"></a>00122 <span class="comment">    /// \param minX </span>
<a name="l00123"></a>00123 <span class="comment">    /// Output The minimim x position of the geometry</span>
<a name="l00124"></a>00124 <span class="comment">    /// \param minY </span>
<a name="l00125"></a>00125 <span class="comment">    /// Output The minimim y position of the geometry</span>
<a name="l00126"></a>00126 <span class="comment">    /// \param maxX </span>
<a name="l00127"></a>00127 <span class="comment">    /// Output The maximum x position of the geometry</span>
<a name="l00128"></a>00128 <span class="comment">    /// \param maxY </span>
<a name="l00129"></a>00129 <span class="comment">    /// Output The maximum y position of the geometry</span>
<a name="l00130"></a>00130 <span class="comment">    /// </span>
<a name="l00131"></a>00131 <span class="comment"></span>    <span class="keyword">static</span> System::Void GetExtents(System::Byte bytes [],  System::Double* minX, System::Double* minY, System::Double* maxX,  System::Double* maxY);
<a name="l00132"></a>00132 <span class="comment"></span>
<a name="l00133"></a>00133 <span class="comment">    /// \brief</span>
<a name="l00134"></a>00134 <span class="comment">    /// Gets the extents of a geometry contained in a byte array.</span>
<a name="l00135"></a>00135 <span class="comment">    /// </span>
<a name="l00136"></a>00136 <span class="comment">    /// \param bytes </span>
<a name="l00137"></a>00137 <span class="comment">    /// Input Geometry whose extents will be returned</span>
<a name="l00138"></a>00138 <span class="comment">    /// \param minX </span>
<a name="l00139"></a>00139 <span class="comment">    /// Output The minimim x position of the geometry</span>
<a name="l00140"></a>00140 <span class="comment">    /// \param minY </span>
<a name="l00141"></a>00141 <span class="comment">    /// Output The minimim y position of the geometry</span>
<a name="l00142"></a>00142 <span class="comment">    /// \param minZ </span>
<a name="l00143"></a>00143 <span class="comment">    /// Output The minimim z position of the geometry</span>
<a name="l00144"></a>00144 <span class="comment">    /// \param maxX </span>
<a name="l00145"></a>00145 <span class="comment">    /// Output The maximum x position of the geometry</span>
<a name="l00146"></a>00146 <span class="comment">    /// \param maxY </span>
<a name="l00147"></a>00147 <span class="comment">    /// Output The maximum y position of the geometry</span>
<a name="l00148"></a>00148 <span class="comment">    /// \param maxZ </span>
<a name="l00149"></a>00149 <span class="comment">    /// Output The maximum z position of the geometry</span>
<a name="l00150"></a>00150 <span class="comment">    /// </span>
<a name="l00151"></a>00151 <span class="comment"></span>    <span class="keyword">static</span> System::Void GetExtents(System::Byte bytes [],  System::Double* minX, System::Double* minY, System::Double* minZ, System::Double* maxX,  System::Double* maxY, System::Double* maxZ);
<a name="l00152"></a>00152 <span class="comment"></span>
<a name="l00153"></a>00153 <span class="comment">    /// \brief</span>
<a name="l00154"></a>00154 <span class="comment">    /// Tests whether a point is within a ring or not.</span>
<a name="l00155"></a>00155 <span class="comment">    /// </span>
<a name="l00156"></a>00156 <span class="comment">    /// \param ring </span>
<a name="l00157"></a>00157 <span class="comment">    /// Input Ring to test</span>
<a name="l00158"></a>00158 <span class="comment">    /// \param coordinateX </span>
<a name="l00159"></a>00159 <span class="comment">    /// Input X ordinate.</span>
<a name="l00160"></a>00160 <span class="comment">    /// \param coordinateY </span>
<a name="l00161"></a>00161 <span class="comment">    /// Input Y ordinate.</span>
<a name="l00162"></a>00162 <span class="comment">    /// \param isOnBoundary </span>
<a name="l00163"></a>00163 <span class="comment">    /// Output Specifies if the specified point is on the boundary of the ring.</span>
<a name="l00164"></a>00164 <span class="comment">    /// </span>
<a name="l00165"></a>00165 <span class="comment">    /// \return</span>
<a name="l00166"></a>00166 <span class="comment">    /// Returns TRUE if the point is within ring or on its boundary, FALSE otherwise.</span>
<a name="l00167"></a>00167 <span class="comment">    /// </span>
<a name="l00168"></a>00168 <span class="comment"></span>    <span class="keyword">static</span> System::Boolean PointInRing( <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_0bcbdb0934462dcd2e1e48b364f78391.htm#0bcbdb0934462dcd2e1e48b364f78391">NAMESPACE_OSGEO_GEOMETRY::ILinearRing</a>* ring, System::Double coordinateX, System::Double coordinateY, System::Boolean* isOnBoundary);
<a name="l00169"></a>00169 <span class="comment"></span>
<a name="l00170"></a>00170 <span class="comment">    /// \brief</span>
<a name="l00171"></a>00171 <span class="comment">    /// Tests whether a point is within a ring or not.</span>
<a name="l00172"></a>00172 <span class="comment">    /// </span>
<a name="l00173"></a>00173 <span class="comment">    /// \param ring </span>
<a name="l00174"></a>00174 <span class="comment">    /// Input Ring to test</span>
<a name="l00175"></a>00175 <span class="comment">    /// \param coordinateX </span>
<a name="l00176"></a>00176 <span class="comment">    /// Input X ordinate.</span>
<a name="l00177"></a>00177 <span class="comment">    /// \param coordinateY </span>
<a name="l00178"></a>00178 <span class="comment">    /// Input Y ordinate.</span>
<a name="l00179"></a>00179 <span class="comment">    /// </span>
<a name="l00180"></a>00180 <span class="comment">    /// \return</span>
<a name="l00181"></a>00181 <span class="comment">    /// Returns TRUE if the point is within ring or on its boundary, FALSE otherwise.</span>
<a name="l00182"></a>00182 <span class="comment">    /// </span>
<a name="l00183"></a>00183 <span class="comment"></span>    <span class="keyword">static</span> System::Boolean PointInRing( <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_0bcbdb0934462dcd2e1e48b364f78391.htm#0bcbdb0934462dcd2e1e48b364f78391">NAMESPACE_OSGEO_GEOMETRY::ILinearRing</a>* ring, System::Double coordinateX, System::Double coordinateY);
<a name="l00184"></a>00184 <span class="comment"></span>
<a name="l00185"></a>00185 <span class="comment">    /// \brief</span>
<a name="l00186"></a>00186 <span class="comment">    /// Tests whether a point is within a polygon (including its islands) or not.</span>
<a name="l00187"></a>00187 <span class="comment">    /// </span>
<a name="l00188"></a>00188 <span class="comment">    /// \param polygon </span>
<a name="l00189"></a>00189 <span class="comment">    /// Input Polygon to test</span>
<a name="l00190"></a>00190 <span class="comment">    /// \param coordinateX </span>
<a name="l00191"></a>00191 <span class="comment">    /// Input X ordinate.</span>
<a name="l00192"></a>00192 <span class="comment">    /// \param coordinateY </span>
<a name="l00193"></a>00193 <span class="comment">    /// Input Y ordinate.</span>
<a name="l00194"></a>00194 <span class="comment">    /// \param isOnExtBoundary </span>
<a name="l00195"></a>00195 <span class="comment">    /// Output Specifies if the specified point is on the exterior boundary of the polygon.</span>
<a name="l00196"></a>00196 <span class="comment">    /// \param isOnInBoundary </span>
<a name="l00197"></a>00197 <span class="comment">    /// Output Specifies if the specified point is on the interior boundary of the polygon.</span>
<a name="l00198"></a>00198 <span class="comment">    /// </span>
<a name="l00199"></a>00199 <span class="comment">    /// \return</span>
<a name="l00200"></a>00200 <span class="comment">    /// Returns TRUE if the point is within polygon or on its boundary, FALSE otherwise.</span>
<a name="l00201"></a>00201 <span class="comment">    /// </span>
<a name="l00202"></a>00202 <span class="comment"></span>    <span class="keyword">static</span> System::Boolean PointInPolygon(<a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_afc25249d9349911d3c1ff97698e6a88.htm#afc25249d9349911d3c1ff97698e6a88">NAMESPACE_OSGEO_GEOMETRY::IPolygon</a>* polygon, System::Double coordinateX, System::Double coordinateY, System::Boolean * isOnExtBoundary, System::Boolean * isOnInBoundary);
<a name="l00203"></a>00203 <span class="comment"></span>
<a name="l00204"></a>00204 <span class="comment">    /// \brief</span>
<a name="l00205"></a>00205 <span class="comment">    /// Tests whether a point is within a polygon (including its islands) or not.</span>
<a name="l00206"></a>00206 <span class="comment">    /// </span>
<a name="l00207"></a>00207 <span class="comment">    /// \param polygon </span>
<a name="l00208"></a>00208 <span class="comment">    /// Input Polygon to test</span>
<a name="l00209"></a>00209 <span class="comment">    /// \param coordinateX </span>
<a name="l00210"></a>00210 <span class="comment">    /// Input X ordinate.</span>
<a name="l00211"></a>00211 <span class="comment">    /// \param coordinateY </span>
<a name="l00212"></a>00212 <span class="comment">    /// Input Y ordinate.</span>
<a name="l00213"></a>00213 <span class="comment">    /// \param isOnExtBoundary </span>
<a name="l00214"></a>00214 <span class="comment">    /// Output Specifies if the specified point is on the exterior boundary of the polygon.</span>
<a name="l00215"></a>00215 <span class="comment">    /// </span>
<a name="l00216"></a>00216 <span class="comment">    /// \return</span>
<a name="l00217"></a>00217 <span class="comment">    /// Returns TRUE if the point is within polygon or on its boundary, FALSE otherwise.</span>
<a name="l00218"></a>00218 <span class="comment">    /// </span>
<a name="l00219"></a>00219 <span class="comment"></span>    <span class="keyword">static</span> System::Boolean PointInPolygon(<a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_afc25249d9349911d3c1ff97698e6a88.htm#afc25249d9349911d3c1ff97698e6a88">NAMESPACE_OSGEO_GEOMETRY::IPolygon</a>* polygon, System::Double coordinateX, System::Double coordinateY, System::Boolean * isOnExtBoundary);
<a name="l00220"></a>00220 <span class="comment"></span>
<a name="l00221"></a>00221 <span class="comment">    /// \brief</span>
<a name="l00222"></a>00222 <span class="comment">    /// Tests whether a point is within a polygon (including its islands) or not.</span>
<a name="l00223"></a>00223 <span class="comment">    /// </span>
<a name="l00224"></a>00224 <span class="comment">    /// \param polygon </span>
<a name="l00225"></a>00225 <span class="comment">    /// Input Polygon to test</span>
<a name="l00226"></a>00226 <span class="comment">    /// \param coordinateX </span>
<a name="l00227"></a>00227 <span class="comment">    /// Input X ordinate.</span>
<a name="l00228"></a>00228 <span class="comment">    /// \param coordinateY </span>
<a name="l00229"></a>00229 <span class="comment">    /// Input Y ordinate.</span>
<a name="l00230"></a>00230 <span class="comment">    /// </span>
<a name="l00231"></a>00231 <span class="comment">    /// \return</span>
<a name="l00232"></a>00232 <span class="comment">    /// Returns TRUE if the point is within polygon or on its boundary, FALSE otherwise.</span>
<a name="l00233"></a>00233 <span class="comment">    /// </span>
<a name="l00234"></a>00234 <span class="comment"></span>    <span class="keyword">static</span> System::Boolean PointInPolygon(<a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_afc25249d9349911d3c1ff97698e6a88.htm#afc25249d9349911d3c1ff97698e6a88">NAMESPACE_OSGEO_GEOMETRY::IPolygon</a>* polygon, System::Double coordinateX, System::Double coordinateY);
<a name="l00235"></a>00235 <span class="comment"></span>
<a name="l00236"></a>00236 <span class="comment">    /// \brief</span>
<a name="l00237"></a>00237 <span class="comment">    /// Computes the area of a ring.</span>
<a name="l00238"></a>00238 <span class="comment">    /// </span>
<a name="l00239"></a>00239 <span class="comment">    /// \param ring </span>
<a name="l00240"></a>00240 <span class="comment">    /// Input Ring to test</span>
<a name="l00241"></a>00241 <span class="comment">    /// </span>
<a name="l00242"></a>00242 <span class="comment">    /// \return</span>
<a name="l00243"></a>00243 <span class="comment">    /// Returns The area. The value may be positive (counterclockwise orientation) or</span>
<a name="l00244"></a>00244 <span class="comment">    /// negative (clockwise orientation) </span>
<a name="l00245"></a>00245 <span class="comment">    /// </span>
<a name="l00246"></a>00246 <span class="comment"></span>    <span class="keyword">static</span> System::Double ComputeLinearRingArea( <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_0bcbdb0934462dcd2e1e48b364f78391.htm#0bcbdb0934462dcd2e1e48b364f78391">NAMESPACE_OSGEO_GEOMETRY::ILinearRing</a>* ring );
<a name="l00247"></a>00247 <span class="comment"></span>
<a name="l00248"></a>00248 <span class="comment">    /// \brief</span>
<a name="l00249"></a>00249 <span class="comment">    /// Computes the length (perimeter) of a ring.</span>
<a name="l00250"></a>00250 <span class="comment">    /// </span>
<a name="l00251"></a>00251 <span class="comment">    /// \param ring </span>
<a name="l00252"></a>00252 <span class="comment">    /// Input Ring to test</span>
<a name="l00253"></a>00253 <span class="comment">    /// </span>
<a name="l00254"></a>00254 <span class="comment">    /// \return</span>
<a name="l00255"></a>00255 <span class="comment">    /// Returns The length.</span>
<a name="l00256"></a>00256 <span class="comment">    /// </span>
<a name="l00257"></a>00257 <span class="comment"></span>    <span class="keyword">static</span> System::Double ComputeLinearRingLength( <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_0bcbdb0934462dcd2e1e48b364f78391.htm#0bcbdb0934462dcd2e1e48b364f78391">NAMESPACE_OSGEO_GEOMETRY::ILinearRing</a>* ring );
<a name="l00258"></a>00258 <span class="comment"></span>
<a name="l00259"></a>00259 <span class="comment">    /// \brief</span>
<a name="l00260"></a>00260 <span class="comment">    /// Creates a Polygon or a MultiPolygon from a collection of rings.</span>
<a name="l00261"></a>00261 <span class="comment">    /// </span>
<a name="l00262"></a>00262 <span class="comment">    /// \remarks</span>
<a name="l00263"></a>00263 <span class="comment">    /// /// </span>
<a name="l00264"></a>00264 <span class="comment">    /// </span>
<a name="l00265"></a>00265 <span class="comment">    /// \param rings </span>
<a name="l00266"></a>00266 <span class="comment">    /// Input Collection of rings</span>
<a name="l00267"></a>00267 <span class="comment">    /// \param relateRings </span>
<a name="l00268"></a>00268 <span class="comment">    /// Input Flag indicating if polygon formation is desired.</span>
<a name="l00269"></a>00269 <span class="comment">    /// If not desired (FALSE) a MultiPolygon containing only external polygons will be returned.</span>
<a name="l00270"></a>00270 <span class="comment">    /// When TRUE, the rings will be associated with each other, resulting in a polygon(s) with</span>
<a name="l00271"></a>00271 <span class="comment">    /// exterior/interior rings.</span>
<a name="l00272"></a>00272 <span class="comment">    /// </span>
<a name="l00273"></a>00273 <span class="comment">    /// \return</span>
<a name="l00274"></a>00274 <span class="comment">    /// Returns The geometry containing the input rings.</span>
<a name="l00275"></a>00275 <span class="comment">    /// </span>
<a name="l00276"></a>00276 <span class="comment">    /// Given a collection of rings the method may return, depending on flag relateRings:</span>
<a name="l00277"></a>00277 <span class="comment"></span>    <span class="keyword">static</span> <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_5a24fb2b06f2924801fd22644263647c.htm#5a24fb2b06f2924801fd22644263647c">NAMESPACE_OSGEO_GEOMETRY::IGeometry</a>* CreateGeometryFromRings( NAMESPACE_OSGEO_GEOMETRY::LinearRingCollection* rings, System ::Boolean relateRings );
<a name="l00278"></a>00278 <span class="comment"></span>
<a name="l00279"></a>00279 <span class="comment">    /// \brief</span>
<a name="l00280"></a>00280 <span class="comment">    /// Checks the geometric validity of a circular arc.</span>
<a name="l00281"></a>00281 <span class="comment">    /// E.g. Checks whether the points describing the arc are collinear within a tolerance.</span>
<a name="l00282"></a>00282 <span class="comment">    /// </span>
<a name="l00283"></a>00283 <span class="comment">    /// \param arc </span>
<a name="l00284"></a>00284 <span class="comment">    /// Input Circular arc to test</span>
<a name="l00285"></a>00285 <span class="comment">    /// \param tolerance </span>
<a name="l00286"></a>00286 <span class="comment">    /// Input Allowed tolerance</span>
<a name="l00287"></a>00287 <span class="comment">    /// </span>
<a name="l00288"></a>00288 <span class="comment">    /// \return</span>
<a name="l00289"></a>00289 <span class="comment">    /// Returns Flag indicating whether the arc has collinear points.</span>
<a name="l00290"></a>00290 <span class="comment">    /// </span>
<a name="l00291"></a>00291 <span class="comment"></span>    <span class="keyword">static</span> System::Boolean IsCircularArcValid( <a class="code" href="../../df/df7/namespace_o_s_geo_1_1_f_d_o_1_1_geometry_1b65104bc639e3218ed24a8885ba1f6a.htm#1b65104bc639e3218ed24a8885ba1f6a">NAMESPACE_OSGEO_GEOMETRY::ICircularArcSegment</a> *arc, System::Double tolerance );
<a name="l00292"></a>00292 
<a name="l00293"></a>00293 <span class="keyword">private</span>:
<a name="l00294"></a>00294     <a class="code" href="../../df/ded/class_o_s_geo_1_1_f_d_o_1_1_spatial_1_1_spatial_utility.htm">SpatialUtility</a>(){}
<a name="l00295"></a>00295 };
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <a class="code" href="../../d8/d30/_common_namespace_8h_f2928c9e1e0ad006cf83360d199652e2.htm#f2928c9e1e0ad006cf83360d199652e2">END_NAMESPACE_OSGEO_SPATIAL</a>
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 
</pre></div><!-- footer.html -->
		<hr>
		<table width="100%"  border="0">
			<tr>
				<td>Comments or suggestions? Send us <a href="mailto:isd.docs@autodesk.com&subject=FDO%20.NET%20API%20documentation">feedback</a>.</td>
				<!-- The logo can go in another cell, when we get one -->			
			</tr>
		</table>
	</body>
</html>
