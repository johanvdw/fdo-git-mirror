<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"	"http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>FDO .NET API Reference</title>
		<link href="../../custom.css" rel="stylesheet" type="text/css">
		<link href="../../tabs.css" rel="stylesheet" type="text/css">
	</head>
	<body bgcolor="#FFFFFF">
		<table width="100%"  border="0">
			<tr>
				<td><b>FDO .NET API Reference<b></td>
				<td align="right"><b>Feature Data Objects<b></td>
			</tr>
			
		</table>
<!-- End of: header.html -->
<!-- Generated by Doxygen 1.5.1-p1 -->
<div class="tabs">
  <ul>
    <li><a href="../../main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="../../modules.htm"><span>Modules</span></a></li>
    <li><a href="../../namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="../../classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="../../files.htm"><span>Files</span></a></li>
    <li><a href="../../pages.htm"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="../../files.htm"><span>File&nbsp;List</span></a></li>
    <li><a href="../../globals.htm"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>CommonUtilities.h</h1><a href="../../d0/d0c/_common_utilities_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2004-2006  Autodesk, Inc.</span>
<a name="l00003"></a>00003 <span class="comment">* </span>
<a name="l00004"></a>00004 <span class="comment">* This library is free software; you can redistribute it and/or</span>
<a name="l00005"></a>00005 <span class="comment">* modify it under the terms of version 2.1 of the GNU Lesser</span>
<a name="l00006"></a>00006 <span class="comment">* General Public License as published by the Free Software Foundation.</span>
<a name="l00007"></a>00007 <span class="comment">* </span>
<a name="l00008"></a>00008 <span class="comment">* This library is distributed in the hope that it will be useful,</span>
<a name="l00009"></a>00009 <span class="comment">* but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00010"></a>00010 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00011"></a>00011 <span class="comment">* Lesser General Public License for more details.</span>
<a name="l00012"></a>00012 <span class="comment">* </span>
<a name="l00013"></a>00013 <span class="comment">* You should have received a copy of the GNU Lesser General Public</span>
<a name="l00014"></a>00014 <span class="comment">* License along with this library; if not, write to the Free Software</span>
<a name="l00015"></a>00015 <span class="comment">* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">*/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#pragma once</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;FdoCommon.h&gt;</span>
<a name="l00023"></a>00023 <span class="comment"></span>
<a name="l00024"></a>00024 <span class="comment">/// \cond DOXYGEN-IGNORE</span>
<a name="l00025"></a>00025 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="keyword">class </span>StringToUni
<a name="l00027"></a>00027 {
<a name="l00028"></a>00028 <span class="keyword">private</span>:
<a name="l00029"></a>00029     <span class="keywordtype">void</span>* m_ptr;
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">public</span>:
<a name="l00032"></a>00032     StringToUni(System::Object * str)
<a name="l00033"></a>00033     {
<a name="l00034"></a>00034         m_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalUni(__try_cast&lt;System::String*&gt;(str)).ToPointer();
<a name="l00035"></a>00035     }
<a name="l00036"></a>00036     StringToUni(System::String * str)
<a name="l00037"></a>00037     {
<a name="l00038"></a>00038         m_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalUni(str).ToPointer();
<a name="l00039"></a>00039     }
<a name="l00040"></a>00040     ~StringToUni()
<a name="l00041"></a>00041     {
<a name="l00042"></a>00042         System::Runtime::InteropServices::Marshal::FreeHGlobal(System::IntPtr(m_ptr));
<a name="l00043"></a>00043     }
<a name="l00044"></a>00044     operator const FdoString*()
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046         <span class="keywordflow">return</span> (<span class="keyword">const</span> FdoString*)m_ptr;
<a name="l00047"></a>00047     }
<a name="l00048"></a>00048 }; 
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="keyword">class </span>StringToAnsi
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052 <span class="keyword">private</span>:
<a name="l00053"></a>00053     <span class="keywordtype">void</span>* m_ptr;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="keyword">public</span>:
<a name="l00056"></a>00056     StringToAnsi(System::Object * str)
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058         m_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(__try_cast&lt;System::String*&gt;(str)).ToPointer();
<a name="l00059"></a>00059     }
<a name="l00060"></a>00060     StringToAnsi(System::String * str)
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062         m_ptr = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(str).ToPointer();
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064     ~StringToAnsi()
<a name="l00065"></a>00065     {
<a name="l00066"></a>00066         System::Runtime::InteropServices::Marshal::FreeHGlobal(System::IntPtr(m_ptr));
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068     operator const char*()
<a name="l00069"></a>00069     {
<a name="l00070"></a>00070         <span class="keywordflow">return</span> (<span class="keyword">const</span> <span class="keywordtype">char</span>*)m_ptr;
<a name="l00071"></a>00071     }
<a name="l00072"></a>00072 };   
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="keyword">inline</span> System::Byte FdoByteArrayToByteArray(<span class="keyword">const</span> FdoByte* umBuffer, FdoInt32 len) []
<a name="l00075"></a>00075 {
<a name="l00076"></a>00076     System::Byte mgBuffer __gc[] = <span class="keyword">new</span> System::Byte[len];
<a name="l00077"></a>00077     <span class="keywordflow">for</span> (FdoInt32 i = 0; i &lt; len; i++)
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079         mgBuffer[i] = umBuffer[i];
<a name="l00080"></a>00080     }
<a name="l00081"></a>00081     <span class="keywordflow">return</span> mgBuffer;
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 <span class="comment"></span>
<a name="l00084"></a>00084 <span class="comment">/// \brief</span>
<a name="l00085"></a>00085 <span class="comment">/// Convert a managed ByteArray buffer to a new unmanaged ByteArray buffer.</span>
<a name="l00086"></a>00086 <span class="comment">/// This new buffer should be released when it isn't used.</span>
<a name="l00087"></a>00087 <span class="comment"></span><span class="keyword">inline</span> FdoByteArray* ByteArrayToFdoByteArray(System::Byte mgBuffer __gc[])
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089     FdoByte* umBuffer = <span class="keyword">new</span> FdoByte[mgBuffer-&gt;Length];
<a name="l00090"></a>00090     <span class="keywordflow">for</span> (FdoInt32 i = 0; i &lt; mgBuffer-&gt;Length; i++)
<a name="l00091"></a>00091     {
<a name="l00092"></a>00092         umBuffer[i] = mgBuffer[i];
<a name="l00093"></a>00093     }
<a name="l00094"></a>00094     <span class="keywordflow">return</span> FdoByteArray::Create(umBuffer, mgBuffer-&gt;Length);
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="keyword">inline</span> System::String* FdoStringArrayToStringArray(<span class="keyword">const</span> FdoString** umArray, FdoInt32 len) []
<a name="l00098"></a>00098 {
<a name="l00099"></a>00099     System::String* mgArray __gc[] = __gc <span class="keyword">new</span> System::String*[len];
<a name="l00100"></a>00100     <span class="keywordflow">for</span> (FdoInt32 i = 0; i &lt; len; i++)
<a name="l00101"></a>00101     {
<a name="l00102"></a>00102         mgArray[i] = <span class="keyword">new</span> System::String(umArray[i]);
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104     <span class="keywordflow">return</span> mgArray;
<a name="l00105"></a>00105 }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 <span class="keyword">inline</span> FdoString** UnwrapStringArray(System::String* mgArray[])
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109     FdoString** umArray = <span class="keyword">new</span> FdoString*[mgArray-&gt;Length];
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="keywordflow">for</span> (FdoInt32 i = 0; i &lt; mgArray-&gt;Length; i++)
<a name="l00112"></a>00112     {
<a name="l00113"></a>00113         <span class="keywordtype">wchar_t</span>* temp = <span class="keyword">new</span> <span class="keywordtype">wchar_t</span>[mgArray[i]-&gt;Length];
<a name="l00114"></a>00114         wcscpy(temp, StringToUni(mgArray[i]));
<a name="l00115"></a>00115         umArray[i] = temp;
<a name="l00116"></a>00116     }
<a name="l00117"></a>00117     <span class="keywordflow">return</span> umArray;
<a name="l00118"></a>00118 }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="keyword">inline</span> System::DateTime FdoDateTimeToDateTime(FdoDateTime&amp; date)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123     <span class="keywordflow">return</span> System::DateTime(date.year, date.month, date.day, date.hour, date.minute, System::Int32(date.seconds));;
<a name="l00124"></a>00124 }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="keyword">inline</span> FdoDateTime SystemDateToFdoDateTime(System::DateTime date)
<a name="l00127"></a>00127 {
<a name="l00128"></a>00128     <span class="keywordflow">return</span> FdoDateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, FdoFloat(date.Second));
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="keyword">inline</span> System::Boolean* FdoBoolToBoolean(FdoBoolean* b)
<a name="l00132"></a>00132 {
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="keyword">inline</span> <span class="keyword">static</span> FdoBoolean* BooleanToFdoBool(System::Boolean* b)
<a name="l00136"></a>00136 {   
<a name="l00137"></a>00137     System::Boolean __pin* bb = b;
<a name="l00138"></a>00138     <span class="keywordflow">return</span> bb;
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 <span class="comment"></span>
<a name="l00141"></a>00141 <span class="comment">/// \endcond</span>
</span></pre></div><!-- footer.html -->
		<hr>
		<table width="100%"  border="0">
			<tr>
				<td>Comments or suggestions? Send us <a href="mailto:isd.docs@autodesk.com&subject=FDO%20.NET%20API%20documentation">feedback</a>.</td>
				<!-- The logo can go in another cell, when we get one -->			
			</tr>
		</table>
	</body>
</html>
