#ifndef FDO_SCHEMA_XML_CONTEXT_H
#define FDO_SCHEMA_XML_CONTEXT_H
// 
//  Copyright (C) 2004-2006  Autodesk, Inc.
//  
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of version 2.1 of the GNU Lesser
//  General Public License as published by the Free Software Foundation.
//  
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//  
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#include <Std.h>
#include <Fdo/Xml/Context.h>
#include <Fdo/Xml/SchemaMapping.h>
#include <Fdo/Schema/FeatureSchemaCollection.h>
#include <Fdo/Schema/FeatureClass.h>
#include <Fdo/Schema/NetworkLinkFeatureClass.h>
#include <Fdo/Schema/NetworkClass.h>
#include <Fdo/Schema/NetworkNodeFeatureClass.h>
#include <Fdo/Schema/UniqueConstraint.h>
#include <Fdo/Schema/ObjectPropertyDefinition.h>

class FdoSchemaXmlContext : public FdoXmlContext
{
public:
    // Constructs a context for parsing Feature Schemas from 
    // an XML document.
    //
    // Parameters:
    //      schemas - read the Feature Schemas into this collection. 
	static FdoSchemaXmlContext* Create( FdoFeatureSchemaCollection* schemas );

    // Constructs a context for serializing Feature Schemas to
    // an XML document.
    //
    // Parameters:
    //      flags - control how XML serialization is performed
    //      writer - serialize to this XML writer.
    static FdoSchemaXmlContext* Create( FdoXmlFlags* flags, FdoXmlWriter* writer );

    // Gets the destination Feature Schema collection
    // for reading the Feature Schemas from XML.
	FdoFeatureSchemaCollection* GetSchemas() const;

    // Gets the current XML writer. NULL if not serializing.
    FdoXmlWriter* GetXmlWriter();
    
    //  Gets the Schema Mapping Collection generated by this XML Context.
	FDO_API FdoPhysicalSchemaMappingCollection* GetXmlSchemaMappings();

    // Adds a schema to the list of schemas being added to the feature
    // schema collection.
    //
    // Parameters:
    //      schemaName - name of the schema
    //      atts - schema's XML attributes.
    //
    // Returns:
    //      The added Feature Schema.
    FdoFeatureSchemaP AddSchema( FdoString* schemaName, FdoXmlAttributeCollection* attrs );

    // Adds a reference between a class and its base class.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the class.
    //      schemaName - base class schema name.
    //      className - base class name.
    void AddBaseClassRef( FdoClassDefinition* pReferencer, FdoString* schemaName, FdoString* className );

    // Adds a reference between an object property and its class.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the object property.
    //      schemaName - class schema name.
    //      className - class name.
    void AddObjPropRef( FdoObjectPropertyDefinition* pReferencer, FdoString* schemaName, FdoString* className );


    // Adds a reference between a network node feature class and the layer association proeprty.
    //
    // Parameters:
    //      pReferencer - the network node feature class.
    //      assoc - the layer association property name
    //      
    void AddNetworkNodeAssocPropRef( FdoNetworkNodeFeatureClass* pReferencer, FdoString* assoc );

    // Adds a reference between a network link feature class and the start association property.
    //
    // Parameters:
    //      pReferencer - the network link feature class.
    //      assoc - the start association property name
    void AddNetworkLinkStartAssocPropRef( FdoNetworkLinkFeatureClass* pReferencer, FdoString* assoc );

    // Adds a reference between a network link feature class and the end association property.
    //
    // Parameters:
    //      pReferencer - the network link feature class.
    //      assoc - the end association property name
    void AddNetworkLinkEndAssocPropRef( FdoNetworkLinkFeatureClass* pReferencer, FdoString* assoc );

    // Adds a reference between a network feature class and the cost association property.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the network feature class
    //      cost - the cost association property name
    void AddNetworkFeatureCostPropRef( FdoNetworkFeatureClass* pReferencer, FdoString* cost );


    // Adds a reference between a network feature and the network property association property.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the network feature class
    //      networkProp - the association network property name
    void AddNetworkFeatureNetworkPropRef( FdoNetworkFeatureClass* pReferencer, FdoString* networkProp );

    // Adds a reference between a network feature class and the reference feature association property.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the network feature class
    //      refFeatProp - the reference feature property association name
    void AddNetworkFeatureRefFeatPropRef( FdoNetworkFeatureClass* pReferencer, FdoString* refFeatProp );

    // Adds a reference between a network feature class and the parent network feature assocaition property.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the network feature class
    //      parentNetworkFeatProp - the parent network feature association property name
    void AddNetworkFeatureParentNetworkFeatPropRef( FdoNetworkFeatureClass* pReferencer, FdoString* parentNetworkFeatProp );

    // Adds a reference between a network class and its layer class.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the network class.
    //      schemaName - class schema name.
    //      className - class name.
    void AddNetworkClassRef( FdoNetworkClass* pReferencer, FdoString* schemaName, FdoString* className );


    // Adds a reference between a associate property and its associated class.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the associate property.
    //      schemaName - associate class schema name.
    //      className - associate class name.
    void AddAssocPropRef( FdoAssociationPropertyDefinition* pReferencer, FdoString* schemaName, FdoString* className );

    // Adds a reference between a class and its identity properties.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the class
    //      idProps - the identity property names.
    void AddIdPropRef( FdoClassDefinition* pReferencer, FdoStringsP idProps );

    // Adds a reference between a class' unique constraint and its properties.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the class
	//		pUniConsRef - this class's unique constraint
    //      props - the property names.
    void AddUniqueConstraintRef( FdoClassDefinition* pClsRef, FdoUniqueConstraint* pUniConsRef, FdoStringsP props );

    // Adds a reference between an object property and its identity property.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the object property
    //      idProp - the identity property name.
    void AddObjIdPropRef( FdoObjectPropertyDefinition* pReferencer, FdoString* idProp );
    
    // Adds a reference between an association property and its identity properties.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the association property
    //      idProps - the identity property names.
    void AddAssocIdPropRef( FdoAssociationPropertyDefinition* pReferencer, FdoStringsP idProps );

    void AddAssocIdReversePropRef( FdoAssociationPropertyDefinition* pReferencer, FdoStringsP idProps );

    // Adds a reference between a feature class and its geometry property.
    // These references are resolved after all the classes have been read.
    //
    // Parameters:
    //      pReferencer - the feature class
    //      geomProp - the geometry property name.
    void AddGeomPropRef( FdoFeatureClass* pReferencer, FdoString* geomProp );

    // Add GML Schema Mapping for a feature schema
    void AddSchemaMapping (
        FdoString* schemaName,
        FdoString* targetNamespace
    );

    // Add GML Schema Mapping for a global element
    void AddElementMapping (
        FdoString* elementSchema,
        FdoString* elementName,
        FdoString* classSchema,
        FdoString* className
    );

    // Add GML Schema Mapping for a class sub-element
    void AddSubElementMapping (
        FdoString* elementSchema,
        FdoString* elementContainer,
        FdoString* elementName,
        FdoString* classSchema,
        FdoString* className,
        FdoString* gmlUri,
        FdoString* gmlLocalName
    );

    // Add GML Schema Mapping for a class 
    void AddClassMapping (
        FdoString* classSchema,
        FdoString* className,
        FdoString* gmlName,
        FdoString* wkSchema,
        FdoString* wkClass
    );

    // Find a class in the given schema collection.
    FdoClassDefinition* FindClass( FdoFeatureSchemaCollection* pSchemas, const FdoString* schemaName, const FdoString* className );
    
    FdoClassDefinition* CreateClass( 
        FdoString* schemaName, 
        FdoString* className, 
        FdoXmlAttributeCollection* atts 
    );

    // Converts a name to be a valid XML element or attribute name.
    FdoStringP EncodeName( FdoStringP name );

    // Given a referenced class definition, returns its schema name.
    // Logs an error if class is orphan (not in a feature schema).
    //
    // Parameters:
    //      pRefElement - schema element that references the class. Used in error message.
    //      pClass - the referenced class.
    FdoStringP RefClass2SchemaName( FdoSchemaElement* pRefElement, FdoClassDefinition* pClass );
    
    // Given a referenced association property, returns whether it can be
    // written to XML.
    // Logs an error if the property's associated class is an orphan (not in a feature 
    // schema).
    //
    // This function is used when writing special association properties for Network
    // classes. These properties are direct members rather than actual properties of
    // these classes. This function ensures that the error message has proper 
    // contextual information.
    //
    // Parameters:
    //      pRefElement - schema element that references the association property. Used in error message.
    //      pAssoc - the association property.
    FdoBoolean CheckWriteAssoc( FdoSchemaElement* pRefElement, FdoAssociationPropertyDefinition* pAssoc );
    
    // Commits the schemas that were read. Resolves all references. If there
    // are any errors these are thrown. Otherwise, the schemas that were
    // read are merged into the Feature Schema collection.
    //
    void CommitSchemas();

protected:
    FdoSchemaXmlContext() {}
	FdoSchemaXmlContext( FdoFeatureSchemaCollection* schemas );
    FdoSchemaXmlContext( FdoXmlFlags* flags, FdoXmlWriter* writer );
    virtual ~FdoSchemaXmlContext() {}

    void Init();

    // Various functions for resolving references.
    void ResolveBaseClasses();
    void ResolveObjPropClasses();
    void ResolveAssociatedPropClasses();
    void ResolveNetworkLinkProps();
    void ResolveNetworkProps();
    void ResolveNetworkNodeProps();
    void ResolveNetworkFeatureProps();
    void ResolveIdProps();
    void ResolveObjIdProps();
    void ResolveAssocIdProps();
    void ResolveAssocIdReverseProps();
    void ResolveGeomProps();
	void ResolveUniqueConstraints();
    // For each referencing class, without geometryProperty, pick a geometryProperty
    // for it. One is pick only if there is only geometric property on the class and
    // all of its ancestors.
    void ResolveDefaultGeomProps();

    // Resolve element mapping to class mapping references. Links element mapping objects
    // to the objects for their classes.
    void ResolveSchemaMappings();
    void ResolveElementMappings( 
        FdoXmlSchemaMappingP schemaMapping,
        FdoXmlElementMappingsP elementMappings
    );

    // Merge the schemas that were read, into the schema collection.
    void MergeSchemas();

    // Various functions for finding FDO elements. 

    // Find a class property. Walks up the base classes until the property is found.
    FdoPropertyDefinition* FindProperty( FdoClassDefinition* pClass, const FdoString* propName, FdoBoolean checkUpdSchemas = true );
    // Find an identity property. Checks the topmost base class.
    FdoDataPropertyDefinition* GetIdProperty( FdoClassDefinition* pClass, const FdoInt32 idx, FdoBoolean checkUpdSchemas = true );

    // Gets the topmost base class for a class.
    FdoClassDefinition* GetTopClass( FdoClassDefinition* pClass );
    // Gets the base class for a class. Gets the most recent object. Returns the
    // object read from XML. If the base class was not read from XML then its
    // original object is returned.
    FdoClassDefinition* GetBaseClass( FdoClassDefinition* pClass );

    // Get a schema mapping set for the given feature schema.
    // Create it if it doesn't yet exist.
    FdoXmlSchemaMappingP GetSchemaMapping( FdoStringP schemaName );

private:
    // Definition for a reference to a class.
    class ClassRef : public FdoIDisposable 
    {
    public:
        static ClassRef* Create( FdoSchemaElement* pReferencer, FdoStringP schemaName, FdoStringP className );

        // Get the referencing element.
        FdoSchemaElement* GetReferencer();
        FdoSchemaElement* GetNewReferenced();
        void SetNewReferenced( FdoSchemaElement* pNewReferenced );
        FdoStringP GetSchemaName();
        FdoStringP GetClassName();
        FdoStringP GetName(); 

        // Indicates that this object does not allow its name
        // to change. Not allowing name change allows more efficient 
        // random access to FdoDictionary.
        virtual FdoBoolean CanSetName()
        {
            return false;
        }

    protected:
        ClassRef() {}
        ClassRef( FdoSchemaElement* pReferencer, FdoStringP schemaName, FdoStringP className );
        virtual ~ClassRef() {}

        virtual void Dispose();

    private:
        FdoSchemaElementP mReferencer;
        FdoSchemaElementP mNewReferenced;
        FdoStringP mReferencerName;
        FdoStringP mSchemaName;
        FdoStringP mClassName;
    };
    
    // Collection of references to classes.
    class ClassRefs : public FdoNamedCollection<ClassRef,FdoException>
    {
    protected:
        virtual void Dispose();

        ClassRefs() {}

    public:
        /// <summary>Gets the number of items in the collection.</summary>
        /// <returns>Returns number of items in the collection</returns> 
        static ClassRefs* Create()
        {
            return new  ClassRefs();
        }
    };

    // Definition of a reference to a collection of strings.
    class StringsRef : public FdoIDisposable 
    {
    public:
        static StringsRef* Create( FdoSchemaElement* pReferencer, FdoStringsP strings );

        FdoSchemaElement* GetReferencer();
        FdoStringsP GetStrings();
        FdoStringP GetName(); 

        // Indicates that this object does not allow its name
        // to change. Not allowing name change allows more efficient 
        // random access to FdoDictionary.
        virtual FdoBoolean CanSetName()
        {
            return false;
        }

    protected:
        StringsRef() {}
        StringsRef( FdoSchemaElement* pReferencer, FdoStringsP strings );
        virtual ~StringsRef() {}

        virtual void Dispose();

    private:
        FdoPtr<FdoSchemaElement> mReferencer;
        FdoStringsP mStrings;
        FdoStringP mQName;
    };
    
    // Collection of references to string collections
    class StringsRefs : public FdoNamedCollection<StringsRef,FdoException>
    {
    protected:
        virtual void Dispose();

        StringsRefs() {}

    public:
        /// <summary>Gets the number of items in the collection.</summary>
        /// <returns>Returns number of items in the collection</returns> 
        static StringsRefs* Create()
        {
            return new  StringsRefs();
        }
    };

	// Definition of a reference to unique constraint
	class UniqueConstraintRef : public FdoDisposable
	{
    public:
        static UniqueConstraintRef* Create( FdoClassDefinition* pClsRef, FdoUniqueConstraint* pUniConsRef, FdoStringsP strings );

        FdoClassDefinition* GetRefClass();
		FdoUniqueConstraint* GetRefUniqueConstraint();
        FdoStringsP GetStrings();
        FdoStringP GetName(); 

        // Indicates that this object does not allow its name
        // to change. Not allowing name change allows more efficient 
        // random access to FdoDictionary.
        virtual FdoBoolean CanSetName()
        {
            return false;
        }

    protected:
        UniqueConstraintRef() {}
        UniqueConstraintRef( FdoClassDefinition* pClsRef, FdoUniqueConstraint* pUniConsRef, FdoStringsP strings );
        virtual ~UniqueConstraintRef() {}

    private:
        FdoPtr<FdoClassDefinition> mClsRef;
		FdoPtr<FdoUniqueConstraint> mUniConsRef;
        FdoStringsP mStrings;
        FdoStringP mQName;
	};

	// Collection of references to unique constraint references
    class UniqueConstraintRefs : public FdoCollection<UniqueConstraintRef,FdoException>
    {
    protected:
        virtual void Dispose();

        UniqueConstraintRefs() {}

    public:
        /// <summary>Gets the number of items in the collection.</summary>
        /// <returns>Returns number of items in the collection</returns> 
        static UniqueConstraintRefs* Create()
        {
            return new  UniqueConstraintRefs();
        }
    };

    // The current Feature Schemas
    FdoFeatureSchemaCollection* mSchemas;
    FdoXmlWriterP mWriter;
    // The Feature Schemas being read from the XML document.
    FdoPtr<FdoFeatureSchemaCollection> mUpdSchemas;
    // Base class references
    FdoPtr<ClassRefs> mBaseClassRefs;
    // Object Property class references
    FdoPtr<ClassRefs> mObjPropRefs;
    // Associate class reference
    FdoPtr<ClassRefs> mAssocPropRefs;
    // Identity property references
    FdoPtr<StringsRefs> mIdPropRefs;
	// Unique constraint references
    FdoPtr<UniqueConstraintRefs> mUniConsRefs;
    // Object Property identity property references
    FdoPtr<StringsRefs> mObjIdPropRefs;

    // Network Node association property references
    FdoPtr<StringsRefs> mNetworkNodeAssocPropRefs;
    // Network Link Start association property reference
    FdoPtr<StringsRefs> mNetworkLinkStartAssocPropRefs;
    // Network Link End association property reference
    FdoPtr<StringsRefs> mNetworkLinkEndAssocPropRefs;
    // Network Feature Cost property reference
    FdoPtr<StringsRefs> mNetworkFeatureCostPropRefs;
    // Network Feature network property reference
    FdoPtr<StringsRefs> mNetworkFeatureNetworkPropRefs;
    // Network Feature reference feature property reference
    FdoPtr<StringsRefs> mNetworkFeatureRefFeatPropRef;
    // Network Feature parent network feature property reference
    FdoPtr<StringsRefs> mNetworkFeatureParentNetworkFeatPropRef;
    // Network reference 
    FdoPtr<ClassRefs> mNetworkRefs;

    // Association Property identity property references
    FdoPtr<StringsRefs> mAssocIdPropRefs;
    // Association Property identity reverse property references
    FdoPtr<StringsRefs> mAssocIdReversePropRefs;

    // Geometry property references.
    FdoPtr<StringsRefs> mGeomPropRefs;
    FdoStringP mUrl;

    // GML to FDO Schema Mappings
    FdoSchemaMappingsP     mXmlSchemaMappings; 
    FdoXmlSchemaMappingP     mXmlMapping;
};

typedef FdoPtr<FdoSchemaXmlContext> FdoSchemaXmlContextP;

#endif

