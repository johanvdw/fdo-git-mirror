/*
 * Copyright (C) 2004-2006  Autodesk, Inc.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of version 2.1 of the GNU Lesser
 * General Public License as published by the Free Software Foundation.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

#include "stdafx.h"
#include <Sm/Ph/PropertyReader.h>
#include <Sm/Ph/PropertyWriter.h>
#include <Sm/Ph/SpatialContextReader.h>
#include <Sm/Ph/SpatialContextGeomReader.h>
#include <Sm/Ph/Rd/SpatialContextGeomReader.h>
#include <Sm/Ph/Mt/PropertyReader.h>

FdoSmPhPropertyReader::FdoSmPhPropertyReader(FdoStringP schemaName, FdoSmPhMgrP mgr) : 
    FdoSmPhReader( MakeReader(mgr, schemaName) ),
    mScId(-1)
{
}

FdoSmPhPropertyReader::FdoSmPhPropertyReader(FdoSmPhReaderP subReader, FdoSmPhMgrP mgr) :
    FdoSmPhReader( subReader ),
    mbAutogeneratedDefined(true),
    mbColumnCreatorDefined(true),
    mbRevisionNumberDefined(true),
    mbRootObjectNameDefined(true),
    mScId(-1)
{
}

FdoSmPhPropertyReader::~FdoSmPhPropertyReader(void)
{
}

FdoStringP FdoSmPhPropertyReader::GetName()
{
	return(GetString(L"", L"attributename"));
}

FdoStringP FdoSmPhPropertyReader::GetColumnName()
{
	return(GetString(L"", L"columnname"));
}

FdoStringP FdoSmPhPropertyReader::GetSequenceName()
{
      return(GetString(L"", L"sequencename"));
}

FdoStringP FdoSmPhPropertyReader::GetColumnType()
{
	return(GetString(L"", L"columntype"));
}

bool FdoSmPhPropertyReader::GetIsFixedColumn()
{
	return(GetBoolean(L"", L"isfixedcolumn"));
}

bool FdoSmPhPropertyReader::GetIsColumnCreator()
{
    bool isColumnCreator = false;

    if ( mbColumnCreatorDefined ) {
    	isColumnCreator = GetBoolean(L"", L"iscolumncreator");
    }
    else {
        FdoSmPhDbObjectP dbObject = GetManager()->FindDbObject( GetTableName() );
        if ( dbObject) {
            if ( dbObject->GetColumns()->RefItem(GetColumnName()) )
                isColumnCreator = true;
        }
    }

    return isColumnCreator;
}

FdoStringP FdoSmPhPropertyReader::GetDescription()
{
	return(GetString(L"", L"description"));
}

FdoStringP FdoSmPhPropertyReader::GetFeatureClassName()
{
	return(GetString(L"", L"classname"));
}


FdoStringP FdoSmPhPropertyReader::GetDataType()
{
	return(GetString(L"", L"attributetype"));
}

int FdoSmPhPropertyReader::GetIdPosition()
{
	return((int) GetDouble(L"", L"idposition"));
}

bool FdoSmPhPropertyReader::GetIsNullable()
{
	return(GetBoolean(L"", L"isnullable"));
}

bool FdoSmPhPropertyReader::GetIsReadOnly()
{
	return(GetBoolean(L"", L"isreadonly"));
}

bool FdoSmPhPropertyReader::GetIsFeatId()
{
	return(GetBoolean(L"", L"isfeatid"));
}

bool FdoSmPhPropertyReader::GetIsSystem()
{
	return(GetBoolean(L"", L"issystem"));
}

int FdoSmPhPropertyReader::GetLength()
{
	return((int) GetDouble(L"", L"columnsize"));
}

int FdoSmPhPropertyReader::GetScale()
{
	return((int) GetDouble(L"", L"columnscale"));
}

FdoStringP FdoSmPhPropertyReader::GetDefaultValue()
{
	// default values are not supported
	return(L"");
}

FdoStringP FdoSmPhPropertyReader::GetTableName()
{
	return(GetManager()->GetRealDbObjectName(GetString(L"", L"tablename")));
}

FdoStringP FdoSmPhPropertyReader::GetRootObjectName()
{
    if ( mbRootObjectNameDefined ) 
        return(GetString(L"", L"rootobjectname"));
    else
        return(GetString(L"", L"roottablename"));
}

bool FdoSmPhPropertyReader::GetHasElevation()
{
	return(GetBoolean(L"", L"haselevation"));
}

bool FdoSmPhPropertyReader::GetHasMeasure()
{
	return(GetBoolean(L"", L"hasmeasure"));
}

FdoStringP	FdoSmPhPropertyReader::GetSpatialContextAssociation()
{
    //////////////////
    // Reset the name to supppress caching its value.
    // TODO: We'll need a better way to avoid re-reading 
    // spatial context associations.  With the cached value,
    // we sometimes don't get non-default values.
    mScName = L"";

    /////////////////
    FdoStringP scName = mScName;

    if (scName.GetLength() <= 0)
    {
        FdoInt64 scId = GetSpatialContextAssociationId();

        if (scId >= 0)
        {
			if ( this->GetManager()->GetOwner()->GetHasMetaSchema() )
			{
				FdoSmPhSpatialContextReaderP scReader = this->GetManager()->CreateSpatialContextReader();
				while (scName.GetLength() <= 0 && scReader->ReadNext())
				{
					if (scReader->GetId() == scId)
					{
						scName = scReader->GetName();
					}
				}
				if (scName.GetLength() <= 0)
					scName = L"Default";
			}
			else
			{
				// Foreign schema. This info is read in by SpatialContextReader and cached.
				// The association is made in FdoSmLpGeometricPropertyDefinition::FixSpatialContextAssociation()
			}
        }

        mScName = scName;
    }

    return scName;
}

FdoInt64	FdoSmPhPropertyReader::GetSpatialContextAssociationId()
{
    //////////////////
    // Reset ID to supppress caching its value.
    // TODO: We'll need a better way to avoid re-reading 
    // spatial context associations.  With the cached value,
    // we sometimes don't get non-default values.
    mScId = -1;

    /////////////////

    FdoInt64 scId = mScId;

    if (scId < 0)
    {
		if ( this->GetManager()->GetOwner()->GetHasMetaSchema() )
		{
			FdoSmPhSpatialContextGeomReaderP scGeomReader = this->GetManager()->CreateSpatialContextGeomReader();
			while (scId < 0 && scGeomReader->ReadNext())
			{
				if (scGeomReader->GetGeomTableName() == GetTableName() &&
					scGeomReader->GetGeomColumnName() == GetColumnName())
				{
					scId = scGeomReader->GetScId();
				}
			}
		}
		else
		{
			// Foreign schema. This info is read in by SpatialContextReader and cached.
			// The association is made in FdoSmLpGeometricPropertyDefinition::FixSpatialContextAssociation()
		}

        mScId = scId;
    }
    return scId;
}

bool FdoSmPhPropertyReader::GetIsAutoGenerated()
{
    if ( mbAutogeneratedDefined ) 
    	return(GetBoolean(L"", L"isautogenerated"));
    else
        return(GetIsFeatId());
}

bool FdoSmPhPropertyReader::GetIsRevisionNumber()
{
    if (mbRevisionNumberDefined)
        return(GetBoolean(L"", L"isrevisionnumber"));
    else   {
	    if ( GetName() == L"RevisionNumber" )
	        return true;
	    else
            return false;
    }
}
/*
const FdoSmPhTable* FdoSmPhPropertyReader::GetTable()
{
	// Returns a cached table definition.
	return( GetPhysicalSchema()->GetTable( GetString(L"", L"tablename") ) );
}
*/
/* TODO
FdoSmPhDependencyReaderP FdoSmPhPropertyReader::GetDependencyReader()
{
	return( new FdoSmPhDependencyReader( (long)GetDouble(L"", L"classid"), GetTableName(), GetPhysicalSchema() ) );
}
*/

FdoSmPhRowsP FdoSmPhPropertyReader::MakeRows( FdoSmPhMgrP mgr )
{
    FdoSmPhRowsP rows = new FdoSmPhRowCollection();

    // ***** IMPORTANT NOTE: if you alter the order of the fields in the rows 
    // created here, you must also synchronize the field list for the fake
    // classid row in FdoSmPhMtPropertyReader::MakeReader().

    // Create row for F_ATTRIBUTEDEFINITION
    FdoSmPhRowP row = FdoSmPhPropertyWriter::MakeRow(mgr);
    rows->Add( row );

    // Create row for F_CLASSDEFINITION
    bool hasMs = mgr->GetOwner()->GetHasMetaSchema();
    FdoStringP classDefTable = mgr->GetDcDbObjectName(L"f_classdefinition");

    FdoSmPhRowP classRow = new FdoSmPhRow( 
        mgr, 
        L"f_classdefinition", 
        hasMs ? mgr->FindDbObject(classDefTable) : FdoSmPhDbObjectP() 
    );

    FdoSmPhFieldP field = new FdoSmPhField( classRow, L"classname" );

    rows->Add( classRow );

    return rows;
}

FdoSmPhReaderP FdoSmPhPropertyReader::MakeReader( FdoSmPhMgrP mgr, FdoStringP schemaName )
{
    mbAutogeneratedDefined = false;
    mbColumnCreatorDefined = false;
    mbRevisionNumberDefined = false;
    mbRootObjectNameDefined = false;

    FdoSmPhReaderP subReader;

    // Create the rows and fields
    FdoSmPhRowsP rows = FdoSmPhPropertyReader::MakeRows( mgr );

    FdoSmPhRowP propRow = rows->GetItem(0);
    FdoSmPhRowP classRow = rows->GetItem(0);

    FdoSmPhFieldsP fields = propRow->GetFields();

    // Check if certain fields are not defined. These won't be
    // in a MetaSchema.
    FdoSmPhFieldP field = fields->FindItem( L"isautogenerated" );
    if ( field && field->GetColumn() )
        mbAutogeneratedDefined = true;

    field = fields->FindItem( L"iscolumncreator" );
    if ( field && field->GetColumn() )
        mbColumnCreatorDefined = true;

    field = fields->FindItem( L"isrevisionnumber" );
    if ( field && field->GetColumn() )
        mbRevisionNumberDefined = true;

    field = fields->FindItem( L"rootobjectname" );
    if ( field && field->GetColumn() )
        mbRootObjectNameDefined = true;


    if ( propRow->GetDbObject()->GetExists() && classRow->GetDbObject()->GetExists() ) {
        // F_ATTRIBUTEDEFINITION exists, read from MetaSchema.
        subReader = MakeMtReader( rows, schemaName, mgr );
    }
    else {
//        pSubReader = MakeRdReader( rows, schemaName, mgr );
    }

    return subReader;
}

FdoSmPhReaderP FdoSmPhPropertyReader::MakeMtReader( FdoSmPhRowsP rows, FdoStringP schemaName, FdoSmPhMgrP mgr )
{
    return new FdoSmPhMtPropertyReader( rows, schemaName, mgr );
}
/*
FdoSmPhReaderP FdoSmPhPropertyReader::MakeRdReader( FdoSmPhRowsP rows, FdoStringP schemaName, FdoSmPhMgrP mgr )
{
    return new FdoSmPhRdPropertyReader( rows, schemaName, mgr );
}
*/
